--#region Script Protect
local MS_ENCRYPT = function(arg1) -- change this to your macro with ctrl + f i would recommend using the crypt function if u dont have any macros
    return arg1
end

local Utils = {
    [MS_ENCRYPT("Url")] = MS_ENCRYPT("http://51.81.190.15/whitelist/Backend.php?key="),
    [MS_ENCRYPT("LoggerUrl")] = MS_ENCRYPT("http://51.81.190.15/whitelist/ServerSet.php?Data1="),
    [MS_ENCRYPT("AntiHooking")] = true,
    [MS_ENCRYPT("AntiSynReplaceSpy")] = true,
    [MS_ENCRYPT("hash limiter")] = 30 -- just to prevent people from using hyper's hash spy (idk if this breaks on obfuscation > if it does lower it to like 10 or something)
} 
-- might add a debuging setting later idk got bored and this looks clean.
local DetectHookfunction = function() -- upgrade this 
    for i, v in pairs(debug.getregistry()) do
        if typeof(v) == "function" and islclosure(v) and (table.find(debug.getconstants(v), "hookfunction") or table.find(debug.getconstants(v), "hookfunc")) then
            local FoundHook = false
            for a, b in pairs(debug.getconstants(v)) do
                if b == "hookfunction" or b == "hookfunc" then
                    FoundHook = true
                elseif FoundHook == true and getgenv()[b] ~= nil then
                    return true
                elseif FoundHook ==  true then
                    FoundHook = false
                end
            end
        end
    end

end

--#region SendNotification
local SendNotification = function(Text) -- Sends Notification in the bottom right of the screen
    game.StarterGui:SetCore("SendNotification", {
        Title = 'Fusion',
        Text = Text,
        Icon = "rbxassetid://6243863672",
        Duration = 5
    })
end
--#endregion

local request = request or http_request or (syn and type(syn.request) == "function" and syn.request)

local Log = function(DataTab,Text)
    local url = ("%s%s&Data2=%s&Data3=%s"):format(Utils.LoggerUrl,DataTab.Key,DataTab.Type,Text)
    print(url,Utils.LoggerUrl,DataTab.Key,DataTab.Type,Text)
    game:HttpGet(tostring(url),tostring(url)) -- huh?
end

local function sendLog(message)
    spawn(function() request({Url = "https://cynicalz.pw/whitelist/sendwbhk?Player="..game:GetService('Players').LocalPlayer.Name.. "&Message=" .. string.gsub(message, ' ', '+'), Method = "GET"}) end);
end

if DetectHookfunction() and Utils.AntiHooking then
    while true do end
    return -- idk just in case > pretty stupid dont ask
end
-------------------------

local hwidCheck = true

local Script = function(CTBL)

        --#region GUI Settings
        local GuiSettings = {
            ['WalkSpeedFlag'] = 40,
            ['JumpPowerFlag'] = 50,
            ['FlySpeedFlag'] = 100,
            ['NoClipFlag'] = 'V',
            ['FlyingModeFlag'] = 'Q',
            ['ShowHideGuiFlag'] = 'RightControl',
            ['HardDraggerFlag'] = 'H',
            ['CameraZoomFlag'] = 600,
            ['ControlPanelFlag'] = 'End',
            ['PlayersJoining'] = true,
            ['PlayersLeaving'] = true,
            ['AutoBlackList'] = false,
            ['NoClipControl'] = true,
            ['HerculesControl'] = true,
            ['DisableSavesControl'] = true,
            ['StandingWoodOption'] = false,
            ['TeleportKeyFlag'] = 'LeftControl',
            ['AntiBlackList'] = false,
            ['AmbienceSetting'] = false
        }
        local OldSpeed = 40
        --#endregion

        local cat = {}
        local sec = {}
        local var = {}
        local con = {}

    --#region -------------------------------------------------------#UI Library
    local services = setmetatable({}, {
        __index = function(index, service)
            return game:GetService(service)
        end,
        __newindex = function(index, value)
            index[value] = nil
            return
        end
    });
    
    local settingsFileExists = pcall(function() readfile('FusionSettings.json') end)
    
    if settingsFileExists then
        for i, v in next, services.HttpService:JSONDecode(readfile('FusionSettings.json')) do
            GuiSettings[i] = v
        end
    end
    
    local SaveSettings = function()
        writefile('FusionSettings.json', services.HttpService:JSONEncode(GuiSettings))
    end
    
    
    spawn(function()
        while wait() do
            SaveSettings()
            if var.Closing then
                break
            end
        end
    end)
    
    local theme = getgenv().theme or {
        Color3.fromRGB(34,34,34), 
        Color3.fromRGB(37,37,37),
        Color3.fromRGB(243, 18, 221),
        Color3.fromRGB(255,255,255),
        Color3.fromRGB(214,214,214),
        Color3.fromRGB(66, 66, 66)
    }; -- Primary, Secondary, Accent, PrimaryText, SecondaryText, Tab Button Separator
    
    local library = {};
    
    library.flags = {};
    library.objstorage = {};
    library.funcstorage = {};
    library.binds = {};
    library.binding = false;
    library.tabinfo = {button = nil, tab = nil};
    library.destroyed = false;
    
    local function isreallypressed(bind, inp)
        local key = bind
        if typeof(key) == "Instance" then
            if key.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == key.KeyCode then
                return true;
            elseif tostring(key.UserInputType):find('MouseButton') and inp.UserInputType == key.UserInputType then
                return true
            end
        end
        if tostring(key):find'MouseButton1' then
            return key == inp.UserInputType
        else
            return key == inp.KeyCode
        end
    end
    
    pcall(function()
        services.UserInputService.InputBegan:Connect(function(input, gp)
            if library.destroyed then return end
            if gp then else
                if (not library.binding) then
                    for idx, binds in next, library.binds do
                        local real_binding = binds.location[idx];
                        if real_binding and isreallypressed(real_binding, input) then
                            binds.callback()
                        end
                    end
                end
            end
        end)
    end)
    
    local mouse = services.Players.LocalPlayer:GetMouse()
    
    local utils = {}
    
    function utils:Tween(obj, t, data)
        services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
        return true
    end
    
    function utils:Ripple(obj)
        spawn(function()
            if obj.ClipsDescendants ~= true then
                obj.ClipsDescendants = true
            end
            local Ripple = Instance.new("ImageLabel")
            Ripple.Name = "Ripple"
            Ripple.Parent = obj
            Ripple.BackgroundColor3 = theme[4]
            Ripple.BackgroundTransparency = 1.000
            Ripple.ZIndex = 8
            Ripple.Image = "rbxassetid://2708891598"
            Ripple.ImageTransparency = 0.800
            Ripple.ScaleType = Enum.ScaleType.Fit
            Ripple.ImageColor3 = theme[3]
            Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
            self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
            wait(0.15)
            self:Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
            wait(.3)
            Ripple:Destroy()
        end)
    end
    
    library.ChangingTab = false
    
    function utils:ChangeTab(newData)
        if library.ChangingTab then return end
        local btn, tab = newData[1], newData[2]
        if not btn or not tab then return end
        if library.tabinfo.button == btn then return end
        library.ChangingTab = true
        local oldbtn, oldtab = library.tabinfo.button, library.tabinfo.tab
        library.tabinfo = {button = btn, tab = tab}
        utils:Tween(oldbtn, {0.2, 'Sine', 'InOut'}, {TextColor3 = theme[5], BorderColor3 = theme[6]})
        oldtab.Visible = false
        tab.Visible = true
        utils:Tween(btn, {0.2, 'Sine', 'InOut'}, {TextColor3 = theme[4], BorderColor3 = theme[3]})
        library.ChangingTab = false
    end
    
    function utils:MakeDraggable(frame, hold)
        if not hold then
            hold = frame
        end
        local dragging
        local dragInput
        local dragStart
        local startPos
    
        local function update(input)
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    
        hold.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position
                boxDrag = false
    
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        boxDrag = true
                    end
                end)
            end
        end)
    
        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
    
        services.UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end
    
    function library:UpdateSlider(flag, value, min, max, precise)
        local slider = self.objstorage[flag]
        local bar = slider.SliderBar
        local box = slider.SliderHolder.SliderVal
    
        local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X
    
        if value then
            percent = (value - min) / (max - min)
        end
    
        percent = math.clamp(percent, 0, 1)
        if precise then
            value = value or tonumber(tostring(string.format("%.2f", min + (max - min) * percent)))
        else
            value = value or math.floor(min + (max - min) * percent)
        end
    
        library.flags[flag] = value
        if GuiSettings[flag] ~= nil then
            GuiSettings[flag] = value
        end
        box.Text = tostring(value)
    
        utils:Tween(bar.SliderFill, {0.05, 'Linear', 'InOut'}, {Size = UDim2.new(percent, 0, 1, 0)})
    
        self.funcstorage[flag](tonumber(value))
        return tonumber(value)
    end
    
    function library:UpdateToggle(flag, value)
        if not library.objstorage[flag] then return end
        local oldval = library.flags[flag]
        local obj = library.objstorage[flag]
        local func = library.funcstorage[flag]
        if oldval == value then return end
        if not value then value = not oldval end
        library.flags[flag] = value
        if GuiSettings[flag] ~= nil then GuiSettings[flag] = value end
        local fill = obj.ToggleDisplay.ToggleSwitch
        local toggleoff = UDim2.new(0, 3, 0.5, 0) 
        local toggleon = UDim2.new(0, 16, 0.5, 0)
	local toggleval = value and toggleon or toggleoff
        utils:Tween(fill, {0.15, 'Sine', 'InOut'}, {Position = toggleval, BackgroundColor3 = value and theme[3] or theme[1]}) 
        spawn(function()
            func(value)
        end)
    end
    
    function library:CreateUI(propTbl)
        local propTbl = propTbl or {}
        local projectName = propTbl.ProjectName or 'UILibrary'
        local uiTitle = propTbl.UiText or 'UI Library'
        self.ProjectName = projectName
    
        local CynicalLite = Instance.new("ScreenGui")
        local Drag = Instance.new("Frame")
        local DragC = Instance.new("UICorner")
        local DragHold = Instance.new("Frame")
        local Main = Instance.new("Frame")
        local MainC = Instance.new("UICorner")
        local SideBar = Instance.new("Frame")
        local SideBarC = Instance.new("UICorner")
        local Title = Instance.new("TextLabel")
        local TBtns = Instance.new("ScrollingFrame")
        local TBtnsL = Instance.new("UIListLayout")
        local TBtnsP = Instance.new("UIPadding")
        local TabHolder = Instance.new("Frame")
        local TabHolderC = Instance.new("UICorner")
        local Notifications = Instance.new("Frame")
        local NotificationsL = Instance.new("UIListLayout")
        
        library.UiParent = (function()
            if gethui then
                return gethui()
            end
            if get_hidden_gui then
                return get_hidden_gui()
            end
            if syn and syn.protect_gui then
                syn.protect_gui(CynicalLite)
            end
            return services.CoreGui
        end)()
    
        CynicalLite.Name = self.ProjectName
        CynicalLite.Parent = library.UiParent
        CynicalLite.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        library.ui = CynicalLite    
        Drag.Name = "Drag"
        Drag.Parent = CynicalLite
        Drag.BackgroundColor3 = theme[1]
        Drag.BorderSizePixel = 0
        Drag.Position = UDim2.new(0.235238984, 0, 0.119544595, 0)
        Drag.Size = UDim2.new(0, 564, 0, 400)
    
        DragHold.Name = "DragHold"
        DragHold.Parent = Drag
        DragHold.BackgroundTransparency = 1
        DragHold.ZIndex = 69
        DragHold.Position = UDim2.new(0, 0, 0, 0)
        DragHold.Size = UDim2.new(1, 0, 0, 30)
        DragHold.BorderSizePixel = 0
    
        utils:MakeDraggable(Drag, DragHold)
    
        Notifications.Name = "Notifications"
        Notifications.Parent = Drag
        Notifications.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Notifications.BackgroundTransparency = 1.000
        Notifications.BorderSizePixel = 0
        Notifications.Position = UDim2.new(1.02304959, 0, 0, 0)
        Notifications.Size = UDim2.new(0, 207, 0, 400)    
        
        NotificationsL.Name = 'lol'
        NotificationsL.Parent = Notifications
        NotificationsL.HorizontalAlignment = Enum.HorizontalAlignment.Left
        NotificationsL.SortOrder = Enum.SortOrder.LayoutOrder
        NotificationsL.Padding = UDim.new(0, 4)
        
        DragC.Name = "DragC"
        DragC.Parent = Drag
        
        Main.Name = "Main"
        Main.Parent = Drag
        Main.BackgroundColor3 = theme[2]
        Main.BorderSizePixel = 0
        Main.Position = UDim2.new(0.011406865, 0, 0.0149999997, 0)
        Main.Size = UDim2.new(0, 551, 0, 390)
        
        MainC.Name = "MainC"
        MainC.Parent = Main
        
        SideBar.Name = "SideBar"
        SideBar.Parent = Main
        SideBar.BackgroundColor3 = theme[1]
        SideBar.BorderSizePixel = 0
        SideBar.Position = UDim2.new(0.0108892918, 0, 0.0154639175, 0)
        SideBar.Size = UDim2.new(0, 126, 0, 376)
        
        SideBarC.Name = "SideBarC"
        SideBarC.Parent = SideBar
        
        Title.Name = "Title"
        Title.Parent = SideBar
        Title.BackgroundColor3 = theme[4]
        Title.BackgroundTransparency = 1.000
        Title.Size = UDim2.new(0, 126, 0, 32)
        Title.Font = Enum.Font.GothamBold
        Title.Text = uiTitle
        Title.TextColor3 = theme[4]
        Title.TextSize = 16.000
        
        TBtns.Name = "TBtns"
        TBtns.Parent = SideBar
        TBtns.Active = true
        TBtns.BackgroundColor3 = theme[4]
        TBtns.BackgroundTransparency = 1.000
        TBtns.Position = UDim2.new(0, 0, 0.0851063803, 0)
        TBtns.Size = UDim2.new(0, 126, 0, 344)
        TBtns.ScrollBarThickness = 0
        
        TBtnsL.Name = "TBtnsL"
        TBtnsL.Parent = TBtns
        TBtnsL.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TBtnsL.SortOrder = Enum.SortOrder.LayoutOrder
        
        TBtnsP.Name = "TBtnsP"
        TBtnsP.Parent = TBtns
        TBtnsP.PaddingTop = UDim.new(0, 4)
            
        TabHolder.Name = "TabHolder"
        TabHolder.Parent = Main
        TabHolder.BackgroundColor3 = theme[1]
        TabHolder.BorderSizePixel = 0
        TabHolder.Position = UDim2.new(0.246823952, 0, 0.0154639175, 0)
        TabHolder.Size = UDim2.new(0, 409, 0, 376)
        
        TabHolderC.Name = "TabHolderC"
        TabHolderC.Parent = TabHolder   
    
        TBtnsL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            TBtns.CanvasSize = UDim2.new(0, 0, 0, TBtnsL.AbsoluteContentSize.Y + 4)
        end)
        
        local Modules = {};
    
        function library:CreateNotification(Title, Description, Duration, CanClose)
            local Title = Title or 'Hello, World!'
            local Description = Description or 'Hello, World!'
            local CanClose = CanClose or false
    
            local Notification = Instance.new("Frame")
            local NotificationC = Instance.new("UICorner")
            local NotificationTitle = Instance.new("TextLabel")
            local NotificationText = Instance.new("TextLabel")
            local NotiHolder = Instance.new("Frame")
            local NotiHolderL = Instance.new("UIListLayout")
            local Close = Instance.new("TextButton")
            
            Notification.Name = "Notification"
            Notification.Parent = Notifications
            Notification.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
            Notification.BorderSizePixel = 0
            Notification.ClipsDescendants = true
            Notification.Size = UDim2.new(0, 140, 0, 0)
            
            NotificationC.CornerRadius = UDim.new(0, 4)
            NotificationC.Name = "NotificationC"
            NotificationC.Parent = Notification
            
            NotificationTitle.Name = "NotificationTitle"
            NotificationTitle.Parent = Notification
            NotificationTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            NotificationTitle.BackgroundTransparency = 1.000
            NotificationTitle.BorderSizePixel = 0
            NotificationTitle.Size = UDim2.new(0, 235, 0, 26)
            NotificationTitle.Font = Enum.Font.GothamBold
            NotificationTitle.Text = "  " .. Title
            NotificationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            NotificationTitle.TextSize = 14.000
            NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            NotificationText.Name = "NotificationText"
            NotificationText.Parent = Notification
            NotificationText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            NotificationText.BackgroundTransparency = 1.000
            NotificationText.BorderSizePixel = 0
            NotificationText.Position = UDim2.new(0, 0, 0.519841313, 0)
            NotificationText.Size = UDim2.new(0, 253, 0, 22)
            NotificationText.Font = Enum.Font.Gotham
            NotificationText.Text = "  " .. Description
            NotificationText.TextColor3 = Color3.fromRGB(255, 255, 255)
            NotificationText.TextSize = 14.000
            NotificationText.TextXAlignment = Enum.TextXAlignment.Left
            
            NotificationText.Size = UDim2.new(0, NotificationText.TextBounds.X, 0, 22)
            local newX
            if NotificationText.TextBounds.X > 100 then
                newX = NotificationText.TextBounds.X + 40
                Notification.Size = UDim2.new(0, newX, 0, 0)
            end
    
            NotiHolder.Name = "NotiHolder"
            NotiHolder.Parent = Notification
            NotiHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            NotiHolder.BackgroundTransparency = 1.000
            NotiHolder.BorderSizePixel = 0
            NotiHolder.Size = UDim2.new(1, 0, 1, 0)
            
            NotiHolderL.Name = "NotiHolderL"
            NotiHolderL.Parent = NotiHolder
            NotiHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
            NotiHolderL.SortOrder = Enum.SortOrder.LayoutOrder
            NotiHolderL.Padding = UDim.new(0, 4)
            local closed = false
            local function closeNotification()
                if closed then return end
                utils:Tween(Notification, {0.2, 'Sine', 'InOut'}, {
                    Size = UDim2.new(0, NotificationText.Size.X, 0, 56)
                })
                wait(.22)
                Notification:Destroy()
            end
            if CanClose then
                Close.Name = "Close"
                Close.Parent = NotiHolder
                Close.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Close.BackgroundTransparency = 1.000
                Close.Position = UDim2.new(0.90216887, 0, 0, 0)
                Close.Size = UDim2.new(0, 26, 0, 26)
                Close.Font = Enum.Font.GothamBold
                Close.Text = "X"
                Close.TextColor3 = Color3.fromRGB(255, 255, 255)
                Close.TextSize = 14.000     
                Close.MouseButton1Click:Connect(closeNotification)   
            end
            utils:Tween(Notification, {0.2, 'Sine', 'InOut'}, {
                Size = UDim2.new(0, newX, 0, 56)
            })
            wait(Duration)
            closeNotification()
        end
    
        function Modules:CreateCategory(TabName)
            local TabName = TabName or "Tab"
    
            local Tab = Instance.new("ScrollingFrame")
            local TabL = Instance.new("UIListLayout")
            local TabP = Instance.new("UIPadding")        
            local TabOpenBtn = Instance.new("TextButton")
            --local TabOpenBtnDetail = Instance.new("Frame")   
            
            TabOpenBtn.Name = "TabOpenBtn"
            TabOpenBtn.Parent = TBtns
            TabOpenBtn.BackgroundColor3 = theme[1]
            TabOpenBtn.BorderColor3 = theme[6]
            TabOpenBtn.Position = UDim2.new(-0.209677413, 0, 0.0116279069, 0)
            TabOpenBtn.Size = UDim2.new(0, 176, 0, 30)
            TabOpenBtn.AutoButtonColor = false
            TabOpenBtn.Font = Enum.Font.Gotham
            TabOpenBtn.Text = TabName
            TabOpenBtn.TextColor3 = theme[4]
            TabOpenBtn.TextSize = 14.000
            TabOpenBtn.BorderMode = Enum.BorderMode.Inset
            
            --TabOpenBtnDetail.Name = "TabOpenBtnDetail"
            --TabOpenBtnDetail.Parent = TabOpenBtn
            --TabOpenBtnDetail.BackgroundColor3 = theme[1]
            --TabOpenBtnDetail.BorderColor3 = theme[1]
            --TabOpenBtnDetail.Position = UDim2.new(0.147727266, 0, 0.933333337, 0)
            --TabOpenBtnDetail.Size = UDim2.new(0, 124, 0, 2)  
            
            Tab.Name = "Tab"
            Tab.Parent = TabHolder
            Tab.BackgroundColor3 = theme[4]
            Tab.BackgroundTransparency = 1.000
            Tab.Size = UDim2.new(0, 409, 0, 376)
            Tab.ScrollBarThickness = 0
            Tab.Visible = false
            
            TabL.Name = "TabL"
            TabL.Parent = Tab
            TabL.HorizontalAlignment = Enum.HorizontalAlignment.Center
            TabL.SortOrder = Enum.SortOrder.LayoutOrder
            TabL.Padding = UDim.new(0, 4)
            
            TabP.Name = "TabP"
            TabP.Parent = Tab
            TabP.PaddingTop = UDim.new(0, 4)        
    
            if not library.tabinfo.button then
                library.tabinfo = {button = TabOpenBtn, tab = Tab}
                TabOpenBtn.BorderColor3 = theme[3]
                Tab.Visible = true
            end
    
            TabOpenBtn.MouseButton1Click:Connect(function()
                utils:Ripple(TabOpenBtn)
                utils:ChangeTab({TabOpenBtn, Tab})
            end)
    
            TabL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8)
            end)
    
            local secs = {};
    
            function secs:CreateSection(SecName)
                local SecName = SecName or 'Section'
    
                local Section = Instance.new("Frame")
                local SectionC = Instance.new("UICorner")
                local SectionText = Instance.new("TextLabel")
                local SectionL = Instance.new("UIListLayout")
    
                Section.Name = "Section"
                Section.Parent = Tab
                Section.BackgroundColor3 = theme[2]
                Section.BorderSizePixel = 0
                Section.Position = UDim2.new(0.0110024447, 0, -0.787234068, 0)
                Section.Size = UDim2.new(0, 400, 0, 534)
                
                SectionC.Name = "SectionC"
                SectionC.Parent = Section
                
                SectionText.Name = "SectionText"
                SectionText.Parent = Section
                SectionText.BackgroundColor3 = theme[4]
                SectionText.BackgroundTransparency = 1.000
                SectionText.Position = UDim2.new(-0.230000004, 0, 0, 0)
                SectionText.Size = UDim2.new(1, 0, 0, 32)
                SectionText.Font = Enum.Font.GothamBold
                SectionText.Text = "  " .. SecName
                SectionText.TextColor3 = theme[4]
                SectionText.TextSize = 16.000
                SectionText.TextXAlignment = Enum.TextXAlignment.Left
                
                SectionL.Name = "SectionL"
                SectionL.Parent = Section
                SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
                SectionL.SortOrder = Enum.SortOrder.LayoutOrder
                SectionL.Padding = UDim.new(0, 4)            
                
                SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    Section.Size = UDim2.new(0, 400, 0, SectionL.AbsoluteContentSize.Y + 8)
                end)
    
                local Modules = {};
    
                function Modules:Create(Object, Text, Callback, Options)
                    local Text = Text or 'Text'
                    local Options = Options or {}
                    local Callback = Callback or function() end
    
                    if Object:lower() == 'button' then
                        local ButtonMain = Instance.new("Frame")
                        local ButtonMainC = Instance.new("UICorner")
                        local ButtonText = Instance.new("TextLabel")
                        local BtnHolder = Instance.new("Frame")
                        local BtnHolderL = Instance.new("UIListLayout")
                        local Btn = Instance.new("TextButton")
                        local BtnC = Instance.new("UICorner")
                        local BtnInfo = Instance.new("TextButton")
                        local BtnInfoC = Instance.new("UICorner")
    
                        ButtonMain.Name = "ButtonMain"
                        ButtonMain.Parent = Section
                        ButtonMain.BackgroundColor3 = theme[1]
                        ButtonMain.BorderSizePixel = 0
                        ButtonMain.Position = UDim2.new(0.00875000004, 0, 0.189473689, 0)
                        ButtonMain.Size = UDim2.new(0, 393, 0, 36)
                        
                        ButtonMainC.CornerRadius = UDim.new(0, 4)
                        ButtonMainC.Name = "ButtonMainC"
                        ButtonMainC.Parent = ButtonMain
                        
                        ButtonText.Name = "ButtonText"
                        ButtonText.Parent = ButtonMain
                        ButtonText.BackgroundColor3 = theme[4]
                        ButtonText.BackgroundTransparency = 1.000
                        ButtonText.Position = UDim2.new(0, 0, 2.11927627e-07, 0)
                        ButtonText.Size = UDim2.new(0.335000008, 0, 1, 0)
                        ButtonText.Font = Enum.Font.Gotham
                        ButtonText.Text = "   " .. Text
                        ButtonText.TextColor3 = theme[4]
                        ButtonText.TextSize = 14.000
                        ButtonText.TextXAlignment = Enum.TextXAlignment.Left
                        
                        BtnHolder.Name = "BtnHolder"
                        BtnHolder.Parent = ButtonMain
                        BtnHolder.BackgroundColor3 = theme[4]
                        BtnHolder.BackgroundTransparency = 1.000
                        BtnHolder.BorderSizePixel = 0
                        BtnHolder.Position = UDim2.new(0.735000014, 0, 0, 0)
                        BtnHolder.Size = UDim2.new(0, 100, 0, 36)
                        
                        BtnHolderL.Name = "BtnHolderL"
                        BtnHolderL.Parent = BtnHolder
                        BtnHolderL.FillDirection = Enum.FillDirection.Horizontal
                        BtnHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                        BtnHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                        BtnHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                        BtnHolderL.Padding = UDim.new(0, 4)
                        
                        Btn.Name = "Btn"
                        Btn.Parent = BtnHolder
                        Btn.BackgroundColor3 = theme[2]
                        Btn.BorderSizePixel = 0
                        Btn.Position = UDim2.new(0.735000014, 0, 0.111000001, 0)
                        Btn.Size = UDim2.new(0, 100, 0, 28)
                        Btn.AutoButtonColor = false
                        Btn.Font = Enum.Font.Gotham
                        Btn.Text = Options.BtnText or 'Click Here!'
                        Btn.TextColor3 = theme[4]
                        Btn.TextSize = 14.000
                        
                        BtnC.CornerRadius = UDim.new(0, 4)
                        BtnC.Name = "BtnC"
                        BtnC.Parent = Btn
                        
                        BtnInfo.Name = "BtnInfo"
                        BtnInfo.Parent = BtnHolder
                        BtnInfo.BackgroundColor3 = theme[2]
                        BtnInfo.BorderSizePixel = 0
                        BtnInfo.Position = UDim2.new(0.720000029, 0, 0.111111112, 0)
                        BtnInfo.Size = UDim2.new(0, 28, 0, 28)
                        BtnInfo.AutoButtonColor = false
                        BtnInfo.Font = Enum.Font.Gotham
                        BtnInfo.Text = "?"
                        BtnInfo.TextColor3 = theme[4]
                        BtnInfo.TextSize = 20.000
                        
                        BtnInfoC.CornerRadius = UDim.new(0, 4)
                        BtnInfoC.Name = "BtnInfoC"
                        BtnInfoC.Parent = BtnInfo                    
                        Btn.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(Btn)
                            end)
                            Callback()
                        end)
    
    
                        local desc = Options.Description or 'No info for this function found!';
                        BtnInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(BtnInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return ButtonMain
                    end
                    if Object:lower() == 'toggle' then
                        local ToggleMain = Instance.new("Frame")
                        local ToggleMainC = Instance.new("UICorner")
                        local ToggleText = Instance.new("TextLabel")
                        local ToggleDisplay = Instance.new("Frame")
                        local ToggleDisplayC = Instance.new("UICorner")
                        local ToggleSwitch = Instance.new("TextButton")
                        local ToggleSwitchC = Instance.new("UICorner")
                        local ToggleInfo = Instance.new("TextButton")
                        local ToggleInfoC = Instance.new("UICorner")   
                        
                        library.flags[Options.Flag] = GuiSettings[Options.Flag] or Options.Default or false
                        library.objstorage[Options.Flag] = ToggleMain
                        library.funcstorage[Options.Flag] = Callback
                        
                        ToggleMain.Name = "ToggleMain"
                        ToggleMain.Parent = Section
                        ToggleMain.BackgroundColor3 = theme[1]
                        ToggleMain.BorderSizePixel = 0
                        ToggleMain.Position = UDim2.new(0.00875000004, 0, 0.189473689, 0)
                        ToggleMain.Size = UDim2.new(0, 393, 0, 36)
                        
                        ToggleMainC.CornerRadius = UDim.new(0, 4)
                        ToggleMainC.Name = "ToggleMainC"
                        ToggleMainC.Parent = ToggleMain
                        
                        ToggleText.Name = "ToggleText"
                        ToggleText.Parent = ToggleMain
                        ToggleText.BackgroundColor3 = theme[4]
                        ToggleText.BackgroundTransparency = 1.000
                        ToggleText.Size = UDim2.new(0.335000008, 0, 1, 0)
                        ToggleText.Font = Enum.Font.Gotham
                        ToggleText.Text = "   " .. Text
                        ToggleText.TextColor3 = theme[4]
                        ToggleText.TextSize = 14.000
                        ToggleText.TextXAlignment = Enum.TextXAlignment.Left
                        
                        ToggleDisplay.Name = "ToggleDisplay"
                        ToggleDisplay.Parent = ToggleMain
                        ToggleDisplay.BackgroundColor3 = theme[2]
                        ToggleDisplay.BorderSizePixel = 0
                        ToggleDisplay.Position = UDim2.new(0.78371501, 0, 0.111111112, 0)
                        ToggleDisplay.Size = UDim2.new(0, 48, 0, 28)
                        
                        ToggleDisplayC.CornerRadius = UDim.new(0, 4)
                        ToggleDisplayC.Name = "ToggleDisplayC"
                        ToggleDisplayC.Parent = ToggleDisplay
                        
                        ToggleSwitch.Name = "ToggleSwitch"
                        ToggleSwitch.Parent = ToggleDisplay
                        ToggleSwitch.AnchorPoint = Vector2.new(0, 0.5)
                        ToggleSwitch.BackgroundColor3 = theme[1]
                        ToggleSwitch.BorderSizePixel = 0
                        ToggleSwitch.Position = library.flags[Options.Flag] and UDim2.new(0, 16, 0.5, 0) or UDim2.new(0, 3, 0.5, 0)
                        ToggleSwitch.Size = UDim2.new(0, 28, 0, 22)
                        ToggleSwitch.AutoButtonColor = false
                        ToggleSwitch.Text = ''
    
                        ToggleSwitchC.CornerRadius = UDim.new(0, 4)
                        ToggleSwitchC.Name = "ToggleSwitchC"
                        ToggleSwitchC.Parent = ToggleSwitch
                        
                        ToggleInfo.Name = "ToggleInfo"
                        ToggleInfo.Parent = ToggleMain
                        ToggleInfo.BackgroundColor3 = theme[2]
                        ToggleInfo.BorderSizePixel = 0
                        ToggleInfo.Position = UDim2.new(0.918206036, 0, 0.111111112, 0)
                        ToggleInfo.Size = UDim2.new(0, 28, 0, 28)
                        ToggleInfo.AutoButtonColor = false
                        ToggleInfo.Font = Enum.Font.Gotham
                        ToggleInfo.Text = "?"
                        ToggleInfo.TextColor3 = theme[4]
                        ToggleInfo.TextSize = 20.000
                        ToggleInfo.TextWrapped = true
                        
                        ToggleInfoC.CornerRadius = UDim.new(0, 4)
                        ToggleInfoC.Name = "ToggleInfoC"
                        ToggleInfoC.Parent = ToggleInfo     
    
                        if library.flags[Options.Flag] == true then
                            Callback()
                        end
    
                        ToggleSwitch.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(ToggleSwitch)
                            end)
                            library:UpdateToggle(Options.Flag)
                        end)
                        
                        local desc = Options.Description or 'No info for this function found!';
                            ToggleInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(ToggleInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return ToggleMain
                    end
                    if Object:lower() == 'label' then
                        local Label = Instance.new("TextLabel")
                        Label.Name = "Label"
                        Label.Parent = Section
                        Label.BackgroundColor3 = theme[4]
                        Label.BackgroundTransparency = 1.000
                        Label.Position = UDim2.new(0.33255738, 0, 0.754098356, 0)
                        Label.Size = UDim2.new(1, 0, 0, 32)
                        Label.Font = Enum.Font.Gotham
                        Label.Text = "    " .. Text
                        Label.TextColor3 = theme[4]
                        Label.TextSize = 14.000
                        Label.TextXAlignment = Enum.TextXAlignment.Left                    
                        return Label
                    end
                    if Object:lower() == 'textbox' then
                        local TextboxMain = Instance.new("Frame")
                        local TextboxText = Instance.new("TextLabel")
                        local BoxHolderMain = Instance.new("Frame")
                        local BoxHolderMainL = Instance.new("UIListLayout")
                        local TextBox = Instance.new("TextBox")
                        local TextboxC = Instance.new("UICorner")
                        local BoxInfo = Instance.new("TextButton")
                        local BoxInfoC = Instance.new("UICorner")
                        local TextboxMainC = Instance.new("UICorner")   
    
                        library.flags[Options.Flag] = GuiSettings[Options.Flag] or Options.Default or 'Text'
    
                        TextboxMain.Name = "TextboxMain"
                        TextboxMain.Parent = Section
                        TextboxMain.BackgroundColor3 = theme[1]
                        TextboxMain.BorderSizePixel = 0
                        TextboxMain.Position = UDim2.new(0.00875000004, 0, 0.189473689, 0)
                        TextboxMain.Size = UDim2.new(0, 393, 0, 36)
                        
                        TextboxText.Name = "TextboxText"
                        TextboxText.Parent = TextboxMain
                        TextboxText.BackgroundColor3 = theme[4]
                        TextboxText.BackgroundTransparency = 1.000
                        TextboxText.Position = UDim2.new(0, 0, 2.11927627e-07, 0)
                        TextboxText.Size = UDim2.new(0.335000008, 0, 1, 0)
                        TextboxText.Font = Enum.Font.Gotham
                        TextboxText.Text = "   " .. Text
                        TextboxText.TextColor3 = theme[4]
                        TextboxText.TextSize = 14.000
                        TextboxText.TextXAlignment = Enum.TextXAlignment.Left
                        
                        BoxHolderMain.Name = "BoxHolderMain"
                        BoxHolderMain.Parent = TextboxMain
                        BoxHolderMain.BackgroundColor3 = theme[4]
                        BoxHolderMain.BackgroundTransparency = 1.000
                        BoxHolderMain.BorderSizePixel = 0
                        BoxHolderMain.Position = UDim2.new(0.735000014, 0, 0, 0)
                        BoxHolderMain.Size = UDim2.new(0, 100, 0, 36)
                        
                        BoxHolderMainL.Name = "BoxHolderMainL"
                        BoxHolderMainL.Parent = BoxHolderMain
                        BoxHolderMainL.FillDirection = Enum.FillDirection.Horizontal
                        BoxHolderMainL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                        BoxHolderMainL.SortOrder = Enum.SortOrder.LayoutOrder
                        BoxHolderMainL.VerticalAlignment = Enum.VerticalAlignment.Center
                        BoxHolderMainL.Padding = UDim.new(0, 4)
                        
                        TextBox.Parent = BoxHolderMain
                        TextBox.BackgroundColor3 = theme[2]
                        TextBox.BorderSizePixel = 0
                        TextBox.Position = UDim2.new(0, 0, 0.111111112, 0)
                        TextBox.Size = UDim2.new(0, 100, 0, 28)
                        TextBox.Font = Enum.Font.Gotham
                        TextBox.Text = library.flags[Options.Flag]
                        TextBox.TextColor3 = theme[4]
                        TextBox.TextSize = 14.000
    
                        TextBox.Size = UDim2.new(0, TextBox.TextBounds.X + 18, 0, 26)
                        
                        TextboxC.CornerRadius = UDim.new(0, 4)
                        TextboxC.Name = "TextboxC"
                        TextboxC.Parent = TextBox
                        
                        BoxInfo.Name = "BoxInfo"
                        BoxInfo.Parent = BoxHolderMain
                        BoxInfo.BackgroundColor3 = theme[2]
                        BoxInfo.BorderSizePixel = 0
                        BoxInfo.Position = UDim2.new(0.918206036, 0, 0.111111112, 0)
                        BoxInfo.Size = UDim2.new(0, 28, 0, 28)
                        BoxInfo.AutoButtonColor = false
                        BoxInfo.Font = Enum.Font.Gotham
                        BoxInfo.Text = "?"
                        BoxInfo.TextColor3 = theme[4]
                        BoxInfo.TextSize = 20.000
                        BoxInfo.TextWrapped = true
                        
                        BoxInfoC.CornerRadius = UDim.new(0, 4)
                        BoxInfoC.Name = "BoxInfoC"
                        BoxInfoC.Parent = BoxInfo    
    
                        TextboxMainC.CornerRadius = UDim.new(0, 4)
                        TextboxMainC.Name = "TextboxMainC"
                        TextboxMainC.Parent = TextboxMain                    
                        
                        TextBox.FocusLost:Connect(function()
                            if TextBox.Text == "" then
                                TextBox.Text = library.flags[Options.Flag]
                            end
                            library.flags[Options.Flag] = TextBox.Text
                            if GuiSettings[Options.Flag] ~= nil then
                                GuiSettings[Options.Flag] = TextBox.Text
                            end
                            Callback(TextBox.Text)
                        end)

                        utils:Tween(TextBox, {0.1, 'Linear', 'InOut'}, {
                            Size = UDim2.new(0, TextBox.TextBounds.X + 18, 0, 26)
                        })

                        TextBox:GetPropertyChangedSignal('TextBounds'):Connect(function()
                            utils:Tween(TextBox, {0.1, 'Linear', 'InOut'}, {
                                Size = UDim2.new(0, TextBox.TextBounds.X + 18, 0, 26)
                            })
                        end)

                        local desc = Options.Description or 'No info for this function found!';
                        BoxInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(BoxInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return TextboxMain
                    end
                    if Object:lower() == 'keybind' then 
                        local callback = Callback or function() end
                        local flag = Options.Flag
                        local default = Options.Default
                        if not flag then return end
                        local banned = {
                            Return = true;
                            Space = true;
                            Tab = true;
                            Unknown = true;
                        }
                        local shortNames = {
                            RightControl = 'RightControl',
                            LeftControl = 'LeftControl',
                            LeftShift = 'LeftShift',
                            RightShift = 'RightShift',
                            Semicolon = ";",
                            Quote = '"',
                            LeftBracket = '[',
                            RightBracket = ']',
                            Equals = '=',
                            Minus = '-',
                            RightAlt = 'RightAlt',
                            LeftAlt = 'LeftAlt',
                            End = 'End',
                            Home = 'Home',
                            PageDown = 'PageDown',
                            PageUp = 'PageUp'
                        }
                        local allowed = {
                            MouseButton1 = false,
                            MouseButton2 = false
                        }
                        local nm = (default and (shortNames[default.Name] or default.Name) or "None")
                        library.flags[flag] = default or "None"        
                        local KeybindMain = Instance.new("Frame")
                        local KeybindMainC = Instance.new("UICorner")
                        local KeybindText = Instance.new("TextLabel")
                        local BindHolder = Instance.new("Frame")
                        local BindHolderL = Instance.new("UIListLayout")
                        local KeybindValue = Instance.new("TextButton")
                        local KeybindValueC = Instance.new("UICorner")
                        local BindInfo = Instance.new("TextButton")
                        local BindInfoC = Instance.new("UICorner")
    
                        KeybindMain.Name = "KeybindMain"
                        KeybindMain.Parent = Section
                        KeybindMain.BackgroundColor3 = theme[1]
                        KeybindMain.BorderSizePixel = 0
                        KeybindMain.Position = UDim2.new(0.00875000004, 0, 0.189473689, 0)
                        KeybindMain.Size = UDim2.new(0, 393, 0, 36)
                        
                        KeybindMainC.CornerRadius = UDim.new(0, 4)
                        KeybindMainC.Name = "KeybindMainC"
                        KeybindMainC.Parent = KeybindMain
                        
                        KeybindText.Name = "KeybindText"
                        KeybindText.Parent = KeybindMain
                        KeybindText.BackgroundColor3 = theme[4]
                        KeybindText.BackgroundTransparency = 1.000
                        KeybindText.Position = UDim2.new(0, 0, 2.11927627e-07, 0)
                        KeybindText.Size = UDim2.new(0.335000008, 0, 1, 0)
                        KeybindText.Font = Enum.Font.Gotham
                        KeybindText.Text = "   " .. Text
                        KeybindText.TextColor3 = theme[4]
                        KeybindText.TextSize = 14.000
                        KeybindText.TextXAlignment = Enum.TextXAlignment.Left
                        
                        BindHolder.Name = "BindHolder"
                        BindHolder.Parent = KeybindMain
                        BindHolder.BackgroundColor3 = theme[4]
                        BindHolder.BackgroundTransparency = 1.000
                        BindHolder.BorderSizePixel = 0
                        BindHolder.Position = UDim2.new(0.735000014, 0, 0, 0)
                        BindHolder.Size = UDim2.new(0, 100, 0, 36)
                        
                        BindHolderL.Name = "BindHolderL"
                        BindHolderL.Parent = BindHolder
                        BindHolderL.FillDirection = Enum.FillDirection.Horizontal
                        BindHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                        BindHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                        BindHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                        BindHolderL.Padding = UDim.new(0, 4)
                        
                        KeybindValue.Name = "KeybindValue"
                        KeybindValue.Parent = BindHolder
                        KeybindValue.BackgroundColor3 = theme[2]
                        KeybindValue.BorderSizePixel = 0
                        KeybindValue.Position = UDim2.new(0.735000014, 0, 0.111000001, 0)
                        KeybindValue.Size = UDim2.new(0, 100, 0, 28)
                        KeybindValue.AutoButtonColor = false
                        KeybindValue.Font = Enum.Font.Gotham
                        KeybindValue.Text = nm
                        KeybindValue.TextColor3 = theme[4]
                        KeybindValue.TextSize = 14.000
                        
                        KeybindValueC.CornerRadius = UDim.new(0, 4)
                        KeybindValueC.Name = "KeybindValueC"
                        KeybindValueC.Parent = KeybindValue
                        
                        BindInfo.Name = "BindInfo"
                        BindInfo.Parent = BindHolder
                        BindInfo.BackgroundColor3 = theme[2]
                        BindInfo.BorderSizePixel = 0
                        BindInfo.Position = UDim2.new(0.918206036, 0, 0.111111112, 0)
                        BindInfo.Size = UDim2.new(0, 28, 0, 28)
                        BindInfo.AutoButtonColor = false
                        BindInfo.Font = Enum.Font.Gotham
                        BindInfo.Text = "?"
                        BindInfo.TextColor3 = theme[4]
                        BindInfo.TextSize = 20.000
                        BindInfo.TextWrapped = true
                        
                        BindInfoC.CornerRadius = UDim.new(0, 4)
                        BindInfoC.Name = "BindInfoC"
                        BindInfoC.Parent = BindInfo                    
    
                        spawn(function()
                            wait()
                            KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 18, 0, 28)
                        end)
                        
                        KeybindValue:GetPropertyChangedSignal('TextBounds'):Connect(function()
                            utils:Tween(KeybindValue, {0.1, 'Linear', 'InOut'}, {
                                Size = UDim2.new(0, KeybindValue.TextBounds.X + 18, 0, 28)
                            })
                        end)
                        
                        KeybindValue.MouseButton1Click:Connect(function()
                            library.binding = true
                            KeybindValue.Text = "..."
                            local a, b = services.UserInputService.InputBegan:wait()
                            local name = tostring(a.KeyCode.Name)
                            local typeName = tostring(a.UserInputType.Name)
                            if (a.UserInputType ~= Enum.UserInputType.Keyboard and (allowed[a.UserInputType.Name]) and (not data.KbOnly)) or (a.KeyCode and (not banned[a.KeyCode.Name])) then
                                local name = (a.UserInputType ~= Enum.UserInputType.Keyboard and a.UserInputType.Name or a.KeyCode.Name)
                                library.flags[flag] = (a)
                                KeybindValue.Text = shortNames[name] or name
                            else
                                if (library.flags[flag]) then
                                    if (not pcall(function()
                                            return library.flags[flag].UserInputType
                                        end)) then
                                        local name = tostring(library.flags[flag])
                                        KeybindValue.Text = shortNames[name] or name
                                    else
                                        local name = (library.flags[flag].UserInputType ~= Enum.UserInputType.Keyboard and library.flags[flag].UserInputType.Name or library.flags[flag].KeyCode.Name)
                                        KeybindValue.Text = shortNames[name] or name
                                    end
                                end
                            end
                            wait(0.1)  
                            library.binding = false
                            if GuiSettings[flag] ~= nil then GuiSettings[flag] = KeybindValue.Text end
                        end)
                        if library.flags[flag] then
                            KeybindValue.Text = shortNames[tostring(library.flags[flag].Name)] or tostring(library.flags[flag].Name)
                        end
                        library.binds[flag] = {
                            location = library.flags,
                            callback = function()
                                callback()	
                            end
                        }        
                        
                        local desc = Options.Description or 'No info for this function found!';
                        BindInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(BindInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return KeybindMain
                    end
                    if Object:lower() == 'slider' then
                        local min = Options.Min or 1
                        local flag = Options.Flag
                        local max = Options.Max or 10
                        local default = Options.Default or min
                        local precise = Options.Precise or false
    
                        local SliderMain = Instance.new("Frame")
                        local SliderMainC = Instance.new("UICorner")
                        local SliderText = Instance.new("TextLabel")
                        local SliderHolder = Instance.new("Frame")
                        local SliderHolderL = Instance.new("UIListLayout")
                        local SliderVal = Instance.new("TextBox")
                        local SliderValC = Instance.new("UICorner")
                        local SliderInfo = Instance.new("TextButton")
                        local SliderInfoC = Instance.new("UICorner")
                        local SliderBar = Instance.new("Frame")
                        local SliderBarC = Instance.new("UICorner")
                        local SliderFill = Instance.new("Frame")
                        local SliderFillC = Instance.new("UICorner")
    
                        library.flags[flag] = default
            
                        library.objstorage[flag] = SliderMain
                        library.funcstorage[flag] = Callback        
    
                        SliderMain.Name = "SliderMain"
                        SliderMain.Parent = Section
                        SliderMain.BackgroundColor3 = theme[1]
                        SliderMain.BorderSizePixel = 0
                        SliderMain.Position = UDim2.new(0.00875000004, 0, 0.633879781, 0)
                        SliderMain.Size = UDim2.new(0, 393, 0, 50)
                        
                        SliderMainC.CornerRadius = UDim.new(0, 4)
                        SliderMainC.Name = "SliderMainC"
                        SliderMainC.Parent = SliderMain
                        
                        SliderText.Name = "SliderText"
                        SliderText.Parent = SliderMain
                        SliderText.BackgroundColor3 = theme[4]
                        SliderText.BackgroundTransparency = 1.000
                        SliderText.Position = UDim2.new(0, 0, 2.11927627e-07, 0)
                        SliderText.Size = UDim2.new(0.335000008, 0, 0, 36)
                        SliderText.Font = Enum.Font.Gotham
                        SliderText.Text = "   " .. Text
                        SliderText.TextColor3 = theme[4]
                        SliderText.TextSize = 14.000
                        SliderText.TextXAlignment = Enum.TextXAlignment.Left
                        
                        SliderHolder.Name = "SliderHolder"
                        SliderHolder.Parent = SliderMain
                        SliderHolder.BackgroundColor3 = theme[4]
                        SliderHolder.BackgroundTransparency = 1.000
                        SliderHolder.BorderSizePixel = 0
                        SliderHolder.Position = UDim2.new(0.735000014, 0, 0, 0)
                        SliderHolder.Size = UDim2.new(0, 100, 0, 36)
                        
                        SliderHolderL.Name = "SliderHolderL"
                        SliderHolderL.Parent = SliderHolder
                        SliderHolderL.FillDirection = Enum.FillDirection.Horizontal
                        SliderHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                        SliderHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                        SliderHolderL.VerticalAlignment = Enum.VerticalAlignment.Center
                        SliderHolderL.Padding = UDim.new(0, 4)
                        
                        SliderVal.Name = "SliderVal"
                        SliderVal.Parent = SliderHolder
                        SliderVal.BackgroundColor3 = theme[2]
                        SliderVal.BorderSizePixel = 0
                        SliderVal.Position = UDim2.new(0.511450171, 0, 0.111111112, 0)
                        SliderVal.Size = UDim2.new(0, 48, 0, 28)
                        SliderVal.Font = Enum.Font.Gotham
                        SliderVal.Text = default
                        SliderVal.TextColor3 = theme[4]
                        SliderVal.TextSize = 14.000
                        
                        SliderValC.CornerRadius = UDim.new(0, 4)
                        SliderValC.Name = "SliderValC"
                        SliderValC.Parent = SliderVal
                        
                        SliderInfo.Name = "SliderInfo"
                        SliderInfo.Parent = SliderHolder
                        SliderInfo.BackgroundColor3 = theme[2]
                        SliderInfo.BorderSizePixel = 0
                        SliderInfo.Position = UDim2.new(0.918206036, 0, 0.111111112, 0)
                        SliderInfo.Size = UDim2.new(0, 28, 0, 28)
                        SliderInfo.AutoButtonColor = false
                        SliderInfo.Font = Enum.Font.Gotham
                        SliderInfo.Text = "?"
                        SliderInfo.TextColor3 = theme[4]
                        SliderInfo.TextSize = 20.000
                        SliderInfo.TextWrapped = true
                        
                        SliderInfoC.CornerRadius = UDim.new(0, 4)
                        SliderInfoC.Name = "SliderInfoC"
                        SliderInfoC.Parent = SliderInfo
                        
                        SliderBar.Name = "SliderBar"
                        SliderBar.Parent = SliderMain
                        SliderBar.BackgroundColor3 = theme[2]
                        SliderBar.BorderSizePixel = 0
                        SliderBar.Position = UDim2.new(0.00800000038, 0, 0.720000029, 0)
                        SliderBar.Size = UDim2.new(0, 385, 0, 10)
                        
                        SliderBarC.CornerRadius = UDim.new(0, 4)
                        SliderBarC.Name = "SliderBarC"
                        SliderBarC.Parent = SliderBar
                        
                        SliderFill.Name = "SliderFill"
                        SliderFill.Parent = SliderBar
                        SliderFill.BackgroundColor3 = theme[3]
                        SliderFill.BorderSizePixel = 0
                        SliderFill.Size = UDim2.new(0, 86, 0, 10)
                        
                        SliderFillC.CornerRadius = UDim.new(0, 4)
                        SliderFillC.Name = "SliderFillC"
                        SliderFillC.Parent = SliderFill 
                        
                        SliderVal.Size = UDim2.new(0, SliderVal.TextBounds.X + 18, 0, 26)
    
                        SliderVal:GetPropertyChangedSignal('TextBounds'):Connect(function()
                            utils:Tween(SliderVal, {0.1, 'Linear', 'InOut'}, {
                                Size = UDim2.new(0, SliderVal.TextBounds.X + 18, 0, 26)
                            })
                        end)
            
                        library:UpdateSlider(flag, default, min, max, precise)
                        local dragging = false
            
                        SliderBar.InputBegan:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                library:UpdateSlider(flag, nil, min, max, precise)
                                dragging = true
                            end
                        end)
            
                        SliderBar.InputEnded:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                dragging = false
                            end
                        end)
            
                        services.UserInputService.InputChanged:Connect(function(input)
                            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                                library:UpdateSlider(flag, nil, min, max, precise)
                            end
                        end)
            
                        local boxFocused = false
                        local allowed = {
                            [""] = true,
                            ["-"] = true
                        }
            
                        SliderVal.Focused:Connect(function()
                            boxFocused = true
                        end)
            
                        SliderVal.FocusLost:Connect(function()
                            boxFocused = false
                            if not tonumber(SliderVal.Text) then
                                library:UpdateSlider(flag, default or min, min, max)
                            end
                        end)
            
                        SliderVal:GetPropertyChangedSignal('Text'):Connect(function()
                            if not boxFocused then return end
                            SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                            local text = SliderVal.Text
            
                            if not tonumber(text) then
                                SliderVal.Text = SliderVal.Text:gsub('%D+', '')
                            elseif not allowed[text] then
                                if tonumber(text) > max then
                                    text = max
                                    SliderVal.Text = tostring(max)
                                end
                                library:UpdateSlider(flag, tonumber(text) or value, min, max)
                            end
                        end)        
                        local desc = Options.Description or 'No info for this function found!';
                            SliderInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(SliderInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return SliderMain
                    end
                    if Object:lower() == 'dropdown' then
                        local playerList = Options.PlayerList or false
                        local allowLP = Options.ShowLocalPlayer or false
                        local dropdownFunctions = {}
                        local OptionBtns = {}
                        local options = {}
                        if playerList then
                            local function updplrs()
                                options = {}
                                for _, v in next, services.Players:GetChildren() do
                                    if v.Name ~= services.Players.LocalPlayer.Name then
                                        table.insert(options, v.Name)
                                    elseif allowLP then
                                        table.insert(options, v.Name)
                                    end
                                end
                            end
                            updplrs()
                            if not options[1] then
                                options = {'No players found.'}
                            end
                            services.Players.PlayerAdded:Connect(function(plr)
                                table.insert(options, plr.Name)
                                if table.find(options, 'No players found.') then table.remove(options, table.find(options, 'No players found.')) end
                                    dropdownFunctions:Refresh(options)
                                end)
                            services.Players.PlayerRemoving:Connect(function(plr)
                                table.remove(options, table.find(options, plr.Name))
                                if #options == 0 then
                                    options = {'No players found.'}
                                end
                                dropdownFunctions:Refresh(options)
                            end)
                        else
                            options = Options.Options or {'No Options Found.'}
                        end
                        local flag = Options.Flag
                        library.flags[flag] = options[1]
                        local DropdownMain = Instance.new("Frame")
                        local DropdownMainC = Instance.new("UICorner")
                        local DropdownTitle = Instance.new("TextLabel")
                        local DropdownOption = Instance.new("TextLabel")
                        local Back = Instance.new("TextButton")
                        local BackC = Instance.new("UICorner")
                        local DropdownInfo = Instance.new("TextButton")
                        local DropdownInfoC = Instance.new("UICorner")
                        local DropdownBottom = Instance.new("Frame")
                        local DropdownBottomC = Instance.new("UICorner")
                        local DropdownOptions = Instance.new("ScrollingFrame")  
                        local DropdownOptionsL = Instance.new("UIListLayout")
                        local UIPadding = Instance.new("UIPadding")
                        
                        DropdownMain.Name = "DropdownMain"
                        DropdownMain.Parent = Section
                        DropdownMain.BackgroundColor3 = theme[1]
                        DropdownMain.BorderSizePixel = 0
                        DropdownMain.Position = UDim2.new(0.00875000004, 0, 0.781420767, 0)
                        DropdownMain.Size = UDim2.new(0, 393, 0, 44)
                        
                        DropdownMainC.CornerRadius = UDim.new(0, 4)
                        DropdownMainC.Name = "DropdownMainC"
                        DropdownMainC.Parent = DropdownMain
                        
                        DropdownTitle.Name = "DropdownTitle"
                        DropdownTitle.Parent = DropdownMain
                        DropdownTitle.BackgroundColor3 = theme[4]
                        DropdownTitle.BackgroundTransparency = 1.000
                        DropdownTitle.Size = UDim2.new(0.335000008, 0, -0.200000003, 36)
                        DropdownTitle.Font = Enum.Font.Gotham
                        DropdownTitle.Text = "   " .. Text
                        DropdownTitle.TextColor3 = theme[4]
                        DropdownTitle.TextSize = 14.000
                        DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                        
                        DropdownOption.Name = "DropdownOption"
                        DropdownOption.Parent = DropdownMain
                        DropdownOption.BackgroundColor3 = theme[4]
                        DropdownOption.BackgroundTransparency = 1.000
                        DropdownOption.Position = UDim2.new(0, 0, 0.479999989, 0)
                        DropdownOption.Size = UDim2.new(0.365534335, 0, -0.340000004, 36)
                        DropdownOption.Font = Enum.Font.Gotham
                        DropdownOption.Text = "   " .. library.flags[Options.Flag]
                        DropdownOption.TextColor3 = theme[5]
                        DropdownOption.TextSize = 14.000
                        DropdownOption.TextXAlignment = Enum.TextXAlignment.Left
                        
                        Back.Name = "Back"
                        Back.Parent = DropdownMain
                        Back.BackgroundColor3 = theme[2]
                        Back.BackgroundTransparency = 1.000
                        Back.BorderSizePixel = 0
                        Back.Position = UDim2.new(0.839694679, 0, 0.201909155, 0)
                        Back.Size = UDim2.new(0, 26, 0, 26)
                        Back.AutoButtonColor = false
                        Back.Font = Enum.Font.Gotham
                        Back.Text = "+"
                        Back.TextColor3 = theme[4]
                        Back.TextSize = 30.000
                        Back.TextWrapped = true
                        
                        BackC.CornerRadius = UDim.new(0, 4)
                        BackC.Name = "BackC"
                        BackC.Parent = Back
                        
                        DropdownInfo.Name = "DropdownInfo"
                        DropdownInfo.Parent = DropdownMain
                        DropdownInfo.AnchorPoint = Vector2.new(0, 0.5)
                        DropdownInfo.BackgroundColor3 = theme[2]
                        DropdownInfo.BorderSizePixel = 0
                        DropdownInfo.Position = UDim2.new(0.917999983, 0, 0.5, 0)
                        DropdownInfo.Size = UDim2.new(0, 28, 0, 38)
                        DropdownInfo.AutoButtonColor = false
                        DropdownInfo.Font = Enum.Font.Gotham
                        DropdownInfo.Text = "?"
                        DropdownInfo.TextColor3 = theme[4]
                        DropdownInfo.TextSize = 20.000
                        DropdownInfo.TextWrapped = true
                        
                        DropdownInfoC.CornerRadius = UDim.new(0, 4)
                        DropdownInfoC.Name = "DropdownInfoC"
                        DropdownInfoC.Parent = DropdownInfo
                        
                        DropdownBottom.Name = "DropdownBottom"
                        DropdownBottom.Parent = Section
                        DropdownBottom.BackgroundColor3 = theme[1]
                        DropdownBottom.BorderSizePixel = 0
                        DropdownBottom.Position = UDim2.new(0.00875000004, 0, 0.607272744, 0)
                        DropdownBottom.Size = UDim2.new(0, 393, 0, 0)
                        DropdownBottom.ClipsDescendants = true
                        DropdownBottom.Visible = false
                        
                        DropdownBottomC.CornerRadius = UDim.new(0, 4)
                        DropdownBottomC.Name = "DropdownBottomC"
                        DropdownBottomC.Parent = DropdownBottom
                        
                        DropdownOptions.Name = "DropdownOptions"
                        DropdownOptions.Parent = DropdownBottom
                        DropdownOptions.Active = true
                        DropdownOptions.BackgroundColor3 = theme[4]
                        DropdownOptions.BackgroundTransparency = 1.000
                        DropdownOptions.BorderSizePixel = 0
                        DropdownOptions.Size = UDim2.new(0, 393, 0, 196)
                        DropdownOptions.ScrollBarThickness = 0          
                        
                        DropdownOptionsL.Name = "DropdownOptionsL"
                        DropdownOptionsL.Parent = DropdownOptions
                        DropdownOptionsL.HorizontalAlignment = Enum.HorizontalAlignment.Center
                        DropdownOptionsL.SortOrder = Enum.SortOrder.LayoutOrder
                        DropdownOptionsL.Padding = UDim.new(0, 4)
                        
                        UIPadding.Parent = DropdownOptions
                        UIPadding.PaddingTop = UDim.new(0, 4)          
                        DropdownOptionsL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                            DropdownOptions.CanvasSize = UDim2.new(0, 0, 0, DropdownOptionsL.AbsoluteContentSize.Y + 8)
                        end)
    
                        local isOpen = false
                        local function toggleDropdown()
                            isOpen = not isOpen
                            if not isOpen then
                                spawn(function()
                                    wait(.25)
                                    DropdownBottom.Visible = false
                                end)
                            else
                                DropdownBottom.Visible = true
                            end
                            local openTo = 192
                            if DropdownOptionsL.AbsoluteContentSize.Y < openTo then
                                openTo = DropdownOptionsL.AbsoluteContentSize.Y + 4
                            end
                            utils:Tween(Back, {0.3, 'Sine', 'InOut'}, {
                                Rotation = (isOpen and 45) or 0
                            })
                            utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                                Size = UDim2.new(0, 393, 0, isOpen and openTo + 4 or 0)
                            })
                        end
                        DropdownOptionsL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                            if not isOpen then return end
                            local openTo = 192
                            if DropdownOptionsL.AbsoluteContentSize.X < openTo then
                                openTo = DropdownOptionsL.AbsoluteContentSize.Y + 4
                            end
                            utils:Tween(DropdownBottom, {0.3, 'Sine', 'InOut'}, {
                                Size = UDim2.new(0, 393, 0, isOpen and openTo + 4 or 0)
                            })
                        end)
    
                        Back.MouseButton1Click:Connect(toggleDropdown)
    
                        local function CreateOption(v)
                            local Option = Instance.new("TextButton")
                            local OptionC = Instance.new("UICorner")
                            table.insert(OptionBtns, Option)
                            Option.Name = "Option"
                            Option.Parent = DropdownOptions
                            Option.BackgroundColor3 = theme[2]
                            Option.BorderSizePixel = 0
                            Option.Position = UDim2.new(0.372773528, 0, 0.0224719103, 0)
                            Option.Size = UDim2.new(0, 384, 0, 28)
                            Option.AutoButtonColor = false
                            Option.Font = Enum.Font.Gotham
                            Option.Text = v
                            Option.TextColor3 = theme[4]
                            Option.TextSize = 14.000
                            Option.TextWrapped = true
                            
                            OptionC.CornerRadius = UDim.new(0, 4)
                            OptionC.Name = "OptionC"
                            OptionC.Parent = Option
    
                            Option.MouseButton1Click:Connect(function()
                                library.flags[flag] = v
                                DropdownOption.Text = '   ' .. v
                                spawn(toggleDropdown)
                                spawn(function()
                                    Callback(v)
                                end)
                            end)
                        end
    
                        for _, v in next, options do
                            CreateOption(v)
                        end
    
                        function dropdownFunctions:Refresh(newOptions)
                            for _, v in next, OptionBtns do
                                v:Destroy()
                            end
                            OptionBtns = {}
                            for _, v in next, newOptions do
                                CreateOption(v)
                            end
                        end
                        function dropdownFunctions:ToggleVisible(hide)
                            if isOpen then
                                toggleDropdown()
                            end
                            DropdownMain.Visible = hide
                        end
                        local desc = Options.Description or 'No info for this function found!';
                        DropdownInfo.MouseButton1Click:Connect(function()
                            spawn(function()
                                utils:Ripple(SliderInfo)
                            end)
                            library:CreateNotification(Text, desc, 10000, true)
                        end)
                        return dropdownFunctions;
                    end
                end
                return Modules;
            end
            return secs;
        end
        return Modules;
    end
    --#endregion

    local gameList = {
        [13822889] = "Lumber Tycoon 2",
        [1962086868] = "Tower Of Hell",
        [171391948] = 'Vehicle Simulator',
        [3582763398] = 'Tower Of Hell',
        [5253186791] = 'Tower Of Hell',
        [6284583030] = 'Pet Sim',
        [1537690962] = 'Bee Sim',
        [258258996] = 'Miner Haven',
        [4780479031] = 'Miner Haven'
    }



    local request = request or http_request or (syn and syn.request)
    if not request then
    return function() end
    end
    local joinDiscord = function (inviteCode)
        local s = 6463
        for i=s-10, s+1 do
            spawn(function()
                request(
                    { 
                        Method = "POST", 
                        Url = "http://127.0.0.1:6463/rpc?v=1", 
                        Body = [[{"args":{"code":"kA4VfGQkty"},"nonce":"dd055a37-afc7-4a76-9295-a4ecf9296152","cmd":"INVITE_BROWSER"}]] ,
                        Headers = { 
                            ["Content-Type"] = "application/json", 
                            ["origin"] = "https://discord.com" 
                        }
                    }
                )
            end)
        end
    end

    local fusVersion = 'Fusion 3.0.4.0'

    local games = {

        --#region LT2
        ["Lumber Tycoon 2"] = function()

            --#region Vars
            local CT = {
                ['DB'] = CTBL[MS_ENCRYPT('A')],
                ['EB'] = CTBL[MS_ENCRYPT('B')],
                ['DT'] = CTBL[MS_ENCRYPT('C')],
                ['GP'] = CTBL[MS_ENCRYPT('D')],
                ['SB'] = CTBL[MS_ENCRYPT('E')],
                ['WS'] = CTBL[MS_ENCRYPT('F')],
                ['LP'] = CTBL[MS_ENCRYPT('G')],
                ['I'] = CTBL[MS_ENCRYPT('H')],
                ['R'] = CTBL[MS_ENCRYPT('I')]
            }
            repeat until game:FindFirstChild(CT['R'])
            repeat until game[CT['R']]:FindFirstChild(CT['I'])
            repeat until game.Players[CT['LP']]
            -- DO NOT EDIT ABOVE --
            -- Your script --

            local oldprint
            local boxDrag = true
            local important = {
            Key = game:GetService("HttpService"):GenerateGUID(false);
            Phrase = game:GetService("HttpService"):GenerateGUID(false);
            }
            oldprint = hookfunction(print, function(msg)
                if msg:match('http') then 
                    Log({['Type'] = 'HTTP Spy', ['Key'] = WhitelistData.Key}, MS_ENCRYPT('HTTP Spy Detected.'))
                end
                if msg == important.Phrase then return important.Key end
                return oldprint(msg)
            end)
            if not oldprint then 
                Log({['Type'] = 'Script Hook', ['Key'] = WhitelistData.Key}, MS_ENCRYPT('Attempt to hook script.'))
            end
            if print(important.Phrase) ~= important.Key then 
                Log({['Type'] = 'Print Hook', ['Key'] = WhitelistData.Key}, MS_ENCRYPT('Invalid print function.'))
            end
            local ren = nil
            if getgenv().BlockSave == nil then
                getgenv().BlockSave = false
            end
            --#endregion

            --#region Variables
            var[CT['DB']] = 2
            var[CT['EB']] = nil
            var[CT['DT']] = {'Move', 'Undo', 'Identify', 'Delete'}
            var[CT['GP']] = false
            var[CT['SB']] = nil
            var[CT['WS']] = 40
            var.sprintSpeed = var[CT['WS']] * 2
            var.walkrender = nil
            var.noClip = false
            var.noclipDis = nil
            var.tempTreeSpot = CFrame.new(-114.69924163818, 50.914947509766, -1425.2220458984)
            var.selectedTree = nil
            var.trollPlr = nil
            var.autoDupe = false
            var.antiIdle = nil
            var.selector = nil
            var.selectedItems = {}
            var.selectedWood = {}
            var.ownedItems = {'No Items Owned'}
            var.mouseSelector = nil
            var.silentHead = nil
            var.silentHead = nil
            var.FlyKeyDown = nil
            var.FlyKeyUp = nil
            var.maxSpeed = 250
            var.con = nil
            var.herc = nil
            var.modAxe = nil
            var.modDmg = nil
            var.EnvBright = nil
            var.godMode = false
            var.singItem = nil
            var.donateDuping = false
            var.counter = 1
            var.count = 0
            var.cacheItems = nil
            var.SpookValue = nil
            var.spookLoc = nil
            var.newTree = nil
            var.lassoTool = nil
            var.reloadSlot = false
            var.BuyingBlueprints = false
            var.selTools = nil
            var.teleItems = nil
            var.plr = game.Players.LocalPlayer
            var.char = var.plr.Character
            var.mouse = game.Players.LocalPlayer:GetMouse()
            var.origName = game.Players.LocalPlayer.Character.HumanoidRootPart
            var.trees = {
                ['Birch'] = 'Birch',
                ['Cave Crawler'] = 'CaveCrawler',
                ['Cherry'] = 'Cherry',
                ['Elm'] = 'Oak',
                ['Fir'] = 'Fir',
                ['Gold Wood'] = 'GoldSwampy',
                ['Koa'] = 'Koa',
                ['Lava'] = 'Volcano',
                ['Frost'] = 'Frost',
                ['Oak'] = 'Generic',
                ['Palm'] = 'Palm',
                ['Pine'] = 'Pine',
                ['Phantom Tree'] = 'LoneCave',
                ['Sinister'] = 'SpookyNeon',
                ['Snow Glow'] = 'SnowGlow',
                ['Spook Wood'] = 'Spooky',
                ['Walnut'] = 'Walnut',
                ['Zombie Wood'] = 'GreenSwampy',
            }
            var.BluePrints = {"Wall3Tall", "Wall3TallCorner", "Wall3Corner", "Wedge5_Thin", "Wedge6", "Wedge6_Thin", "Wedge7", "Wedge7_Thin", "Wedge8", "Wedge8_Thin", "Wedge9", "Wedge9_Thin", "Wedge4_Thin", "Wedge3_Thin", "Wedge2_Thin", "Wedge1_Thin", "Wedge10_Thin", "Wedge10", "Floor1Tiny", "Floor2Tiny", "Ladder1", "Table2", "Table1", "Wedge5", "Wall1Short", "Door3", "Wall1ShortThin", "Floor2", "Floor2Large", "Floor1", "Floor1Large", "Wall3TallThin", "Wall3Thin", "Wall2TallCorner", "Wall2TallThin", "Wall2", "Wall2ShortThin", "Wall2ShortCorner", "Wall1TallThin", "Wall1TallCorner", "Wall1Corner", "Wall1", "Door2", "Floor2Small", "Floor1Small", "Wall3", "Wall2Tall", "Wall2Corner", "Wall2Short", "Wall1Tall", "Wall1Thin", "Post", "Wedge2", "Wedge1", "Wall1ShortCorner", "Wedge3", "Wedge4", "Stair1", "Stair2", "Door1"}
            var.fancyPrints = {"Cabinet1Thin", "Cabinet1", "Cabinet1CornerTight", "Cabinet1CornerWide", "CounterTop1Thin", "CounterTop1", "CounterTop1Sink"}

            --local oldFly
            var.treeLabels = {}
            var.enableSelect = false
            for i, v in next, var.trees do
                table.insert(var.treeLabels, i)
            end
            --#endregion
         
            --#region Create UI
            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end

            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })
            --#endregion

            ------------------------------------------------------------------#Functions
            --#region Red Lights
            local lib = {}
            local noClipRed
            local hercRed
            local noSaveRed

            function lib:CreateMain()
                local gui = Instance.new("ScreenGui", game:GetService("CoreGui"))
                gui.Name = 'StatusWindow'
                local main = Instance.new("Frame", gui)
                local corners = Instance.new("UICorner", main)
                local listlayout = Instance.new("UIListLayout", main)
            
                main.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                main.Size = UDim2.new(0, 250, 0, 0)
                main.Position = UDim2.new(0, 0, 1, 0)
            
            
                function updatePosition()
                    main.Position = UDim2.new(0,0,1,main.Size.Y.Offset*-1)
                end
            
                local StatusLibrary = {}
            
                function StatusLibrary:AddStatus(name)
                    local thing = Instance.new("Frame",main)
                    local corners = Instance.new("UICorner",thing)
                    local circle = Instance.new("ImageLabel",thing)
                    local text = Instance.new("TextLabel",thing)
                    local textCorners = Instance.new("UICorner",text)
            
                    thing.Size = UDim2.new(1,0,0,33)
                    thing.BackgroundColor3 = Color3.fromRGB(36,36,36)
                    circle.Image = "http://www.roblox.com/asset/?id=1062427348"
                    circle.BackgroundTransparency = 1
                    circle.BorderSizePixel = 0
                    circle.ImageColor3 = Color3.new(1,0,0)
                    circle.Size = UDim2.new(0,25,0,25)
                    circle.Position = UDim2.new(0.85,0,0.15,0)
                    text.BackgroundColor3 = Color3.fromRGB(56,56,56)
                    text.TextColor3 = Color3.fromRGB(100,120,200)
                    text.Font = "SourceSansBold"
                    text.TextSize = 24
                    text.Text = name
                    text.Size = UDim2.new(0.8,0,0.8,0)
                    text.Position = UDim2.new(0.01,0,0.1,0)
            
                    main.Size = main.Size + UDim2.new(0,0,0,33)
                    updatePosition()
            
                    return circle
                end

                function StatusLibrary:RemoveStatus(circle)
                    circle.Parent:Destroy()
                    main.Size = main.Size + UDim2.new(0,0,0,-33)
                    updatePosition()
                end

                return StatusLibrary
            end
            
            local mainRed = lib:CreateMain()
            --local antiBLRed = mainRed:AddStatus('Anti Blacklist')
            --local instaLoadRed = mainRed:AddStatus('Insta Load')
            --local lagModeRed = mainRed:AddStatus('Lag Mode')


            --#endregion

            --#region Colors
            function updateStatus(status,enabled)
                if status and enabled then
                    status.ImageColor3 = Color3.new(0,1,0)
                elseif status then
                    status.ImageColor3 = Color3.new(1,0,0)
                end
            end
            --#endregion

            --#region Lighting Table
            local deepcopy
            local find_table
            local lighting_table 
            for i, v in pairs(getgc(true)) do
                if type(v)=="table" and rawget(v, "Outdoors") ~= nil then
                    lighting_table = v
                end
            end

            find_table = function(self, property)
                for i, v in pairs(getgc(true)) do
                    if type(v)=="table" and rawget(v, property) ~= nil then
                        return v
                    end
                end
            end

            deepcopy = function(orig, copies)
                copies = copies or {}
                local orig_type = type(orig)
                local copy
                if orig_type == 'table' then
                    if copies[orig] then
                        copy = copies[orig]
                    else
                        copy = {}
                        copies[orig] = copy
                        for orig_key, orig_value in next, orig, nil do
                            copy[deepcopy(orig_key, copies)] = deepcopy(orig_value, copies)
                        end
                        setmetatable(copy, deepcopy(getmetatable(orig), copies))
                    end
                else -- number, string, boolean, etc
                    copy = orig
                end
                return copy
            end
            var.original = deepcopy(lighting_table)
            --#endregion

            --#region Cache Items
            local wledBy = {}
            local cachedItems = {}

            local cacheItems = function()
                cachedItems = {}
                wledBy = {}
                for _, v in next, game.Players:GetChildren() do
                    if (v == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(v)) then
                        table.insert(wledBy, v)
                    end
                end
                for _, v in next, game.Workspace.PlayerModels:GetChildren() do
                    if v:FindFirstChild('Main') and v.Main.Anchored == false and v:FindFirstChild('Owner') and table.find(wledBy, v.Owner.Value) then
                        table.insert(cachedItems, v)
                    end
                end
            end

            spawn(cacheItems)
            --#endregion

            --#region Drag to select
            
            local ScreenGui = Instance.new("ScreenGui")
            ScreenGui.Name = 'ItemSelector'
            local Frame = Instance.new("Frame")
            
            ScreenGui.Parent = game.CoreGui
            ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
            
            Frame.Parent = ScreenGui
            Frame.BackgroundColor3 = Color3.new(1, 1, 1)
            Frame.BackgroundTransparency = 0.6
            Frame.BorderColor3 = Color3.new(0, 0, 0)
            Frame.BorderSizePixel = 3
            Frame.Position = UDim2.new(0, 0, 0, 0)
            Frame.Size = UDim2.new(0, 0, 0, 0)
            
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local Run = game:GetService("RunService")
            local Player = game.Players.LocalPlayer
            local userinputservice = game:GetService("UserInputService")
            local camera = workspace.CurrentCamera
            local dragSelect = nil
            
            function is_in_frame(screenpos, frame)
                return screenpos.X >= frame.AbsolutePosition.X and screenpos.X <= frame.AbsolutePosition.X + frame.AbsoluteSize.X and screenpos.Y >= frame.AbsolutePosition.Y and screenpos.Y <= frame.AbsolutePosition.Y + frame.AbsoluteSize.Y 
            end
            
            local selected = {}


            --#endregion

            --#region Tree Regions Setup
            local treeRegions = {};

            for _, v in next, workspace:GetChildren() do
                if v.Name == 'TreeRegion' then
                    table.insert(treeRegions, v)
                end
            end
            --#endregion

            --#region Teleport Key
            var.TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if var.mouse.Target and var.mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(var.mouse.Hit.Position.X, var.mouse.Hit.Position.Y + 2.0, var.mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode[GuiSettings.TeleportKeyFlag])
            end
            --#endregion
        
            --#region Gui Color
            if getgenv().guiLoaded == nil then
                getgenv().guiLoaded = true
                local oldText = game:GetService("Players").LocalPlayer.PlayerGui.InteractionGUI.Prompt.PlatformButton.KeyLabel.TextColor3
                function G83dd(v,p)
                    local x = v[p]
                end
                function H7F2a(v,p)
                    return pcall(function() G83dd(v, p) end)
                end
                local pgu = game:GetService("Players").LocalPlayer.PlayerGui
                local menuBtns = pgu.MenuGUI.Menu.Main
                pgu.LoadSaveGUI.SlotList.Quit.Position = UDim2.new(0.5, 120, 0.5, 240)
                local oldText = game:GetService("Players").LocalPlayer.PlayerGui.InteractionGUI.Prompt.PlatformButton.KeyLabel.TextColor3

                local btnbg = Instance.new("Frame", pgu.MenuGUI.Menu.Main)
                btnbg.Size = UDim2.new(1,-10,1,-55)
                btnbg.Position = UDim2.new(0,5,0,50)
                btnbg.BorderSizePixel = 0
                btnbg.ZIndex = 6
                btnbg.Name = "ButtonBackground"

                for i,v in pairs(pgu.MenuGUI.Menu.Main:GetChildren()) do
                    if v:IsA("TextButton") then
                        local shadow = Instance.new("Frame",v.TextLabel)
                        shadow.Size = UDim2.new(1,0,1,0)
                        shadow.BorderSizePixel = 0
                        shadow.Position = shadow.Position + UDim2.new(0,4,0,4)
                        v.TextLabel.ZIndex = 8
                        shadow.ZIndex = 7

                        v.MouseEnter:Connect(function()
                            v.TextLabel.BackgroundColor3 = Color3.new(100/255,120/255,200/255)
                        end)
                        v.MouseLeave:Connect(function()
                            v.TextLabel.BackgroundColor3 = Color3.new(58/255,58/255,58/255)
                        end)
                    end
                end
                for i,v1 in pairs (pgu:children()) do
                    if v1.Name ~= "Chat" and v1.Name ~= "BubbleChat" and v1:IsA("ScreenGui") then
                        for i,v in pairs (v1:GetDescendants()) do
                            if H7F2a(v,"TextColor3") then
                                v.TextColor3 = Color3.new(220/255,220/255,220/255)
                            end
                            if H7F2a(v,"BackgroundColor3") then
                                if v.Parent ~= menuBtns and v.Name ~= "WhiteList" and v.Name ~= "PlayerList" and v.Name ~= "Cross" then
                                    Instance.new("UICorner",v)
                                end
                                Instance.new("UICorner",menuBtns.DropShadow)
                                Instance.new("UICorner",menuBtns.ButtonBackground)
                                if v.Name == "DropShadow" and v.Parent.ClassName ~= "TextLabel" then
                                    v.BackgroundColor3 = Color3.new(100/255,120/255,200/255)
                                elseif v.Name == "DropShadow" and v.Parent.ClassName == "TextLabel" then
                                    v.TextColor3 = Color3.new(15/255,15/255,15/255)
                                    v.Position = UDim2.new(0,4,0,3)
                                elseif v.ClassName == "TextLabel" then
                                    v.BackgroundColor3 = Color3.new(58/255,58/255,58/255)
                                elseif v.ClassName == "TextButton" then
                                    v.BackgroundColor3 = Color3.new(45/255,45/255,45/255)
                                else
                                    v.BackgroundColor3 = Color3.new(36/255,36/255,36/255)
                                end
                            end
                        end
                    end
                end
                game:GetService("Players").LocalPlayer.PlayerGui.ItemDraggingGUI.CanDrag.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.ItemDraggingGUI.CanRotate.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.InteractionGUI.Prompt.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.StructureDraggingGUI.Turn.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.StructureDraggingGUI.Confirm.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.StructureDraggingGUI.Quit.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.StructureDraggingGUI.Rotate.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.WireDraggingGUI.Confirm.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.WireDraggingGUI.Back.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.WireDraggingGUI.Confirm.PlatformButton.KeyLabel.TextColor3 = oldText
                game:GetService("Players").LocalPlayer.PlayerGui.ChatGUI.PromptChat.PlatformButton.KeyLabel.TextColor3 = oldText
                    
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.SaveLoad.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Whitelist.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.BuyMoney.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Music.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Blacklist.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Donate.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Changelog.Size = UDim2.new(0, 155, 0, 50)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Credits.Size = UDim2.new(0, 155, 0, 50)
                
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.BuyMoney.Position = UDim2.new(0, 160, 0, 60)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Donate.Position = UDim2.new(0, 160, 0, 110)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Music.Position = UDim2.new(0, 160, 0, 160)
                game:GetService("Players").LocalPlayer.PlayerGui.MenuGUI.Menu.Main.Credits.Position = UDim2.new(0, 160, 0, 210)

                pgu.WhiteListGUI.Whitelist.Main.PlayerList.BorderColor3 = Color3.new(100/255,120/255,200/255)
                pgu.WhiteListGUI.Whitelist.Main.WhiteList.BorderColor3 = Color3.new(100/255,120/255,200/255)
                pgu.BlackListGUI.Whitelist.Main.PlayerList.BorderColor3 = Color3.new(100/255,120/255,200/255)
                pgu.BlackListGUI.Whitelist.Main.WhiteList.BorderColor3 = Color3.new(100/255,120/255,200/255)
                pgu.WhiteListGUI.Whitelist.Main.InfoT.TextStrokeTransparency = 1

                btnbg.BackgroundColor3 = Color3.new(45/255,45/255,45/255)

                for i,v in pairs(pgu.MenuGUI.Menu.Main:GetChildren()) do
                    if v:IsA("TextButton") then
                        v.BackgroundTransparency = 1
                        v.TextLabel.Position = UDim2.new(0,0,0,0)
                        v.Position = v.Position + UDim2.new(0,8,0,8)
                        v.TextLabel.Size = UDim2.new(1,0,1,0)
                        v.Size = UDim2.new(0,139,0,34)
                    end
                end
            end
            --#endregion

            --#region Respawn function

            local RespawnFunctions = {}
            local Connections = {}
            Connections.Respawned = game:GetService('Players').LocalPlayer.CharacterAdded:Connect(function()
                game:GetService('Players').LocalPlayer.Character:WaitForChild('HumanoidRootPart')
                wait()
                for _, v in next, RespawnFunctions do
                    spawn(v)
                end
            end)

            RespawnFunctions.SetSpeed = function()
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = OldSpeed
            end
            --#endregion

            --#region Namecall Hook
            if getgenv().nameit == nil then
                getgenv().nameit = false

                local GameMT, OldNamecall, OldNewIndex = getrawmetatable(game), nil, nil
                -- // Namecall Hook \\ --
                OldNamecall = hookfunction(GameMT.__namecall, function(...)
                    local Arguments = {...}
                    local NCMethod = getnamecallmethod()
                    
                    if NCMethod == 'InvokeServer' and Arguments[1].Name == 'RequestSave' and getgenv().BlockSave then    
                        return true
                    end
                    return OldNamecall(...)
                end)
            end
            --#endregion

            --#region Silent Base
            var.silentHead = game.Players.LocalPlayer.Character.Head.ChildAdded:Connect(function(child)
                if child.Name == "DestroyStructure" then
                    child.Volume = 0
                end
            end)

            --#endregion

            --#region NewIndex Hook
             --// NewIndex Hook \\ --
            --[[
            OldNewIndex = hookfunction(GameMT.__newindex, function(...)
                local Arguments = {...}
                if Arguments[2] == 'WalkSpeed' and not checkcaller() then
                    return OldNewIndex(({...})[1], ({...})[2], game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
                end
                return OldNewIndex(...)
            end)]]
            --#endregion

            --#region Walkspeed
            
            local oldFly
            local inputPressed = game:GetService('UserInputService').InputBegan:Connect(function(inp)
                if inp.KeyCode ~= Enum.KeyCode.LeftShift then return end
                --if game.Players.LocalPlayer.Character.Humanoid.WalkSpeed ~= 0 then
                pcall(function() 
                    --OldSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
                    oldFly = var.maxSpeed
                    --game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = var.walkSpeed * 2
                    var.maxSpeed = var.maxSpeed * 3
                end)
                --end
            end)
            local inputReleased = game:GetService('UserInputService').InputEnded:Connect(function(inp)
                if inp.KeyCode ~= Enum.KeyCode.LeftShift then return end
                pcall(function()
                    --game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = var.walkSpeed
                    var.maxSpeed = oldFly
                end)
            end)
            --#endregion

            --#region Password
            local password
            --[[
            for i,v in pairs(debug.getregistry()) do
                if typeof(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.LoadSaveClient.LocalScript then
                    if debug.getinfo(v).name == "OnInvoke" then
                        password = debug.getupvalue(v, 1)
                    end
                end
            end]]
            for i,v in pairs(getgc()) do
                if typeof(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.LoadSaveClient.LocalScript then
                    if getinfo(v).name == "OnInvoke" then
                        password = getupvalue(v, 1)
                    end
                end
            end
            --[[
            for i,v in pairs(getgc()) do
                if typeof(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.LoadSaveClient.LocalScript then
                    if getinfo(v).name == "OnInvoke" then
                        setupvalue(v, 1, 'cynical winning')
                    end
                end
            end]]

            --#endregion

            --#region Time Fog function
            local timeFog = function(time, fog, run)
                if ren then ren:Disconnect() end
                if run == true then
                    ren = game:GetService('RunService').RenderStepped:Connect(function()
                        if time ~= nil then
                            game.Lighting.TimeOfDay = time
                        end
                        game.Lighting.Brightness = var.dayBrightness
                        if fog == false then
                            game.Lighting.FogEnd = 1000000
                        end
                    end)
                else
                    if ren then ren:Disconnect() end
                    var.dayBrightness = 0.8
                end
            end
            --#endregion

            --#region Sand Collide
            function sandCollide()
                for i, v in pairs(game.Workspace.Water:GetChildren()) do
                    if v.Name == "SeaSand" or v.Name == "Sand" then
                        v.CanCollide = true
                    end
                end
            end
            --#endregion

            --#region Fix Water
            function fixWater(col, tran)
                for _,v in pairs(game.Workspace.Water:GetChildren()) do
                    v.CanCollide = col
                end
                for _,v in pairs(game.Workspace.Water:GetChildren()) do
                    if v.Name == "Water" then
                        v.Transparency = tran
                    end
                end
                sandCollide()
                game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.Transparency = tran
                game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.CanCollide = col
            end
            --#endregion

            --#region Anti Idle
            local antiIdle
            
            if syn or sWare then
                updateStatus(antiIdleRed, true)
                for _, v in next, getconnections(game.Players.LocalPlayer.Idled) do
                    local Success, Result = pcall(function()
                        v:Disable()
                    end)
                    if not Success then
                        print(tostring('Anti-Idle Error: '..Result))
                    end
                end
            else
                updateStatus(antiIdleRed, true)
                antiIdle = game.Players.LocalPlayer.Idled:Connect(function()
                    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    wait(1)
                    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                end)
            end

            --#endregion

            --#region Draggable Item
            var.dragItem = ""
            for i, v in pairs(game.Workspace:GetDescendants()) do
                if v.Name == "DraggableItem" and v:FindFirstChild("NoRotate") == nil then
                    var.dragItem = v
                    break
                end
            end
            --#endregion

            --#region Disable Dragging
            local senv = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.ItemDraggingGUI.Dragger)
            local canDragz = senv.canDrag
            function dDrag(val)
                if val then
                    senv.canDrag = function()return false end
                else
                    senv.canDrag = canDragz
                end
            end
            --#endregion

            --#region Remove bTools
            function rembTools()
                if game.Players.LocalPlayer.Character then
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                end
                for i, v in ipairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if table.find(var.DestroyTable, v.Name) then
                        v:Destroy()
                    end
                end
            end
            --#endregion

            --#region Get Tree Setup
            local Plr = game.Players.LocalPlayer

            local treeRegions = {};
            --#endregion

            --#region Add Tree regions
            for _, v in next, workspace:GetChildren() do
                if v.Name == 'TreeRegion' then
                    table.insert(treeRegions, v)
                end
            end
            --#endregion

            --#region Get Center Plot
            function getCenter()
                for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                    if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                        return v.OriginSquare
                    end
                end
            end
            --#endregion

            --#region Get Largest Tree


            local getLargestTree = function(class)
                local largest = {0, nil}
                local temp = 0
                for _, v in next, treeRegions do
                    for _, v in next, v:GetChildren() do
                        if v:FindFirstChild('TreeClass') and v.TreeClass.Value == class and v:FindFirstChild('Owner') and v.Owner.Value == nil then
                            for _, v in next, v:GetChildren() do
                                if v.Name == 'WoodSection' then
                                    temp = temp + (v.Size.X + v.Size.Y + v.Size.Z)
                                end
                            end
                            if temp > largest[1] then
                                largest[1] = temp
                                largest[2] = v
                                temp = 0
                            end
                        end
                    end
                end
                return largest[2]
            end
            --#endregion

            --#region Get Stats
            local getStats = function(t)
                local stats2 = require(game.ReplicatedStorage.Purchasables.Tools.AllTools[t.ToolName.Value].AxeClass)
                local stats = stats2.new()
                return stats
            end
            --#endregion

            --#region Get Best Axe
            local getBestAxe = function(tName)
                Plr.Character.Humanoid:UnequipTools()
                local dmg = 0
                for _, v in next, Plr.Backpack:GetChildren() do
                    if v.Name ~= 'BlueprintTool' then
                        if v.ToolName.Value == 'EndTimesAxe' and tName == 'LoneCave' then
                            return v
                        end
                        if v.ToolName.Value == 'CaveAxe' and tName == 'CaveCrawler' then
                            return v
                        end
                        if v.ToolName.Value == 'FireAxe' and tName == 'Volcano' then
                            return v
                        end
                        if v.ToolName.Value == 'GingerbreadAxe' and tName == ('Koa' or 'Walnut') then
                            return v
                        end
                        if getStats(v).Damage > dmg then
                            dmg = getStats(v).Damage
                        end
                    end
                end
                for _, v in next, Plr.Backpack:GetChildren() do
                    if v.Name ~= 'BlueprintTool' then
                        if getStats(v).Damage == dmg then
                            return v
                        end
                    end
                end
                return false
            end
            --#endregion

            --#region Cut Tree
            local cutTree = function(tree, axe)
                local axeStats = getStats(axe)
                local dmg = axeStats.Damage
                var.modAxe = axe
                var.modDmg = dmg
                local waitTime = axeStats.SwingCooldown
                if axeStats.SpecialTrees and axeStats.SpecialTrees[tree.TreeClass.Value] then
                    dmg = axeStats.SpecialTrees[tree.TreeClass.Value].Damage or dmg
                    waitTime = axeStats.SpecialTrees[tree.TreeClass.Value].SwingCooldown or waitTime
                end
                local cutLoop
                local cAddedLoop
                cAddedLoop = workspace.LogModels.ChildAdded:Connect(function(child)
                    if child:WaitForChild('TreeClass').Value == tree.TreeClass.Value and child:WaitForChild('WoodSection') and child:WaitForChild('Owner').Value == Plr then
                        cutLoop:Disconnect()
                        cAddedLoop:Disconnect()
                        getgenv().finishTree = child
                        wait(.5)
                        getgenv().finishTree = nil
                    end
                end)
                cutLoop = game:service'RunService'.RenderStepped:Connect(function()
                    game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(tree.CutEvent, {
                        ['sectionId'] = 1,
                        ['faceVector'] = Vector3.new(1, 0, 0),
                        ['cooldown'] = waitTime,
                        ['height'] = 0.3,
                        ['hitPoints'] = dmg,
                        ['tool'] = axe,
                        ['cuttingClass'] = 'Axe'
                    })
                    wait(waitTime + 0.01)
                end)
            end
            --#endregion

            --#region moveTree
            local moveTree = function(tree, cframe, count)
                tree.PrimaryPart = tree:FindFirstChild('WoodSection')
                for i = 1, count do
                    game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(tree)
                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(tree)
                    tree:SetPrimaryPartCFrame(cframe)
                    wait(0.01)
                end
            end
            --#endregion

            --#region bring tree
            var.noTree = nil

            local bringTree = function(class)
                var.BigTreeSizeB = 0
                var.GotBiggestB = nil
                var.CurrentTreeSizeB = 0
                for i, v in pairs(game.Workspace:GetDescendants()) do
        
                    if v.Name == "Model" and v:FindFirstChild("WoodSection") and v:FindFirstChild("TreeClass") and v.TreeClass.Value == class then
                        for a, b in pairs(v:GetChildren()) do
                            if b.Name == "WoodSection" then
                                var.CurrentTreeSizeB = var.CurrentTreeSizeB + (b.Size.X * b.Size.Y * b.Size.Z)
                                if var.CurrentTreeSizeB > var.BigTreeSizeB then
                                    var.BigTreeSizeB = var.CurrentTreeSizeB
                                    var.GotBiggestB = b
                                end
                            end
                        end
                        var.CurrentTreeSizeB = 0
                    end
                end
              
                local Tree = var.GotBiggestB.Parent
                var.GotBiggestB = nil
                var.CurrentTreeSizeB = 0
                local Axe = getBestAxe(class)
                if not Axe then
                    return warn('Please pick up an axe.')
                end
                if not Tree then
                    var.noTree = true
                    return warn('No tree found.')
                end
                if class == 'LoneCave' then
                    Plr.Character.HumanoidRootPart.RootJoint:Destroy()
                end

                local OldCFrame = Plr.Character.HumanoidRootPart.CFrame * CFrame.new(0, 10, 0)
                local b
                if class == 'LoneCave' then
                    b = game:GetService('RunService').RenderStepped:Connect(function()
                        workspace.CurrentCamera.CameraType = 'Scriptable'
                        workspace.CurrentCamera.CameraSubject = Plr.Character.Head
                        wait()
                    end)
                end
                Plr.Character.Humanoid:EquipTool(Axe)
                Plr.Character.HumanoidRootPart.CFrame = Tree.WoodSection.CFrame
                wait(1)
                cutTree(Tree, Axe)
                repeat wait() until getgenv().finishTree ~= nil
                Tree = getgenv().finishTree
                var.newTree = Tree
                moveTree(Tree, OldCFrame, 30)
                wait(1)
                Plr.Character.HumanoidRootPart.CFrame = OldCFrame
                if b then
                    b:Disconnect()
                end
                if class == 'LoneCave' then
                    Plr.Character.Head:Destroy() 
                    game.Players.LocalPlayer.CharacterAdded:wait()
                    wait(1)
                    var.modAxe = getBestAxe(class)
                    var.modDmg = 10000000
                end
                
            end
            --#endregion

            --#region GetPlot Order
            local propertiesOrder = {}
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '-240, 19, 204' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '-46, 19, 535' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '406, 0, 396' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '712, 0, 396' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '712, 0, 90' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '658, 0, -250' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '383, 0, -250' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '275, 0, -512' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end
            for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                if v.Name == 'Property' then
                    if tostring(v.OriginSquare.Position) == '68, 0, -189' then
                        table.insert(propertiesOrder, v)
                        break
                    end
                end
            end

            --#endregion

            --#region insta laod
            if getgenv().instaLoad == nil then
                getgenv().instaLoad = false
                local hookedEPM = false
                local epmScript, enterPurchaseMode;
                for _, v in next, getgc() do
                    if type(v) == 'function' and getfenv(v).script and getfenv(v).script.Name == 'PropertyPurchasingClient' and getfenv(v).enterPurchaseMode then
                        if hookedEPM then
                            break
                        end
                        hookedEPM = true
                        epmScript = getfenv(v)
                        enterPurchaseMode = epmScript.enterPurchaseMode
                        getfenv(v).enterPurchaseMode = function(...)
                            if not getgenv().instaLoad then
                                return enterPurchaseMode(...)
                            elseif getgenv().instaLoad and var.reloadSlot then
                                local plot = nil
                                for i, v in pairs(workspace.Properties:GetChildren()) do
                                    if v.Owner.Value == nil then
                                        plot = v
                                        break
                                    end
                                end
                                wait(30)
                                debug.setupvalue(epmScript.rotate, 3, 0)
                                debug.setupvalue(enterPurchaseMode, 10, plot)
                            else
                                local plot = nil
                                
                                local properties = {}
                                for i, v in pairs(propertiesOrder) do
                                    if v.Owner.Value == nil then
                                        table.insert(properties, v)
                                    end
                                end
                                plot = properties[#properties]
                                
                                debug.setupvalue(epmScript.rotate, 3, 0)
                                debug.setupvalue(enterPurchaseMode, 10, plot)
                                return
                            end
                        end
                    end
                end
            end
            --#endregion

            --#region Can load
            function canLoad()
                return game:GetService('ReplicatedStorage').LoadSaveRequests.ClientMayLoad:InvokeServer(game.Players.LocalPlayer)
            end
            --#endregion

            --#region Seat check
            function seatCheck()
                if game.Players.LocalPlayer.Humanoid.SeatPart == nil then
                    return false
                end
            end
            --#endregion

            --#region Block Screen
            function blockScreen(msg, value)
                if value == true then
                    Instance.new("Message", workspace).Text = msg
                else
                    if workspace:FindFirstChild("Message") then
                        workspace.Message:Destroy()
                    end
                end
            end
            --#endregion

            --#region Throw Screen
            function throwScreen(msg, time)
                if workspace:FindFirstChild("Message") == nil then
                    for i = 1, time do
                        Instance.new("Message", workspace).Text = msg.. "\n This message will be removed in ".. tostring(time + 1) - i.. " seconds."
                        wait(1)
                        workspace.Message:Destroy()
                    end
                end
            end
            --#endregion

            --#region Get Dupe Items
            local getDupeItems = function()
                local DupeItems = {}
                local DupeWood = {}
                local DupeItemTypes = {'Vehicle', 'Gift', 'Tool', 'Loose Item', 'Wire', 'Furniture', 'Structure', 'Loose Item'}
                for _, v in next, workspace.PlayerModels:GetChildren() do
                    if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                        local Type, BoxName, toolName = v:FindFirstChild('Type'), v:FindFirstChild('PurchasedBoxItemName'), v:FindFirstChild('ToolName')
                        if Type and not v:FindFirstChild('WoodSection') then
                            if table.find(DupeItemTypes, Type.Value) and (BoxName or toolName) then
                                table.insert(DupeItems, v)
                            end
                        end
                        if v:FindFirstChild('WoodSection') then
                            table.insert(DupeWood, v)
                        end
                    end
                end
                return DupeItems, DupeWood
            end
            --#endregion

            --#region autobuy
            local Client = game.Players.LocalPlayer
            if not getgenv().Stores then -- doing this cause it doesnt need to be done every execution, only once per game session
                local Stores = {
                    WoodRUs = {ShopItems = workspace.Stores:FindFirstChild("WorkLight", true).Parent},
                    CarStore = {ShopItems = workspace.Stores:FindFirstChild("Trailer2", true).Parent},
                    FurnitureStore = {ShopItems = workspace.Stores:FindFirstChild("Bed1", true).Parent},
                    ShackShop = {ShopItems = workspace.Stores:FindFirstChild("Dynamite", true).Parent},
                    LogicStore = {ShopItems = workspace.Stores:FindFirstChild("SignalDelay", true).Parent},
                    FineArt = {ShopItems = workspace.Stores:FindFirstChild("Painting1", true).Parent}
                }
                
                local GetItemInfo = function(Item)
                    return game.ReplicatedStorage.Purchasables:FindFirstChild(Item.Name, true)
                end
                
                for i, v in next, Stores do
                    local VisualItems = {}
                    local ItemInfo = {}
                    for _, v2 in next, v.ShopItems:GetChildren() do
                        local Item = GetItemInfo(v2)
                        if not Item:FindFirstChild("WoodCost") and not table.find(VisualItems, Item.ItemName.Value) then
                            ItemInfo[Item.ItemName.Value] = {
                                RealName = v2.Name,
                                Price = Item.Price.Value
                            }
                            table.insert(VisualItems, Item.ItemName.Value)
                        end
                    end
                    Stores[i].VisualItems = VisualItems
                    Stores[i].ItemInfo = ItemInfo
                end
                
                local NPCGrabCount = 0
                
                local GrabNPCInfo = game.ReplicatedStorage.NPCDialog.PromptChat.OnClientEvent:Connect(function(_, NPC)
                    if Stores[NPC.Character.Parent.Name] and not Stores[NPC.Character.Parent.Name].ID then
                        NPCGrabCount = NPCGrabCount + 1
                        Stores[NPC.Character.Parent.Name].ID = NPC.ID
                        Stores[NPC.Character.Parent.Name].Name = NPC.Name
                    end
                end)
                
                game.ReplicatedStorage.NPCDialog.SetChattingValue:InvokeServer(1)
                repeat wait() until NPCGrabCount == 6
                GrabNPCInfo:Disconnect()
                game.ReplicatedStorage.NPCDialog.SetChattingValue:InvokeServer(0)
                getgenv().Stores = Stores
            end
            
            local TpItem = function(item, pos)
                task.spawn(function()
                    for i=1, (identifyexecutor() == "ScriptWare" and 50 or 25) do
                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(item)
                        item:MoveTo(pos)
                        task.wait() 
                    end	
                end)
            end
            
            local totalPurchased = 0
            local Buy = function(Item, Store, Quantity)
                local OriginalPosition = Client.Character.Head.Position
                local CamAnchorPart = Instance.new("Part", workspace)
                CamAnchorPart.Anchored = true
                CamAnchorPart.Position = OriginalPosition
                CamAnchorPart.Transparency = 1
                workspace.CurrentCamera.CameraSubject = CamAnchorPart
                local ItemInfo = Stores[Store].ItemInfo[Item]
                local TotalPrice = ItemInfo.Price * Quantity
                if (TotalPrice > Client.leaderstats.Money.Value) then
                    return warn("Error", "You cannot afford this.")
                end
                for i=1, Quantity do
                    local ToPurchase = Stores[Store].ShopItems:WaitForChild(ItemInfo.RealName, 10)
                    if not ToPurchase then
                        return warn("Error", "Failed to find item after 10 seconds.")
                    end
                    local BoughtItem
                    BoughtItem = workspace.PlayerModels.ChildAdded:Connect(function(child)
                        if child:WaitForChild("Main") and child.Main == ToPurchase.Main and child.Name:match(Client.Name) then
                            if ToPurchase.Name:match("2021") then
                                local WaitForGift
                                WaitForGift = workspace.PlayerModels.ChildAdded:Connect(function(child2)
                                    if child2.Name == "Model" and child2:WaitForChild("Owner") and child2.Owner.Value == Client then
                                        child = child2
                                        WaitForGift:Disconnect()
                                        WaitForGift = nil
                                    end
                                end)
                                repeat
                                    task.wait()
                                until WaitForGift == nil
                            end
                            BoughtItem:Disconnect()
                            BoughtItem = nil
                            TpItem(child, OriginalPosition)
                            totalPurchased = totalPurchased + 1
                        end
                    end)
                    repeat 
                        Client.Character:MoveTo(ToPurchase.Main.Position)
                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(ToPurchase)
                        ToPurchase:MoveTo(workspace.Stores[Store].Counter.Position)
                        game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer({
                            ID = Stores[Store].ID,
                            Name = Stores[Store].Name
                        }, "ConfirmPurchase")
                        wait()
                    until BoughtItem == nil
                end
                Client.Character:MoveTo(OriginalPosition)
                workspace.CurrentCamera.CameraSubject = Client.Character.Humanoid
                CamAnchorPart:Destroy()
                warn("Autobuy", "Bought", totalPurchased, "/", Quantity, ItemInfo.RealName .. "'s")
            end
            
            
            --#endregion

            --#region Get Axes
            function getAxes()
                local axes = {}
                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if v:IsA('Tool') and v.Name ~= 'BluePrintTool' then
                        table.insert(axes, v)
                    end
                end
                return axes
            end

            --#endregion

            --#region Clear Selected Items
            function clearItems()
                var.selectedItems = {}
                var.selectedWood = {}
                for i, v in pairs(game:GetService('Workspace').PlayerModels:GetChildren()) do
                    if v:FindFirstChild('SelectionBox') then
                        pcall(function() v.SelectionBox:Destroy() end)
                    end
                end
            end
            --#endregion

            --#region Anti-Kick
                
            --#endregion

            --#region AntiBan

            local OldNamecall; OldNamecall = hookmetamethod(game, "__namecall", function(...)
                local args = {...}
                if tostring(args[1]) == "AddLog" or tostring(args[1]) == "Ban" then return true end
                if getnamecallmethod() == "Kick" and not checkcaller() then wait(69e420) end
                return OldNamecall(...)
            end)

            for i, v in pairs(game:GetService("ReplicatedStorage").Interaction:GetChildren()) do
                if v.Name == "Ban" then
                    v:Destroy()
                end
            end
            if not game:GetService('ReplicatedStorage').Interaction:FindFirstChild('Ban') then
                updateStatus(antiBanRed, true)
            end


            warn('Fusion Anti-Kick Loaded...')
            warn('Fusion Anti-Ban Loaded...')
            updateStatus(antiKickRed, true)
            --#endregion
            
            --#region CheckAxe
            function checkAxe()
                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if v:IsA("Tool") and v.Name ~= "BlueprintTool" then
                        return true
                    end
                end
                return false
            end
            --#endregion

            ------------------------------------------------------------------#Credits Tab
            --#region Credits Setup
            cat.credit = Main:CreateCategory("Credits")
            sec.close = cat.credit:CreateSection("Settings")
            --#endregion

            --#region Discord Elite Server
    
            sec.close:Create('Button', 'Join Special Discord Server',
                function()
                    joinDiscord("kA4VfGQkty")
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will let you join the elite buyers discord server.'
                }
            )
            
            --#endregion

            --#region Show Hide GUI
            sec.close:Create('Keybind', 'Show/Hide Gui',
                function()
                    library.ui.Enabled = not library.ui.Enabled
                end,
                {
                    Flag = 'ShowHideGuiFlag',
                    Description = 'Temporarily show or hide the gui window from view.',
                    Default = Enum.KeyCode[GuiSettings.ShowHideGuiFlag]
                }
            )
            --#endregion

            --#region Spook fog
            sec.close:Create('Button', 'Remove Spook Fog',
                function()
                    if var.SpookValue then var.SpookValue:Disconnect() end
                    for i,v in pairs (game.Lighting:GetChildren()) do 
                        if v.Name == "ColorCorrection" then v:Destroy() end 
                    end
                    var.SpookValue = game:GetService("RunService").RenderStepped:Connect(function()
                        if game.Lighting.Spook.Value then game.Lighting.Spook.Value = false end
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This removes the fog that is created during the Halloween season.'
                }
            )
            --#endregion

            --#region Teleport Key
            sec.close:Create('Keybind', 'Teleport Key',
                function()

                end,
                {
                    Flag = 'TeleportKeyFlag',
                    Description = 'The button you push and click the ground to teleport around the map.',
                    Default = Enum.KeyCode[GuiSettings.TeleportKeyFlag]
                }
            )
            --#endregion

            --#region Rejoin Game
            sec.close:Create('Button', 'Rejoin Game',
                function()
                    game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
                end,
                {
                    Description = 'Rejoin the game you are playing.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Close Script
            sec.close:Create("Button", "Close Script",
                function()
                    if syn and syn.protect_gui then
                        syn.unprotect_gui(library.ui)
                    end
                    library.ui:Destroy()
                end,
                {
                    Description = "Makes the GUI disappear and no longer usable.",
                    BtnText = "Close"
                }
            )
            --#endregion

            --#region Show Control Panel
            var.conHide = false
            sec.close:Create('Keybind', 'Close Control Panel',
                function()
                    var.conHide = not var.conHide
                    if game.CoreGui:FindFirstChild('StatusWindow') then
                        game.CoreGui.StatusWindow.Enabled = var.conHide
                    end
                end,
                {
                    Flag = 'ControlPanelFlag',
                    Description = 'Hides and shows the control panel.',
                    Default = Enum.KeyCode[GuiSettings.ControlPanelFlag]
                }
            )
            --#endregion

            --#region Credits
            
            sec.dev = cat.credit:CreateSection("Developers")

            sec.dev:Create("Label", "Developer - Cynical Modder")
            sec.dev:Create('Label', 'Secondary Dev - Project いち')
            sec.dev:Create("Label", "UI Lib Creator - 0x37")
            sec.dev:Create('Label', 'Game Themes - Cadence')
            sec.dev:Create('Label', 'Holloween Game Theme - Boi79')
            sec.dev:Create('Label', 'Wire through wall - HyperNite')

            sec.assist = cat.credit:CreateSection("Other Script Credits")
            sec.assist:Create('Label', 'Script Assistant - 0x37')
            sec.assist:Create('Label', 'Script Assistant - Soma')
            sec.assist:Create('Label', 'Script Assistant - Cyclically')
            sec.assist:Create("Label", "Script Assistant - Applebee")
            sec.assist:Create("Label", "Script Assistant - dogix")
            --#endregion

            --#region --------------------------------------------------------#Teleports Tab
            --#region Teleports Setup
            cat.tele = Main:CreateCategory("Teleports")
            sec.locs = cat.tele:CreateSection("Location Teleports")
            sec.plrs = cat.tele:CreateSection("Player Teleports")
            sec.troll = cat.tele:CreateSection('Player Trolling')
            --#endregion

            --#region Stores
            con.teleSel = nil
            con.teleLocs = {"Woods r' Us", 'Land Store', 'Fancy Furnishings', 'Links Logic', 'Boxed Cars', 'Fine Arts', "Bob's Shack", 'Birch', 'Cave Crawler', 'Cherry', 'Frost', 'Koa', 'Lava', 'Palm', 'Pine / Fir', 'Snow Glow', 'Swamp', 'Walnut', 'The Den', 'Shrine of Sight', 'Ski Lodge', 'Dock', 'Bridge', 'Strange Man', 'Volcano Win', 'Light House', 'Twitter Bird', 'Spawnpoint'}
            con.teleCoords = {Vector3.new(268.4, 3.2, 52.1), Vector3.new(250, 3, -99), Vector3.new(491, 13, -1720), Vector3.new(4607, 9, -798), Vector3.new(508.5, 3.2, -1462.7), Vector3.new(5207, -156, 719), Vector3.new(260, 10, -2542), Vector3.new(-395.5, 244.8, 1275.4), Vector3.new(3488.1, -199.8, 519.1), Vector3.new(220.9, 59.8, 1305.8), Vector3.new(1448.3, 413, 3185.2), Vector3.new(5022.4, 6.1, -503.1), Vector3.new(-1585, 622, 1140), Vector3.new(2549, -5, -42), Vector3.new(1284.9, 59.8, 2136.1), Vector3.new(-1105.9, -6, -894), Vector3.new(-1209, 132, -801), Vector3.new(-282.3, 8, -1555.8), Vector3.new(323, 49, 1930), Vector3.new(-1600, 205, 919), Vector3.new(1244, 66, 2306), Vector3.new(1114, 3.2, -197), Vector3.new(113, 15, -977), Vector3.new(1061, 20, 1131), Vector3.new(-1675, 358, 1476), Vector3.new(1464.8, 356.3, 3257.2), Vector3.new(4813.1, 33.5, -978.8), Vector3.new(155, 5, 74)}
            con.teleType = sec.locs:Create('Dropdown', 'Teleport Type',
                function(selected)
                    if selected == 'Stores' then
                        con.teleSel:Refresh({"Woods r' Us", 'Land Store', 'Fancy Furnishings', 'Links Logic', 'Boxed Cars', 'Fine Arts', "Bob's Shack"})
                    elseif selected == 'Tree Biomes' then
                        con.teleSel:Refresh({'Birch', 'Cave Crawler', 'Cherry', 'Frost', 'Koa', 'Lava', 'Palm', 'Pine / Fir', 'Snow Glow', 'Swamp', 'Walnut'})
                    elseif selected == 'Points of Interest' then
                        con.teleSel:Refresh({'The Den', 'Shrine of Sight', 'Ski Lodge', 'Dock', 'Bridge', 'Strange Man', 'Volcano Win', 'Light House', 'Twitter Bird', 'Spawnpoint'})
                    end
                end,
                {
                    Flag = 'TeleportTypeFlag',
                    Options = {'Stores', 'Tree Biomes', 'Points of Interest'},
                    Description = "Choose the type of teleport you're wanting."
                }
            )
            --#endregion

            --#region Teleport Locations
            con.teleSel = sec.locs:Create('Dropdown', 'Teleport Location',
                function(selected)
                    local plrMove = con.teleCoords[table.find(con.teleLocs, selected)]
                    game.Players.LocalPlayer.Character:MoveTo(plrMove)
                end,
                {
                    Flag = 'TeleportLocFlag',
                    Options = ({"Woods r' Us", 'Land Store', 'Fancy Furnishings', 'Links Logic', 'Boxed Cars', 'Fine Arts', "Bob's Shack"}),
                    Description = 'Choose the location you want to teleport to.'
                }
            )
            --#endregion

            --#region Teleport to Player
            sec.plrs:Create("Dropdown", "Teleport to Player", 
                function(selected)
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players[selected].Character.HumanoidRootPart.CFrame.p) + Vector3.new(0, 3, 0)
                end,
                {
                    Flag = 'PlayerTeleportFlag',
                    PlayerList = true,
                    Description = 'Selecting a player will teleport you to their location.'
                }
            )
            --#endregion

            --#region Teleport to players base
            sec.plrs:Create("Dropdown", "Teleport to Player's Base.", 
                function(selected)
                    for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                        if v:FindFirstChild('Owner') and v.Owner.Value == game.Players[selected] then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0, 3, 0)
                            return
                        end
                    end
                    SendNotification('That player does not have a base loaded.')
                end,
                {
                    Flag = 'PlayerBaseTeleportFlag',
                    PlayerList = true,
                    ShowLocalPlayer = true,
                    Description = 'Teleports you to the selected players base location.'
                }
            )
            --#endregion

            --#region Kick Player
            var.trollPlayer = nil
            
            
        function KickPlayer(player)
            if checkAxe() then
                var.Axe = nil
                var.CurLoc = var.plr.Character.HumanoidRootPart.CFrame
                var.plr.Character.Humanoid.Name = "SnotRocket"
                var.Clone = var.plr.Character.SnotRocket:Clone()
                var.Clone.Name = "Humanoid"
                var.Clone.Parent = var.plr.Character

                wait(0.1)
                var.plr.Character.SnotRocket:Destroy()
                for i, v in pairs(var.plr.Backpack:GetChildren()) do
                    if v:IsA("Tool") and v.Name ~= "BlueprintTool" then
                        var.Axe = v
                        break
                    end
                end
                if var.Axe == nil then
                    SendNotification("Cynical Script 2", "You need an axe to perform this function.", 5)
                else
                    var.plr.Character.Humanoid:EquipTool(var.Axe)
                    var.Axe.Owner:Destroy()
                    wait(1)
                    for i = 1, 20 do
                        var.plr.Character.HumanoidRootPart.CFrame = game.Players[player].Character.HumanoidRootPart.CFrame
                        wait(0.000001)
                    end
                    wait(0.30)
                    var.plr.CharacterAdded:wait()
                    wait(1)
                    var.plr.Character.HumanoidRootPart.CFrame = var.CurLoc
                end
            else
                SendNotification("Cynical Script 2", "You need an axe to perform this functoin.", 5)
            end
        end

            sec.troll:Create('Dropdown', 'Troll Player',
                function(selected)
                    var.trollPlayer = selected
                end,
                {
                    Flag = 'SelectPlayerFlag',
                    Description = 'List of players to choose from.',
                    PlayerList = true,
                    ShowLocalPlayer = false
                }
            )

            sec.troll:Create('Button', 'Kick Player',
                function()
                    if var.trollPlayer then
                        KickPlayer(var.trollPlayer)
                    else
                        SendNotification('You need to select a player to kick them.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Kick the selected player.'
                }
            )
            --#endregion

            --#region --------------------------------------------------------#World Tab
            --#region World Setup
            cat.world = Main:CreateCategory('World')
            sec.env = cat.world:CreateSection('Environment')
            sec.wor = cat.world:CreateSection('Structures')
            sec.misc = cat.world:CreateSection('Misc Options')
            --#endregion

            --#region Day Night
            sec.env:Create("Dropdown", "Day/Night",
                function(selected)
                    if ren then ren:Disconnect() end
                    if selected == 'Always Day No Fog' then
                        timeFog('11:30:00', false, true)
                        var.EnvBright.Visible = true
                    elseif selected == 'Always Day Fog' then
                        timeFog('11:30:00', true, true)
                        var.EnvBright.Visible = true
                    elseif selected == 'Always Night No Fog' then
                        timeFog('01:30:00', false, true)
                        var.EnvBright.Visible = true
                    elseif selected == 'Always Night Fog' then
                        timeFog('01:30:00', true, true)
                        var.EnvBright.Visible = true
                    elseif selected == 'No Fog' then
                        timeFog(nil, false, true)
                        game.Lighting.Brightness = 0.8
                        var.EnvBright.Visible = false
                    elseif selected == 'Off' then
                        if ren then ren:Disconnect() end
                        game.Lighting.Brightness = 0.8
                        var.EnvBright.Visible = false
                    end
                end,
                {
                    Flag = 'DayNightFlag',
                    Options = {'Off', 'Always Day No Fog', 'Always Day Fog', 'Always Night No Fog', 'Always Night Fog', 'No Fog'},
                    Description = 'Choose an option to turn day or night on or off.'
                }
            )
            --#endregion

            --#region Environment Brightness
            var.EnvBright = sec.env:Create("Slider", "Environment Brightness",
                function(value)
                    var.dayBrightness = value
                end,
                {
                    Flag = "DayBrightnessFlag",
                    Description = 'Changes the brightness of the environment.',
                    Min = 0,
                    Default = 2,
                    Max = 5,
                    Precise = true
                }
            )
            var.EnvBright.Visible = false
            --#endregion

            --#region Full Ambience
            sec.env:Create('Toggle', 'Full Ambience',
                function(state)
                    if state == true then
                        for index, types in pairs(lighting_table) do
                            types.outdoorAmbientMax=Vector3.new(255,255,255)
                            types.outdoorAmbientMin=Vector3.new(255,255,255)
                            types.ambient=Vector3.new(255,255,255)
                        end
                    else
                        for index, types in pairs(lighting_table) do
                            types.outdoorAmbientMax = var.original[index].outdoorAmbientMax
                            types.outdoorAmbientMin = var.original[index].outdoorAmbientMin
                            types.ambient = var.original[index].ambient
                        end
                    end
                end,
                {
                    Flag = 'AmbienceFlag',
                    Description = 'Turns on or off game Ambience.',
                }
            )
            library:UpdateToggle('AmbienceFlag', GuiSettings['AmbienceSetting'])
            --#endregion

            --#region Water Settings
            sec.env:Create('Dropdown', 'Water Settings',
                function(selected)
                    if selected == 'Proper Water' then
                        fixWater(false, 0)
                    elseif selected == 'Walk on Water' then
                        fixWater(true, 0)
                    elseif selected == 'Remove Water' then
                        fixWater(false, 1)
                    end
                end,
                {
                    Flag = 'WaterSettingsFlag',
                    Options = {'Proper Water', 'Walk on Water', 'Remove Water'},
                    Description = 'Either walk on water, remove the water, or leave it be.'
                }
            )
            --#endregion

            --#region Snow Boulders
            sec.wor:Create("Button", "Snow Boulders",
                function()
                    for i, v in pairs(game.Workspace.Region_Snow:FindFirstChild("PartSpawner"):GetChildren()) do
                        v:Destroy()
                    end
                end,
                {
                    Description = 'Delete the boulders that blocks the path to the snow area.',
                    BtnText = 'Delete'
                }
            )
            --#endregion

            --#region Shrine Doors
            sec.wor:Create("Button", "Shrine Doors",
                function()
                    game.Workspace.Region_Mountainside.BoulderRegen.Boulder:Destroy()
                    game.Workspace.Region_Mountainside.Door.Door:Destroy()  
                end,
                {
                    Description = 'Delete the doors to the shrine',
                    BtnText = 'Delete'
                }
            )
            --#endregion

            --#region Maze Walls
            sec.wor:Create("Button", 'Maze Walls',
                function()
                    for i, v in pairs(game.Workspace.Region_MazeCave.Blockade:GetChildren()) do
                        v:Destroy()
                    end
                end,
                {
                    Description = 'Delete the maze walls that rotate every week.',
                    BtnText = 'Delete'
                }
            )
            --#endregion

            --#region Lower the Bridge
            sec.wor:Create('Toggle', 'Lower the Bridge',
                function(state)
                    if state == true then
                        for i, v in pairs(game.workspace.Bridge.VerticalLiftBridge.Lift:GetChildren()) do
                            v.CFrame = v.CFrame + Vector3.new(0, -26, 0)
                        end
                        for i, v in pairs(game:GetService("Workspace").Bridge.VerticalLiftBridge.Weight:GetChildren()) do
                            v.CFrame = v.CFrame + Vector3.new(0, 26, 0)
                        end 
                    else
                        for _,v in pairs(game.workspace.Bridge.VerticalLiftBridge.Lift:GetChildren()) do
                            v.CFrame = v.CFrame + Vector3.new(0, 26, 0)
                        end
                        for i, v in pairs(game:GetService("Workspace").Bridge.VerticalLiftBridge.Weight:GetChildren()) do
                            v.CFrame = v.CFrame + Vector3.new(0, -26, 0)
                        end 
                    end
                end,
                {
                    Flag = 'LowerBridgeFlag',
                    Description = 'Lower the bridge to allow you to cross. This is client side only. Other people will not see it.',
                }
            )
            --#endregion

            --#region Paid Bridge
            sec.wor:Create('Button', 'Paid Bridge',
                function()
                    if game.Players.LocalPlayer.leaderstats.Money.Value > 100 then
                        local PayBridge = Instance.new('BindableFunction', Workspace)
                        PayBridge.Name = 'Cynical_PayBridge'
                        PayBridge.OnInvoke = function(v)
                            var.counter = 10
                            if tostring(v) == 'Yes' then
                                local A_1 =
                                {
                                    ['Character']  = Workspace.Bridge.TollBooth0.Seranok,
                                    ['Name'] = 'Seranok',
                                    ['ID'] = 7,
                                    ['Dialog'] = workspace.Bridge.TollBooth0.Seranok.Dialog
                                }
                                local A_2 = 'ConfirmPurchase'
                                local Event = game:GetService('ReplicatedStorage').NPCDialog.PlayerChatted
                                Event:InvokeServer(A_1, A_2)
                            end
                        end
                        game.StarterGui:SetCore('SendNotification', {
                            Title = 'Cynical V3',
                            Text = 'Are you sure you want to pay $100?',
                            Icon = 'rbxassetid://6243863672',
                            Duration = 10,
                            Button1 = 'Yes',
                            Button2 = 'No',
                            Callback = PayBridge
                        })
                        repeat
                            wait(1)
                            var.counter = var.counter + 1
                        until var.counter >= 10
                        PayBridge:Destroy()
                    else
                        SendNotification()
                    end
                end,
                {
                    Description = 'If you have 100 money it will lower the bridge for 3 minutes each time you press it.',
                    BtnText = 'Pay'
                }
            )
            --#endregion

            --#region Leaked Items
            sec.misc:Create('Toggle', 'Leaked Items', 
                function(state)
                    if state then
                        game.ReplicatedStorage.Purchasables:Clone().Parent = game.Workspace.PlayerModels
                    else
                        for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                            if not v:FindFirstChild("Owner") then
                                v:Destroy()
                                wait()
                            end
                        end
                    end
                end,
                {
                    Flag = 'LeakedItemsFlag',
                    Description = 'Show or Hide all available items in game. Viewable only, you cannot keep them.',
                }
            )
            --#endregion

            --#region bTools
            sec.misc:Create('Toggle', 'bTools',
                function(state)
                    if state then
                        loadstring(game:HttpGetAsync("https://pastebin.com/raw/Lf1ySa1m"))()
                    else
                        rembTools()
                    end
                end,
                {
                    Flag = 'bToolsFlag',
                    Description = 'Adds the bTools to your backpack for use.',
                }
            )
            --#endregion

            --#region World Themes
            sec.misc:Create('Dropdown', 'World Themes', 
                function(selected)
                    if var.spawnBldrs then
                        var.spawnBldrs:Disconnect()
                    end
                    if selected == 'Autumn Theme' then
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == "LeafPart" then
                                local randLeafColor = math.random(1, 12)
                                if randLeafColor == 1 then
                                    v.BrickColor = BrickColor.new(1009)
                                elseif randLeafColor == 2 then
                                    v.BrickColor = BrickColor.new(341)
                                elseif randLeafColor == 3 then
                                    v.BrickColor = BrickColor.new(191)
                                elseif randLeafColor == 4 then
                                    v.BrickColor = BrickColor.new(28)
                                elseif randLeafColor == 5 then
                                    v.BrickColor = BrickColor.new(48)
                                elseif randLeafColor == 6 then
                                    v.BrickColor = BrickColor.new(304)
                                    if v.Parent.Parent.TreeClass.Value ~= "Koa" then
                                        local HP = math.random(1, 500)
                                        if var.gotPink == false then
                                            if HP == 500 then
                                                v.BrickColor = BrickColor.new("Hot pink")
                                                var.gotPink = true
                                                var.pinkLeaf = v.CFrame
                                                SendNotification('There is a pink leaf in your map. Try and find it!')
                                            end
                                        end
                                    end
                                elseif randLeafColor == 7 then
                                    v.BrickColor = BrickColor.new(327)
                                elseif randLeafColor == 8 then
                                    v.BrickColor = BrickColor.new(21)
                                elseif randLeafColor == 9 then
                                    v.BrickColor = BrickColor.new(1004)
                                elseif randLeafColor == 10 then
                                    v.BrickColor = BrickColor.new(1005)
                                elseif randLeafColor == 11 then
                                    v.BrickColor = BrickColor.new(193)
                                elseif randLeafColor == 12 then
                                    v.BrickColor = BrickColor.new(12)
                                end
                            end
                        end
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == "Ground" or (v.Name == "Wedge" and v.Parent.Name == "Region_Mountainside") then
                                v.BrickColor = BrickColor.new("Dark orange")
                            end
                        end
                    elseif selected == 'Willy Wonka Theme' then
                        for i, v in pairs(game.Workspace.Water:GetChildren()) do
                            if v.Name == "Water" then
                                v.BrickColor = BrickColor.new("Reddish brown")
                            end
                        end
                        game.Workspace.Bridge.VerticalLiftBridge.WaterModel:FindFirstChild("Water").BrickColor = BrickColor.new("Reddish brown")
                        for i, v in pairs(game.Workspace.Ferry.Ferry:GetDescendants()) do
                            if v.Name == "TopSurface" or v.Name == "Wedge" or v.Name == "Union" or v.Name == "Part" then
                                v.BrickColor = BrickColor.new("Maroon")
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Main:GetChildren()) do
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Pastel yellow") 
                                v.Material = Enum.Material.Cobblestone
                            end
                            if v.Name == "Wedge" or v.Name == "Union" then
                                v.BrickColor = BrickColor.new("Dark blue")
                                v.Material = Enum.Material.Granite
                            end
                            if v.Name == "BoulderRegen" then
                                v.Boulder.BrickColor = BrickColor.new("White")
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Swamp:GetChildren()) do
                            if v.Name == "SwampWater" then
                                v.BrickColor = BrickColor.new("Rust") 
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Mountainside:GetChildren()) do
                            if v.Name == "Road" then
                                if v.Size ~= Vector3.new(90.2, 67.8, 270) and v.Size ~= Vector3.new(163.2, 60.4, 192.8) then
                                    v.BrickColor = BrickColor.new("Pastel yellow") 
                                    v.Material = Enum.Material.Cobblestone
                                end
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Plains:GetChildren()) do
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Pastel yellow") 
                                v.Material = Enum.Material.Cobblestone
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_SnowPeak:GetChildren()) do
                            if v.Name == "Road" or v.Name == "SteepSlope" or v.Name == "Wedge" then
                                v.BrickColor = BrickColor.new("Dark blue")
                                v.Material = Enum.Material.Granite
                            end
                            if v.Name == "Ramp" then
                                for e, t in pairs(v:GetChildren()) do
                                    t.BrickColor = BrickColor.new("Dark blue")
                                    t.Material = Enum.Material.Granite
                                end
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Snow:GetChildren()) do
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Dark blue")
                                v.Material = Enum.Material.Granite
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Volcano:GetDescendants()) do
                            if v.Name == "LavaLayer" then
                                v.BrickColor = BrickColor.new("Eggplant")
                            end
                            if v.Name == "Wedge" or v.Name == "Slate" or v.Name == "Part" then
                                if v.BrickColor == BrickColor.new("Dark stone grey") then
                                    v.BrickColor = BrickColor.new("Mauve")
                                end
                            end
                        end
                        for i, v in pairs(game.Workspace.Region_Volcano:GetChildren()) do
                            if v.Name == "Lava" then
                                v:FindFirstChild("Lava").BrickColor = BrickColor.new("Magenta")
                            end
                        end
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == "Ground" or (v.Name == "Wedge" and v.Parent.Name == "Region_Mountainside") then
                                v.BrickColor = BrickColor.new("Camo")
                            elseif v.Name == "Slate" and v.Parent.Name ~= "Region_Volcano" then
                                v.BrickColor = BrickColor.new("Dark blue")
                                v.Material = Enum.Material.Granite
                            end
                            if v.Name == "WoodSection" then
                                if v.Parent:FindFirstChild("TreeClass") then
                                    if v.Parent.TreeClass.Value == "Volcano" then
                                        v.BrickColor = BrickColor.new("Hot pink")
                                    elseif v.Parent.TreeClass.Value == "Koa" then
                                        v.BrickColor = BrickColor.new("Pastel violet")
                                    elseif v.Parent.TreeClass.Value == "Oak" then
                                        v.BrickColor = BrickColor.new("Bright red")
                                    elseif v.Parent.TreeClass.Value == "GreenSwampy" or v.Parent.TreeClass.Value == "Generic" then
                                        v.BrickColor = BrickColor.new("Institutional white")
                                    elseif v.Parent.TreeClass.Value == "Walnut" then
                                        v.BrickColor = BrickColor.new("Camo")
                                    elseif v.Parent.TreeClass.Value == "Birch" then
                                        v.BrickColor = BrickColor.new("Really black")
                                    elseif v.Parent.TreeClass.Value == "CaveCrawler" then
                                        v.BrickColor = BrickColor.new("Lime green")
                                    elseif v.Parent.TreeClass.Value == "GoldSwampy" then
                                        v.BrickColor = BrickColor.new("Really red")
                                    elseif v.Parent.TreeClass.Value == "Pine" or v.Parent.TreeClass.Value == "Fir" then
                                        v.BrickColor = BrickColor.new("Burnt sienna")
                                    elseif v.Parent.TreeClass.Value == "Palm" then
                                        v.BrickColor = BrickColor.new("Electric blue")
                                    end
                                end
                            elseif v.Name == "LeafPart" then   
                                if v.Parent.Parent:FindFirstChild("TreeClass").Value == "Generic" then
                                    var.genLeaves = math.random(1, 3)
                                    if var.genLeaves == 1 then
                                        v.BrickColor = BrickColor.new("Mauve")
                                        v.Shape = Enum.PartType.Ball
                                    elseif var.genLeaves == 2 then
                                        v.BrickColor = BrickColor.new("Eggplant")
                                        v.Shape = Enum.PartType.Ball
                                    elseif var.genLeaves == 3 then
                                        v.BrickColor = BrickColor.new("Carnation pink")
                                        v.Shape = Enum.PartType.Ball
                                    end
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Palm" then
                                    var.genLeaves = math.random(1, 6)
                                    if var.genLeaves == 1 then
                                        v.BrickColor = BrickColor.new(1004)
                                    elseif var.genLeaves == 2 then
                                        v.BrickColor = BrickColor.new(1009)
                                    elseif var.genLeaves == 3 then
                                        v.BrickColor = BrickColor.new(1020)
                                    elseif var.genLeaves == 4 then
                                        v.BrickColor = BrickColor.new(1010)
                                    elseif var.genLeaves == 5 then
                                        v.BrickColor = BrickColor.new(1)
                                    elseif var.genLeaves == 6 then
                                        v.BrickColor = BrickColor.new(1005)
                                    end
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Volcano" then
                                    v.BrickColor = BrickColor.new("Pink")
                                    v.Shape = Enum.PartType.Ball
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Koa" then
                                    v.BrickColor = BrickColor.new("Bright yellow")
                                    v.Shape = Enum.PartType.Ball 
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Birch" then
                                    v.BrickColor = BrickColor.new("Toothpaste")
                                    v.Shape = Enum.PartType.Ball 
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Walnut" then
                                    v.BrickColor = BrickColor.new("Dark orange")
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "CaveCrawler" then
                                    v.BrickColor = BrickColor.new("Institutional white")
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "PineBranch" or v.Parent.Parent:FindFirstChild("TreeClass").Value == "Pine" then
                                    v.BrickColor = BrickColor.new("White")
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "FirBranch" or v.Parent.Parent:FindFirstChild("TreeClass").Value == "Fir" then
                                    v.BrickColor = BrickColor.new("Really black")    
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Oak" then
                                    v.BrickColor = BrickColor.new("Really red")
                                    v.Shape = Enum.PartType.Ball 
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "GreenSwampy" then
                                    v.BrickColor = BrickColor.new("Olive")
                                elseif v.Parent.Parent:FindFirstChild("TreeClass").Value == "Cherry" then
                                    v.Shape = Enum.PartType.Ball 
                                end
                            
                            end
                        end
                        var.spawnBldrs = Workspace.Region_Volcano:FindFirstChild("PartSpawner").ChildAdded:Connect(function(child)
                            if child.Name == "Part" and child.Parent.Name == "PartSpawner" then
                                var.randLeafColor = math.random(1, 5)
                                if var.randLeafColor == 1 then
                                    child.BrickColor = BrickColor.new(1028)
                                elseif var.randLeafColor == 2 then
                                    child.BrickColor = BrickColor.new(1029)
                                elseif var.randLeafColor == 3 then
                                    child.BrickColor = BrickColor.new(1024)
                                elseif var.randLeafColor == 4 then
                                    child.BrickColor = BrickColor.new(1026)
                                elseif var.randLeafColor == 5 then
                                    child.BrickColor = BrickColor.new(1025)
                                end
                            end
                        end)
                    elseif selected == 'Pink Passion' then
                        for i, v in pairs(game.Workspace.Water:GetChildren()) do
                            if v.Name == "Water" then
                                v.BrickColor = BrickColor.new("Lavender")
                            end
                        end
                        wait()
                        game.Workspace.Bridge.VerticalLiftBridge.WaterModel:FindFirstChild("Water").BrickColor = BrickColor.new("Lavender")
                        for i, v in pairs(game.Workspace.Ferry.Ferry:GetDescendants()) do
                            if v.Name == "TopSurface" or v.Name == "Wedge" or v.Name == "Union" or v.Name == "Part" or v.Name == "Lamp" then
                                v.BrickColor = BrickColor.new("Mulberry")
                            end
                        end
                        wait()
                        for i,v in pairs(game:GetService("Workspace").Region_Tropics.Dock:GetChildren()) do
                            v.BrickColor = BrickColor.new("Mulberry")
                        end
                        wait()
                        for i,v in pairs(game:GetService("Workspace").Region_Main.Dock:GetChildren()) do
                            v.BrickColor = BrickColor.new("Mulberry")
                        end
                        wait()
                        for i,v in pairs(game:GetService("Workspace").Region_Swamp.BoulderRegen:GetChildren()) do
                            if v.Name == "NOTA_Boulder" then
                                v.BrickColor = BrickColor.new("Lilac")
                            end
                        end
                        wait()
                        for i,v in pairs(game:GetService("Workspace").Region_Mountainside.SlabRegen.Slab:GetChildren()) do
                            if v.Name == "PushMe" then
                                v.BrickColor = BrickColor.new("Lilac")
                            end
                        end
                        wait()
                        for i, v in pairs(game:GetService("Workspace").Stores.ShackShop:GetChildren()) do
                            if v.Name == "Floor" then
                                v.BrickColor = BrickColor.new("Mulberry")
                            end
                        end
                        wait()
                        for i, v in pairs(game:GetService("Workspace").Stores.ShackShop.Parts:GetChildren()) do
                            if v.Name == "Part" or v.Name == "Wedge" then
                                v.BrickColor = BrickColor.new("Carnation pink")
                            end
                        end
                        wait()
                        for i, v in pairs(game:GetService("Workspace").Region_Snow.PartSpawner:GetChildren()) do
                            if v.Name == "Boulder" then
                                spawn(function()
                                    local randNum = math.random(1, 6)
                                    if randNum == 1 then
                                        v.BrickColor = BrickColor.new(330)
                                    elseif randNum == 2 then
                                        v.BrickColor = BrickColor.new(1016)
                                    elseif randNum == 3 then
                                        v.BrickColor = BrickColor.new(1032)
                                    elseif randNum == 4 then
                                        v.BrickColor = BrickColor.new(321)
                                    elseif randNum == 5 then
                                        v.BrickColor = BrickColor.new(198)
                                    elseif randNum == 6 then
                                        v.BrickColor = BrickColor.new(158)
                                    end
                                end)
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_SandIslands:GetChildren()) do
                            if v.Name == "Ground" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Main:GetChildren()) do
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Pink") 
                            end
                            if v.Name == "Wedge" or v.Name == "Union" then
                                v.BrickColor = BrickColor.new("Sunrise")
                            end
                            if v.Name == "BoulderRegen" then
                                v.Boulder.BrickColor = BrickColor.new("Lilac")
                            end
                            if v.Name == "Part" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                            if v.Name == "Pebble" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                            if v.Name == "Sand" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Tropics:GetChildren()) do
                            if v.Name == "Sand" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Mulberry")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_SnowPeak:GetChildren()) do
                            if v.Name == "Road" or v.Name == "SteepSlope" or v.Name == "Wedge" then
                                v.BrickColor = BrickColor.new("Sunrise")
                            end
                            if v.Name == "Ramp" then
                                for e, t in pairs(v:GetChildren()) do
                                    t.BrickColor = BrickColor.new("Lilac")
                                end
                            end
                            if v.Name == "Snow" then
                                v.BrickColor = BrickColor.new("Mauve")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Swamp:GetChildren()) do
                            if v.Name == "SwampWater" then
                                v.BrickColor = BrickColor.new("Mulberry") 
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Mountainside:GetChildren()) do
                            if v.Name == "Road" then
                                if v.BrickColor == BrickColor.new("Brick yellow") then
                                    v.BrickColor = BrickColor.new("Pink")
                                elseif v.BrickColor == BrickColor.new("Brown") then
                                    v.BrickColor = BrickColor.new("Lilac")
                                end 
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Plains:GetChildren()) do
                            if v.Name == "Read" then
                                v.BrickColor = BrickColor.new("Pink")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Snow:GetChildren()) do
                            if v.Name == "Road" then
                                v.BrickColor = BrickColor.new("Sunrise")
                            end
                            if v.Name == "Boulder" then
                                v.BrickColor = BrickColor.new("Mullberry")
                            end
                            if v.Name == "Snow" then
                                v.BrickColor = BrickColor.new("Light reddish violet")
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Volcano:GetDescendants()) do
                            if v.Name == "LavaLayer" then
                                v.BrickColor = BrickColor.new("Magenta")
                            end
                            if v.Name == "Wedge" or v.Name == "Slate" or v.Name == "Part" then
                                if v.BrickColor == BrickColor.new("Dark stone grey") then
                                    v.BrickColor = BrickColor.new("Mauve")
                                end
                            end
                        end
                        wait()
                        for i, v in pairs(game.Workspace.Region_Volcano:GetChildren()) do
                            if v.Name == "Lava" then
                                v:FindFirstChild("Lava").BrickColor = BrickColor.new("Magenta")
                            end
                        end
                        wait()
                        --#region Mountainside
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == "Ground" or (v.Name == "Wedge" and v.Parent.Name == "Region_Mountainside") then
                                v.BrickColor = BrickColor.new("Mauve")
                            elseif v.Name == "Slate" and v.Parent.Name ~= "Region_Volcano" then
                                v.BrickColor = BrickColor.new("Lilac")
                            end
                        end
                        wait()
                        --#endregion
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == 'LeafPart' then
                                local randNum = math.random(1, 6)
                                if randNum == 1 then
                                    v.BrickColor = BrickColor.new(330)
                                elseif randNum == 2 then
                                    v.BrickColor = BrickColor.new(1016)
                                elseif randNum == 3 then
                                    v.BrickColor = BrickColor.new(1032)
                                elseif randNum == 4 then
                                    v.BrickColor = BrickColor.new(321)
                                elseif randNum == 5 then
                                    v.BrickColor = BrickColor.new(198)
                                elseif randNum == 6 then
                                    v.BrickColor = BrickColor.new(158)
                                end
                            end
                            if v.Name == "WoodSection" then
                                if v.Parent:FindFirstChild("TreeClass") then
                                    if v.Parent.TreeClass.Value == "Volcano" then
                                        v.BrickColor = BrickColor.new(330)
                                    elseif v.Parent.TreeClass.Value == "Koa" then
                                        v.BrickColor = BrickColor.new(1016)
                                    elseif v.Parent.TreeClass.Value == "Oak" then
                                        v.BrickColor = BrickColor.new(1032)
                                    elseif v.Parent.TreeClass.Value == "GreenSwampy" or v.Parent.TreeClass.Value == "Generic" then
                                        v.BrickColor = BrickColor.new(321)
                                    elseif v.Parent.TreeClass.Value == "Walnut" then
                                        v.BrickColor = BrickColor.new(198)
                                    elseif v.Parent.TreeClass.Value == "Birch" then
                                        v.BrickColor = BrickColor.new(158)
                                    elseif v.Parent.TreeClass.Value == "CaveCrawler" then
                                        v.BrickColor = BrickColor.new(330)
                                    elseif v.Parent.TreeClass.Value == "GoldSwampy" then
                                        v.BrickColor = BrickColor.new(321)
                                    elseif v.Parent.TreeClass.Value == "Pine" or v.Parent.TreeClass.Value == "Fir" then
                                        v.BrickColor = BrickColor.new(1016)
                                    elseif v.Parent.TreeClass.Value == "Palm" then
                                        v.BrickColor = BrickColor.new(198)
                                    elseif v.Parent.TreeClass.Value == "Cherry" then
                                        v.BrickColor = BrickColor.new(158)
                                    end
                                end
                            end
                        end
                        var.spawnBldrs = Workspace.Region_Volcano:FindFirstChild("PartSpawner").ChildAdded:Connect(function(child)
                            if child.Name == "Part" and child.Parent.Name == "PartSpawner" then
                                var.randLeafColor = math.random(1, 5)
                                if var.randLeafColor == 1 then
                                    child.BrickColor = BrickColor.new(158)
                                elseif var.randLeafColor == 2 then
                                    child.BrickColor = BrickColor.new(198)
                                elseif var.randLeafColor == 3 then
                                    child.BrickColor = BrickColor.new(330)
                                elseif var.randLeafColor == 4 then
                                    child.BrickColor = BrickColor.new(1016)
                                elseif var.randLeafColor == 5 then
                                    child.BrickColor = BrickColor.new(321)
                                end
                            end
                        end)
                    elseif selected == 'Winter Theme' then
                        for i, v in pairs(game.Workspace:GetDescendants()) do
                            --wait()
                            if v.Name == "LeafPart" then
                                v.BrickColor = BrickColor.new(1001)
                            end
                            if v.Name == "Ground" or (v.Name == "Wedge" and v.Parent.Name == "Region_Mountainside") then
                                v.BrickColor = BrickColor.new(50)
                            end
                            if v.Name == "WoodSection" and v.Parent.Parent.Name == "TreeRegion" then
                                v.BrickColor = BrickColor.new(348)
                            end
                            if v.Name == "Slate" or (v.Name == "Wedge" and v.Parent.Name == "Region_Main") or(v.Name == "Road" and v.Parent.Name == "Region_Swamp") or (v.Name == "Road" and v.Parent.Name == "Region_Snow") or (v.Name == "Road" and v.Parent.Name == "Region_SnowPeak") or (v.Name == "Wedge" and v.Parent.Name == "Region_SnowPeak") or (v.Name == "Road" and v.Parent.Name == "Region_Mountainside") then
                                v.BrickColor = BrickColor.new(208)
                            end
                            if v.Name == "Road" and v.Parent.Name == "Region_Tropics" then
                                v.BrickColor = BrickColor.new(1027)
                            end
                            if v.Name == "Sand" and v.Parent.Name == "Region_Tropics" then
                                v.BrickColor = BrickColor.new(1018)
                            end
                            if v.Name == "Water" and v.Parent.Name == "Water" then
                                v.BrickColor = BrickColor.new(23)
                            end
                        end
                    elseif selected == 'Holloween Theme' then
                        for i, v in pairs(game.Workspace:GetDescendants()) do -- lava trees
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Volcano' then
                                v.BrickColor = BrickColor.new('Really black')
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Volcano' then
                                v.BrickColor = BrickColor.new('Deep orange')
                                v.Material = Enum.Material.Neon
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'LoneCave' then
                                v.BrickColor = BrickColor.new('Eggplant')
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'LoneCave' then
                                v.BrickColor = BrickColor.new('Med. yellowish green')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Generic' then
                                v.BrickColor = BrickColor.new('Light grey')
                                v.Material = Enum.Material.Glass
                                v.Shape = Enum.PartType.Ball
                                v.Transparency = 0.125
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Generic' then
                                v.BrickColor = BrickColor.new('Really black')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Cherry' then
                                v.BrickColor = BrickColor.new('Tr. Flu. Red')
                                v.Material = Enum.Material.Glass
                                v.Transparency = 0.3
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Cherry' then
                                v.BrickColor = BrickColor.new('Black metallic')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Oak' then
                                v.BrickColor = BrickColor.new('Light grey metallic')
                                v.Material = Enum.Material.Neon
                                v.Transparency = 0.89
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Oak' then
                                v.BrickColor = BrickColor.new('Sand green')
                                v.Material = Enum.Material.Foil
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'SnowGlow' then
                                v.BrickColor = BrickColor.new('Really black')
                                v.Transparency = 0.5
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'SnowGlow' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Palm' then
                                v.BrickColor = BrickColor.new('Really black')
                                v.Transparency = 0.5
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Palm' then
                                v.BrickColor = BrickColor.new('Light pink')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Koa' then
                                v.Material = Enum.Material.Glass
                                v.Shape = Enum.PartType.Ball
                                v.BrickColor = BrickColor.new('Quill grey')
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Koa' then
                                v.BrickColor = BrickColor.new('Mid grey')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'CaveCrawler' then
                                v.BrickColor = BrickColor.new('Really black')
                                v.Transparency = 0.5
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'CaveCrawler' then
                                v.BrickColor = BrickColor.new('Olive')
                                v.Transparency = 0.4
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Pine' then
                                v.BrickColor = BrickColor.new('Cocoa')
                                v.Transparency = 0.5
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Pine' then
                                v.BrickColor = BrickColor.new('Br. yellowish orange')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'PineBranch' then
                                v.BrickColor = BrickColor.new('Cocoa')
                                v.Transparency = 0.5
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'PineBranch' then
                                v.BrickColor = BrickColor.new('Br. yellowish orange')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Birch' then
                                v.BrickColor = BrickColor.new('Light blue')
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Birch' then
                                v.BrickColor = BrickColor.new('Dark grey')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Frost' then
                                v.BrickColor = BrickColor.new('Light blue')
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Frost' then
                                v.BrickColor = BrickColor.new('White')
                                v.Material = Enum.Material.Neon
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'GreenSwampy' then
                                v.BrickColor = BrickColor.new('Light blue')
                                v.Transparency = 0.8
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'GreenSwampy' then
                                v.Material = Enum.Material.ForceField
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'GoldSwampy' then
                                v.BrickColor = BrickColor.new('Light blue')
                                v.Transparency = 0.8
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'GoldSwampy' then
                                v.Material = Enum.Material.ForceField
                                v.BrickColor = BrickColor.new('Really black')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Walnut' then
                                v.BrickColor = BrickColor.new('Dark grey')
                                v.Transparency = 0.8
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Walnut' then
                                v.Material = Enum.Material.Fabric
                                v.BrickColor = BrickColor.new('Medium red')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'Spooky' then
                                v.BrickColor = BrickColor.new('Light purple')
                                v.Material = Enum.Material.Neon
                                v.Transparency = 0.8
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'Spooky' then
                                v.Material = Enum.Material.Neon
                                v.BrickColor = BrickColor.new('Light purple')
                            end
                            if v.Name == "LeafPart" and v.Parent.Parent:FindFirstChild('TreeClass') and v.Parent.Parent.TreeClass.Value == 'SpookyGlow' then
                                v.BrickColor = BrickColor.new('Light purple')
                                v.Material = Enum.Material.Neon
                                v.Transparency = 0.8
                            end
                            if v.Name == "WoodSection" and v.Parent:FindFirstChild('TreeClass') and v.Parent.TreeClass.Value == 'SpookyGlow' then
                                v.Material = Enum.Material.Neon
                                v.BrickColor = BrickColor.new('Light purple')
                            end
                            if v.Name == "Ground" and v.Parent.Name == 'Region_Mountainside' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')
                            end
                            if v.Name == "Ground" and v.Parent.Name == 'Region_Main' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')   
                            end
                            if v.Name == "Road" and v.Parent.Parent.Name == 'Workspace' then
                                v.BrickColor = BrickColor.new('Slime green')
                            end
                            if v.Name == "Slate" and v.Parent.Parent.Name == 'Workspace' then
                                v.BrickColor = BrickColor.new('Really black')
                            end
                            if v.Name == "Part" and v.Parent.Name == 'Region_Volcano' then
                                v.BrickColor = BrickColor.new('Black metallic')
                                v.Material = Enum.Material.Sand
                            end
                            if v.Name == "Wedge" and v.Parent.Name == 'Region_Volcano' then
                                v.BrickColor = BrickColor.new('Black metallic')
                                v.Material = Enum.Material.Sand
                            end
                            if v.Name == "PushMe" and v.Parent.Name == 'Slab' then
                                v.BrickColor = BrickColor.new('Black metallic')
                                v.Material = Enum.Material.Sand
                            end
                            if v.Name == "Wedge" and v.Parent.Name == 'Region_Main' then
                                v.BrickColor = BrickColor.new('Slime green')
                                v.Material = Enum.Material.Sand
                            end
                            if v.Name == "Ground" and v.Parent.Name == 'Region_LittleMeadow' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')
                                v.Material = Enum.Material.Sand
                            end
                            if v.Name == "Boulder" and v.Parent.Name == 'BoulderRegen' then
                                v.BrickColor = BrickColor.new('Really black')
                            end
                            if v.Name == "Water" and v.Parent.Parent.Name == 'Workspace' then
                                v.BrickColor = BrickColor.new('Dark red')
                                v.Transparency = 0.1
                            end
                            if v.Name == "Water" and v.Parent.Name == 'WaterModel' then
                                v.BrickColor = BrickColor.new('Dark red')
                                v.Transparency = 0.1
                            end
                            if v.Name == "Water" and v.Parent.Parent.Name == 'Workspace' then
                                v.BrickColor = BrickColor.new('Dark red')
                                v.Transparency = 0.1
                            end
                            if v.Name == "Ground" and v.Parent.Name == 'Region_Tropics' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')
                            end
                            if v.Name == "Ground" and v.Parent.Parent.Name == 'Region_Plains' then
                                v.BrickColor = BrickColor.new('Flame reddish orange')
                            end
                        end
                    end
                end,
                {
                    Flag = 'WorldThemesFlag',
                    Description = 'Change how the game looks by selecting one of these.',
                    Options = {'Autumn Theme', 'Willy Wonka Theme', 'Pink Passion', 'Winter Theme', 'Holloween Theme'}
                }
            )
            --#endregion 

            ------------------------------------------------------------------#Character Tab
            --#region Character Setup
            cat.char = Main:CreateCategory('Character')
            sec.phys = cat.char:CreateSection('Physics')
            sec.funz = cat.char:CreateSection('Fun Stuff')
            sec.camz = cat.char:CreateSection('Cameras')
            --#endregion

            --#region Walk Speed
            sec.phys:Create('Slider', 'Walk Speed',
                function(value)
                    GuiSettings['WalkSpeedFlag'] = value
                    var.WalkSpeed = value
                    SaveSettings()
                    --game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
                    --OldSpeed = value
                end,
                {
                    Flag = 'WalkSpeedFlag', 
                    Description = 'Change how fast your character can walk. Holding left shift allows sprinting which is 2x the speed of walk.',
                    Min = 16,
                    Default = GuiSettings['WalkSpeedFlag'],
                    Max = 500
                }
            )
            --#endregion

            --#region Jump Power
            sec.phys:Create('Slider', 'Jump Power', 
                function(value)
                    GuiSettings['JumpPowerFlag'] = value
                    SaveSettings()
                    game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
                end,
                {
                    Flag = 'JumpPowerFlag',
                    Description = 'Changing this will allow you to change how high your character can jump.',
                    Min = 50,
                    Default = GuiSettings['JumpPowerFlag'],
                    Max = 800
                }
            )
            --#endregion

            --#region No Clip
            sec.phys:Create('Keybind', 'No Clip', 
                function()
                    var.noClip = not var.noClip
                    updateStatus(noClipRed, var.noClip)
                end,
                {
                    Flag = 'NoClipFlag',
                    Description = 'Turning this on will allow you to walk through walls.',
                    Default = Enum.KeyCode[GuiSettings.NoClipFlag]
                }
            )

            var.noclipDis = game:GetService("RunService").Stepped:Connect(function()
                if game:GetService("Players").LocalPlayer.Character:FindFirstChild'Torso' and game:GetService("Players").LocalPlayer.Character:FindFirstChild'Head' then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild'Torso'.CanCollide = not var.noClip
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild'Head'.CanCollide = not var.noClip
                end
            end)
            --#endregion

            --#region Hercules

            if dragMod == nil then
                getgenv().dragMod = false
                local env = getsenv(game.Players.LocalPlayer.PlayerGui.ItemDraggingGUI.Dragger)
                local moveDrag = env.moveDrag
                local dragPos = getupvalue(env.moveDrag, 1)
                
                env.moveDrag = function(item)
                    if dragPos.Parent == nil then
                        dragPos = getupvalue(env.moveDrag, 1)
                    end
                    if dragMod then 
                        dragPos.maxForce = Vector3.new(1, 1, 1) * 9e9
                        dragPos.Parent:WaitForChild("BodyGyro").maxTorque = Vector3.new(1, 1, 1) * 9e9
                    else
                        dragPos.maxForce = Vector3.new(1, 1, 1) * 17000
                        dragPos.Parent:WaitForChild("BodyGyro").maxTorque = Vector3.new(1, 1, 1) * 200
                    end
                    return moveDrag(item)
                end
            end

            var.hercEn = false
            local bpD, bpP, bpMax, bgMax, bgP, bgD
            local first = false
            sec.phys:Create('Keybind', 'Hercules (Hard Dragger)',
                function()
                    getgenv().dragMod = not dragMod
                    if var.herc then
                        var.herc:Disconnect()
                    end
                    updateStatus(hercRed, getgenv().dragMod)
                    if var.dragItem then
                        for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                            if v:FindFirstChild("Owner") and v.Owner.Value == var.plr then
                                if v:FindFirstChild("DraggableItem") == nil then
                                    local draggable = var.dragItem:Clone()
                                    draggable.Parent = v
                                end
                            end
                        end
                    end


                end,
                {
                    Flag = 'HardDraggerFlag',
                    Description = 'Enabling this will allow you to pick up any weight.',
                    Default = Enum.KeyCode[GuiSettings.HardDraggerFlag]
                }
            )
            --#endregion

            --#region Fly
            myChar = var.plr.Character or var.plr.CharacterAdded:Wait()
            myHum = myChar.Humanoid--:WaitForChild("Humanoid")
            function nofly()
                bbb=false
                myHum.PlatformStand = false 
            end
        
            deb = true
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 0
            local bv
            local torso
            local bg
            var.flying = false
            function fly()
                var.plr = game.Players.LocalPlayer
                var.flying = true
                local myHRP = var.plr.Character:WaitForChild("HumanoidRootPart")
            
                torso = var.plr.Character.Torso
                bg = Instance.new("BodyGyro", torso)
                bg.P = 9e4
                bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
                bg.CFrame = torso.CFrame
                bv = Instance.new("BodyVelocity", torso)
                bv.Velocity = Vector3.new(0,0.1,0)
                bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
                repeat wait()
                    if var.plr then
                        var.plr.Character.Humanoid.PlatformStand = true
                    end
                    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                        speed = var.maxSpeed
                        --mTrack:Play()
                    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                        speed = 0
                        --mTrack:Stop()
                    end
                    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                        bv.Velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                        lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                        bv.Velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                    else
                        bv.Velocity = Vector3.new(0,0.1,0)
                    end
                    bg.CFrame = game.Workspace.CurrentCamera.CFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/var.maxSpeed),0,0)
                until not var.flying
                ctrl = {f = 0, b = 0, l = 0, r = 0}
                lastctrl = {f = 0, b = 0, l = 0, r = 0}
                speed = 0
                bg:Destroy()
                bv:Destroy()
                var.plr.Character.Humanoid.PlatformStand = false
            end

            sec.phys:Create('Keybind', 'Flying',
                function()
                    if not game.Players.LocalPlayer.Character.Humanoid.Seated then
                        SendNotification('Flying is disabled while seated.')
                    else
                        if var.flying == false then
                            var.flying = true
                            fly()
                        else
                            if (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed == 0 then
                                var.flying = false
                                nofly()
                            end
                        end 
                    end
                end,
                {
                    Flag = 'FlyingModeFlag',
                    Description = 'Enable to set your character into flying mode.',
                    Default = Enum.KeyCode[GuiSettings.FlyingModeFlag]
                }
            )

            var.FlyKeyDown = var.mouse.KeyDown:Connect(function(key)
                if key:lower() == "w" then
                    ctrl.f = 1
                elseif key:lower() == "s" then
                    ctrl.b = -1
                elseif key:lower() == "a" then
                    ctrl.l = -1
                elseif key:lower() == "d" then
                    ctrl.r = 1
                end
            end)

            var.FlyKeyUp = var.mouse.KeyUp:Connect(function(key)
                if key:lower() == "w" then
                    ctrl.f = 0
                elseif key:lower() == "s" then
                    ctrl.b = 0
                elseif key:lower() == "a" then
                    ctrl.l = 0
                elseif key:lower() == "d" then
                    ctrl.r = 0
                end
            end)
            --#endregion
            
            --#region Fly Speed
            sec.phys:Create('Slider', 'Fly Speed',
                function(value)
                    var.maxSpeed = value
                    GuiSettings['FlySpeedFlag'] = value
                    SaveSettings()
                end,
                {
                    Flag = 'FlySpeedFlag',
                    Description = 'Changes how fast or slow you can fly.',
                    Min = 20,
                    Default = GuiSettings['FlySpeedFlag'],
                    Max = 500
                }
            )
            --#endregion

            --#region Safe Suicide
            sec.phys:Create('Button', 'Safe Suicide', 
                function()
                    if game.Players.LocalPlayer.Character then
                        game.Players.LocalPlayer.Character:FindFirstChild('Head'):Remove()
                    end
                end,
                {
                    Description = 'This kills your character but does not make you drop your axes. Do not try this at home.',
                    BtnText = 'Die!'
                }
            )
            --#endregion

            --#region Head Crackle
            sec.funz:Create('Toggle', 'Head Crackle',
                function(state)
                    if state then
                        var.sparkles = Instance.new('Sparkles')
                        var.sparkles.Parent = game.Players.LocalPlayer.Character.Head
                    else
                        var.sparkles:Destroy()
                        var.sparkles = nil
                    end
                end,
                {
                    Flag = 'HeadCrackleFlag',
                    Description = 'Just turn it on and see. Client side only. Only you can see this.',
                }
            )
            --#endregion

            --#region Head Smoke
            sec.funz:Create('Toggle', 'Head Smoke', 
                function(state)
                    if state then
                        var.smokez = Instance.new('Smoke')
                        var.smokez.Parent = game.Players.LocalPlayer.Character.Head
                    else
                        var.smokez:Destroy()
                        var.smokez = nil
                    end
                end,
                {
                    Flag = 'HeadSmokeFlag',
                    Description = 'Just turn it on and see. CLient side only. Only you can see this.',
                    Default = false
                }
            )
            --#endregion

            --#region Head Fire
            sec.funz:Create('Toggle', 'Head Fire',
                function(state)
                    if state then
                        var.fire = Instance.new('Fire')
                        var.fire.Parent = game.Players.LocalPlayer.Character.Head
                    else
                        var.fire:Destroy()
                        var.fire = nil
                    end
                end,
                {
                    Flag = 'HeadFireFlag',
                    Description = 'Do you smell something burning? Client side only. Only you can see this.',
                    Default = false
                }
            )
            --#endregion
            
            --#region Body Spin
            var.spinSpeed = 50
            
            sec.funz:Create('Toggle', 'Body Spin',
                function(state)
                    if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Spinning') then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Spinning:Destroy()
                    end
                    if state then
                        local Spin = Instance.new('BodyAngularVelocity', game.Players.LocalPlayer.Character.HumanoidRootPart)
                        Spin.Name = 'Spinning'
                        Spin.MaxTorque = Vector3.new(0, math.huge, 0)
                        Spin.AngularVelocity = Vector3.new(0, var.spinSpeed, 0)
                    else
                        if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Spinning') then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Spinning:Destroy()
                        end
                    end
                end,
                {
                    Flag = 'BodySpinFlag',
                    Description = "I'm so dizzy, my head is spinning.",
                    Default = false
                }
            )

            sec.funz:Create('Slider', 'Body Spin Speed',
                function(value)
                    var.spinSpeed = value
                end,
                {
                    Flag = 'BodySpinSpeedFlag',
                    Description = 'Changes the spin speed of the body spin.',
                    Min = 1,
                    Max = 300,
                    Default = 50
                }
            )
            --#endregion

            --#region Ragdoll
            sec.funz:Create('Toggle', 'Ragdoll',
                function(state)
                    if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild('RagDoll') then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.RagDoll:Destroy()
                    end
                    if state then
                        local Spin = Instance.new('BodyAngularVelocity', game.Players.LocalPlayer.Character.HumanoidRootPart)
                        Spin.Name = 'RagDoll'
                        Spin.MaxTorque = Vector3.new(math.huge, 0, math.huge)
                        Spin.AngularVelocity = Vector3.new(20, 0, 50)
                    else
                        if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild('RagDoll') then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Spinning:Destroy()
                        end
                    end
                end,
                {
                    Flag = 'RagDollFlag',
                    Description = "Be careful.",
                    Default = false
                }
            )
            --#endregion
            
            --#region Camera Zoom
            sec.camz:Create('Slider', 'Camera Zoom',
                function(value)
                    game.Players.LocalPlayer.CameraMaxZoomDistance = value
                    GuiSettings['CameraZoomFlag'] = value
                    SaveSettings()
                end,
                {
                    Flag = 'CameraZoomFlag', 
                    Description = 'Allows you to zoom your camera in and out.',
                    Min = 120,
                    Default = 600,
                    Max = 1800
                }
            )
            --#endregion
            
            ------------------------------------------------------------------#Wood Tab
            --#region Wood Setup
            cat.wood = Main:CreateCategory('Wood')
            sec.trees = cat.wood:CreateSection('Chopping Tools')
            sec.treeCam = cat.wood:CreateSection('Camera')
            sec.otherWood = cat.wood:CreateSection('Other Wood Tools')
            --#endregion

            --#region Hide Controls
            local chopperSelect
            local oneChopButton
            local getTreeDropDown
            local getTreeButton
            local modTreeButton
            local jointChopperButton
            local EnDisChopToggle
            local cancelOneUnit

            local hideChoppers = function()
                chopperSelect:ToggleVisible(false)
                getTreeDropDown:ToggleVisible(false)
                oneChopButton.Visible = false
                getTreeButton.Visible = false
                modTreeButton.Visible = false
                jointChopperButton.Visible = false
                EnDisChopToggle.Visible = false
                cancelOneUnit.Visible = false
            end
            --#endregion

            --#region Enable Chopping Tools
            EnDisChopToggle = sec.trees:Create('Toggle', 'Enable/Disable Chopping Tools',
                function(state)
                    hideChoppers()
                    dDrag(state)
                    chopperSelect:ToggleVisible(state)
                    EnDisChopToggle.Visible = true
                end,
                {
                    Flag = 'EnableDisableChoppersFlag',
                    Description = 'Show or Hide the Chopping Tools Dropdown',
                    Default = false
                }
            )
            --#endregion

            --#region Chopping Dropdown
            chopperSelect = sec.trees:Create('Dropdown', 'Wood Chopers',
                function(selected)
                    hideChoppers()
                    if selected == 'One Unit Cut' then
                        chopperSelect:ToggleVisible(true)
                        EnDisChopToggle.Visible = true
                        oneChopButton.Visible = true
                        EnDisChopToggle.Visible = true
                    elseif selected == 'Get Tree' then
                        chopperSelect:ToggleVisible(true)
                        EnDisChopToggle.Visible = true
                        getTreeDropDown:ToggleVisible(true)
                        getTreeButton.Visible = true
                        EnDisChopToggle.Visible = true
                    elseif selected == 'Mod Tree' then
                        chopperSelect:ToggleVisible(true)
                        EnDisChopToggle.Visible = true
                        getTreeDropDown:ToggleVisible(true)
                        modTreeButton.Visible = true
                        EnDisChopToggle.Visible = true
                    elseif selected == 'None' then
                        library:UpdateToggle('EnableDisableChoppersFlag', false)
                        EnDisChopToggle.Visible = true
                    elseif selected == 'Joint Chopper' then
                        chopperSelect:ToggleVisible(true)
                        EnDisChopToggle.Visible = true
                        jointChopperButton.Visible = true
                        EnDisChopToggle.Visible = true
                    end
                end,
                {
                    Flag = 'WoodChoppersFlag',
                    Description = 'Choose the type of wood chopper you would like to use.',
                    Options = {'None', 'Get Tree', 'Mod Tree', 'Joint Chopper', 'One Unit Cut'}
                }
            )
            --#endregion

            --#region Get Tree
            getTreeDropDown = sec.trees:Create('Dropdown', 'Get Tree', 
                function(selected)
                    var.selectedTree = selected
                end,
                {
                    Flag = 'GetTreeFlag',
                    Options = var.treeLabels,
                    Description = 'Select the kind of tree you want then press Get Tree'
                }
            )   

            getTreeButton = sec.trees:Create('Button', 'Get Tree', 
                function()
                    if var.selectedTree then
                        hideChoppers()
                        spawn(function()
                            wait(15)
                            if var.noTree then
                                SendNotification('That tree does not exist.')
                                EnDisChopToggle.Visible = true
                                getTreeDropDown:ToggleVisible(true)
                                getTreeButton.Visible = true
                                chopperSelect:ToggleVisible(true)
                                var.noTree = nil
                            end
                        end)
                        bringTree(var.trees[var.selectedTree])
                        EnDisChopToggle.Visible = true
                        getTreeDropDown:ToggleVisible(true)
                        getTreeButton.Visible = true
                        chopperSelect:ToggleVisible(true)
                    else
                        SendNotification('You must select a tree before you can get it.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Get the tree you selected above.'
                }
            )
            --#endregion

            --#region Mod Tree
            local lava = game:GetService('Workspace'):FindFirstChild('Region_Volcano'):FindFirstChild('Lava'):FindFirstChild('Lava')
            var.lavaCFrame = lava.CFrame
            var.selectedSawmill = nil
            var.modBranch = nil
            var.sellBranch = nil
            var.treeBase = nil
            var.selectedSawmill = nil

            function scanForSawmill()
                for i,v in pairs(game:GetService("Workspace").PlayerModels:GetChildren()) do
                    if v.Name == 'Sawmill4L' or v.Name == 'Model' then
                        if v:FindFirstChild('ItemName') and v:FindFirstChild('Owner') then
                            if v.ItemName.Value == 'Sawmill4L' and v.Owner.Value == game.Players.LocalPlayer then
                                return v;
                            end
                        end
                    end
                end
            end

            modTreeButton = sec.trees:Create('Button', 'Mod Tree',
                function()
                    if var.selectedTree then
                        hideChoppers()
                        spawn(function()
                            wait(15)
                            if var.noTree then
                                SendNotification('That tree does not exist.')
                                EnDisChopToggle.Visible = true
                                chopperSelect:ToggleVisible(true)
                                getTreeDropDown:ToggleVisible(true)
                                modTreeButton.Visible = true
                                var.noTree = nil
                            end
                        end)
                        var.selectedSawmill = scanForSawmill()
                        if var.selectedSawmill then
                            bringTree(var.trees[var.selectedTree])
                            local target = var.newTree   
                            for i,v in pairs(target:GetChildren()) do
                                if v.Name == 'WoodSection' then
                                    if not v:FindFirstChild('Tree Weld') then
                                        if not var.modBranch then
                                            if v.ID.Value ~= 2 then
                                                var.modBranch = v
                                            end
                                        else
                                            local volume = v.Size.X * v.Size.Y * v.Size.Z
                                            local modVolume = var.modBranch.Size.X * var.modBranch.Size.Y * var.modBranch.Size.Z
                                            if volume < modVolume and v.ID.Value ~= 2 then var.modBranch = v end
                                        end
                                    end
                                    if v.ID.Value == 1 then
                                        var.treeBase = v
                                    end
                                end
                            end
                            var.smallSize = 0
                            var.modBranch.BrickColor = BrickColor.new('Hot pink')
                            for i,v in pairs(target:GetChildren()) do
                                if v.Name == 'WoodSection' and v.ID.Value == var.modBranch.ParentID.Value then
                                    var.sellBranch = v
                                    break
                                end
                            end
                            
                            var.sellBranch.BrickColor = BrickColor.new('Deep blue')
                            if var.modBranch and var.sellBranch then
                                for i = 1, 5 do
                                    game.Players.LocalPlayer.Character:MoveTo(var.treeBase.Position + Vector3.new(0,3,0))
                                    wait(1)
                                end
                                lava.Size = Vector3.new(0,0,0)
                                repeat
                                    lava.Position = var.sellBranch.Position
                                    game:GetService("ReplicatedStorage").Interaction.ClientRequestOwnership:FireServer(var.sellBranch)
                                    game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(var.sellBranch.Parent)
                                    wait()
                                until var.sellBranch:FindFirstChild('LavaFire')
                                lava.CFrame = var.lavaCFrame
                                var.sellBranch.Position = Vector3.new(315.833, -0.4, 83.677)
                                
                                repeat
                                    wait()
                                until var.sellBranch.AncestryChanged:Wait()
                                --game.Players.LocalPlayer.Character:MoveTo(var.treeBase.Position + Vector3.new(0,3,0))
                                local baseSize = var.treeBase.Size
                                
                                while true do
                                    game.Players.LocalPlayer.Character:MoveTo(var.treeBase.Position + Vector3.new(0,3,0))
                                    local args = {
                                        [1] = target.CutEvent,
                                        [2] = {
                                            ["tool"] = var.modAxe,
                                            ["faceVector"] = Vector3.new(0, 0, -1),
                                            ["height"] = 0.32,
                                            ["sectionId"] = 1,
                                            ["hitPoints"] = var.modDmg,
                                            ["cooldown"] = 0.38110087871552,
                                            ["cuttingClass"] = "Axe"
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
                                    if var.treeBase.Size ~= baseSize then
                                        break
                                    end
                                    wait()
                                    var.modBranch.CFrame = var.selectedSawmill.Particles.CFrame
                                end
                                var.selectedTree = nil
                                var.selectedSawmill = nil
                                var.highestDamageAxe = nil
                                var.sellBranch = nil
                                var.selectedSawmill = nil
                                var.modBranch = nil
                                EnDisChopToggle.Visible = true
                                chopperSelect:ToggleVisible(true)
                                getTreeDropDown:ToggleVisible(true)
                                modTreeButton.Visible = true
                            else
                                SendNotification('This tree is not moddable.')
                                EnDisChopToggle.Visible = true
                                chopperSelect:ToggleVisible(true)
                                getTreeDropDown:ToggleVisible(true)
                                modTreeButton.Visible = true
                            end         
                        else
                            SendNotification('You must have the largest sawmill.')
                            EnDisChopToggle.Visible = true
                            chopperSelect:ToggleVisible(true)
                            getTreeDropDown:ToggleVisible(true)
                            modTreeButton.Visible = true
                        end
                    else
                        SendNotification('You must select a tree before you can get it.')
                        EnDisChopToggle.Visible = true
                        chopperSelect:ToggleVisible(true)
                        getTreeDropDown:ToggleVisible(true)
                        modTreeButton.Visible = true
                    end
                end,
                {
                    Description = 'Mod the tree after getting it.',
                    BtnText = 'Go!'
                }
            )   
            --#endregion

            --#region One Unit Cut Toggle
            var.running = nil
            var.mouseOneUnit = nil
            var.OneAtATime = nil

            oneChopButton = sec.trees:Create('Button', 'One Unit Cutter',
                function(state)
                    pcall(function() var.mouseOneUnit:Disconnect() end)
                    var.mouseOneUnit = var.mouse.Button1Up:Connect(function()
                        local one = var.mouse.Target
                        if one.Name == 'WoodSection' and one.Parent.Name == 'Plank' then
                            SendNotification('Click on the plank you want to chop.')
                            pcall(function() var.mouseOneUnit:Disconnect() end)
                            hideChoppers()
                            var.OneAtATime = true
                            cancelOneUnit.Visible = true
                            if one.Parent.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(one.Parent.Owner.Value) then
                                local tree = one.Parent.TreeClass.Value
                                local Axe = getBestAxe(tree)
                                if not Axe then
                                    SendNotification('You need the proper axe for this.')
                                else
                                    local axeStats = getStats(Axe)
                                    local dmg = axeStats.Damage
                                    local waitTime = axeStats.SwingCooldown
                                    if axeStats.SpecialTrees and axeStats.SpecialTrees[tree] then
                                        dmg = axeStats.SpecialTrees[tree].Damage or dmg
                                        waitTime = axeStats.SpecialTrees[tree].SwingCooldown or waitTime
                                    end
                                    
                                    function chopWood()
                                        local wood_1 = one.Parent.CutEvent
                                        local wood_2 = {
                                            ["tool"] = Axe,
                                            ["faceVector"] = Vector3.new(0, 0, -1), 
                                            ["height"] = (one.Size.Y - var.sMath) - 0.01,
                                            ["sectionId"] = 1,
                                            ["hitPoints"] = dmg,
                                            ["cooldown"] = 0.112,
                                            ["cuttingClass"] = "Axe"
                                        }
                                        local Event = game:GetService("ReplicatedStorage").Interaction.RemoteProxy
                                        Event:FireServer(wood_1, wood_2)
                                    end
                                    var.cutSize = 1 / (tonumber(one.Size.X) * tonumber(one.Size.Z))
                                    var.totalSize = one.Size.X * one.Size.Y * one.Size.Z
                                    if var.cutSize < 0.32 then
                                        var.cutSize = 0.32
                                        SendNotification('Chop size too small. Increasing...')
                                    end 
                                    var.cutCount = (math.floor(tonumber(one.Size.y) / var.cutSize)) - 1 
                                    var.sMath = var.cutSize
                                    for i = 1, var.cutCount do
                                        var.totalSize = one.Size.X * one.Size.Y * one.Size.Z
                                        if (var.plr.Character.HumanoidRootPart.CFrame.p - one.CFrame.p).magnitude > 40 then
                                            var.plr.Character.HumanoidRootPart.CFrame = CFrame.new(one.CFrame.p) + Vector3.new(1, 2, 1)
                                        end
                                        repeat wait()
                                            var.endSize = one.Size.X * one.Size.Y * one.Size.Z
                                            chopWood()
                                            if var.OneAtATime == false then break end
                                        until var.totalSize ~= var.endSize
                                    end
                                    if var.OneAtATime then
                                        SendNotification('Your wood has finished cutting.')
                                    else
                                        SendNotification('One Unit Cut has been cancelled.')
                                    end
                                    var.OneAtATime = false
                                    chopperSelect:ToggleVisible(true)
                                    oneChopButton.Visible = true
                                    EnDisChopToggle.Visible = true
                                end
                            end
                        else
                            SendNotification('That is not a plank.')
                            pcall(function() var.mouseOneUnit:Disconnect() end)
                            chopperSelect:ToggleVisible(true)
                            oneChopButton.Visible = true
                        end
                    end)
                end,
                {
                    Description = 'This tool will chop any plank into at minimum 1 unit for the power.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Cancel One Unit
            cancelOneUnit = sec.trees:Create('Button', 'Cancel One Unit Cut',
                function()
                    hideChoppers()
                    var.OneAtATime = false
                    EnDisChopToggle.Visible = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Cancels the one unit cut tool.'
                }
            )
            --#endregion

            --#region Joint Chopper
            var.tree2log = nil

            jointChopperButton = sec.trees:Create('Button', 'Joint Chopper',
                function()
                    hideChoppers()
                    SendNotification('Click on the tree you want to joint chop.')
                    var.tree2log = mouse.Button1Down:Connect(function()
                        local target = mouse.Target
                        if target.Parent.Parent == game.Workspace.LogModels and target.Parent.Name:sub(1,6):match("Loose_") then
                            if target.Parent:FindFirstChild('Owner') then
                                pcall(function() var.tree2log:Disconnect() end)
                                game:GetService("ReplicatedStorage").Interaction.ClientRequestOwnership:FireServer(target.Parent)
                                if target.Parent.Owner.Value == game.Players.LocalPlayer or player.WhitelistFolder:FindFirstChild(target.Parent.Owner.Value.Name) then 
                                    var.branches = {}
                                    local tree = target.Parent.TreeClass.Value
                                    local Axe = getBestAxe(tree)
                                    if not Axe then
                                        SendNotification('You need the proper axe for this.')
                                    else
                                        local axeStats = getStats(Axe)
                                        local dmg = axeStats.Damage
                                        local waitTime = axeStats.SwingCooldown
                                        if axeStats.SpecialTrees and axeStats.SpecialTrees[tree] then
                                            dmg = axeStats.SpecialTrees[tree].Damage or dmg
                                            waitTime = axeStats.SpecialTrees[tree].SwingCooldown or waitTime
                                        end
                                        for i,v in pairs(target.Parent:GetChildren()) do
                                            if v.Name == 'WoodSection' then
                                                table.insert(var.branches, v.ID.Value, v)
                                            end
                                        end
                                        for i = #var.branches, 1, -1 do
                                            if var.branches[i] then
                                                if var.branches[i]:FindFirstChild('Tree Weld') then
                                                    local size = var.branches[i].Size
                                                    while true do
                                                        if (var.branches[i].Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 40 then
                                                            game.Players.LocalPlayer.Character:MoveTo(var.branches[i].Position + Vector3.new(0,2,0))
                                                        end
                                                        local args = {
                                                            [1] = var.branches[i].Parent.CutEvent,
                                                            [2] = {
                                                                ["tool"] = Axe,
                                                                ["faceVector"] = Vector3.new(0, 0, -1),
                                                                ["height"] = var.branches[i].Size.Y - 0.05,
                                                                ["sectionId"] = i,
                                                                ["hitPoints"] = dmg,
                                                                ["cooldown"] = 0,
                                                                ["cuttingClass"] = "Axe"
                                                            }
                                                        }
                                                        if var.branches[i].Size ~= size then
                                                            break  
                                                        end
                                                        game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
                                                        wait()
                                                    end
                                                end
                                            end
                                        end
                                        table.clear(var.branches)
                                        jointChopperButton.Visible = true
                                        EnDisChopToggle.Visible = true
                                        chopperSelect:ToggleVisible(true)
                                    end
                                else 
                                    SendNotification("You don't own this tree!") 
                                    jointChopperButton.Visible = true
                                    EnDisChopToggle.Visible = true
                                    chopperSelect:ToggleVisible(true)
                                end
                            end
                        else 
                            SendNotification('That is not a tree.') 
                            jointChopperButton.Visible = true
                            EnDisChopToggle.Visible = true
                            chopperSelect:ToggleVisible(true)
                        end
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will chop the selected tree at all the joints automatically.'
                }
            )
            --#endregion

            --#region Spook Tree Find
            for i, v in pairs(game.Workspace:GetChildren()) do
                if v.Name == "TreeRegion" and v:FindFirstChildOfClass("Model") then
                    if v.Model:FindFirstChild('TreeClass') then
                        if v.Model.TreeClass.Value == "SpookyNeon" then
                            SendNotification('Sinister Tree has been found in this server.')
                            var.spookLoc = v.Model:FindFirstChild('WoodSection').CFrame
                            break
                        end
                        if v.Model.TreeClass.Value == 'Spooky' then
                            SendNotification('Spook Wood Tree has been found in this server.')
                            var.spookLoc = v.Model:FindFirstChild('WoodSection').CFrame
                            break
                        end
                    end
                end
            end
            --#endregion

            hideChoppers()
            EnDisChopToggle.Visible = true

            --#region View Phantom Tree
            sec.treeCam:Create('Toggle', 'View Phantom Tree',
                function(state)
                    if state then
                        var.FoundTree = false
                        for i, v in pairs(game.Workspace:GetChildren()) do
                            if v.Name == "TreeRegion" and v:FindFirstChildOfClass("Model") then
                                if v.Model:FindFirstChild('TreeClass') then
                                    if v.Model.TreeClass.Value == "LoneCave" then
                                        game.Workspace.Camera.CameraSubject = v.Model.WoodSection
                                        var.FoundTree = true
                                    end
                                end
                            end
                        end
                        if var.FoundTree == false then
                            SendNotification('The phantom tree no longer exists on this server.')
                        end
                    else
                        game.Workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character
                    end
                end,
                {
                    Flag = 'ViewPhantomFlag',
                    Description = 'This will allow you to change your camera to see the phantom tree.',
                    Default = false
                }
            )
            --#endregion

            --#region Sell Logs
            var.logCount = 0
            var.sectionCount = 0
            var.sellLogsButton = nil

            var.sellLogsButton = sec.otherWood:Create('Button', 'Sell ALL Logs (Not Planks)',
                function()
                    local sellLogFunc = Instance.new("BindableFunction", workspace)
                    sellLogFunc.Name = "Cynical_SellLogs"
                    sellLogFunc.OnInvoke = function(v)
                        var.sellLogsButton.Visible = false
                        var.logCount = 10
                        if tostring(v) == "Yes" then
                            for i, v in pairs(game.Workspace.LogModels:GetChildren()) do
                                if v.Name ~= "PlaceholderPart" then
                                    if v:FindFirstChild("Owner") then
                                        if v.Owner.Value == nil then
                                            game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
                                        end
                                        if v.Owner.Value == game.Players.LocalPlayer then
                                            if v.Name:sub(1, 6) == "Loose_" then
                                                for l, n in pairs(v:GetChildren()) do
                                                    if n.Name == "WoodSection" then
                                                        var.sectionCount = var.sectionCount + 1
                                                    end
                                                end
                                                if var.sectionCount == 1 then
                                                    if (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p-v.WoodSection.CFrame.p).magnitude > 40 then
                                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.WoodSection.CFrame.p) + Vector3.new(1, 1, 1)
                                                    end
                                                    spawn(function()
                                                        for i = 1, 4 do
                                                            game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(v.WoodSection)
                                                            game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                                                            v.WoodSection.CFrame = CFrame.new(Vector3.new(315, -0.296, 85.791))*CFrame.Angles(math.rad(90),0,0)
                                                            wait()
                                                        end
                                                    end)
                                                end
                                                var.sectionCount = 0
                                            end
                                        end
                                    end
                                end
                            end
                            SendNotification('All logs have been sold.')
                            var.sellLogsButton.Visible = true
                        end
                    end
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Fusion",
                        Text = "Are you sure you want to sell all logs?",
                        Icon = "rbxassetid://6243863672",
                        Duration = 10,
                        Button1 = "Yes",
                        Button2 = "No",
                        Callback = sellLogFunc,
                    })
                    repeat
                        wait(1)
                        var.logCount = var.logCount + 1
                    until var.logCount >= 10
                    sellLogFunc:Destroy()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will sell all LOGS that are no longer part of a tree.'
                }
            )
            --#endregion

            --#region Go to spook wood
            sec.otherWood:Create('Button', 'Teleport to Spook/Sinister Tree',
                function()
                    if var.spookLoc then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = var.spookLoc
                    else
                        SendNotification('The spook or sinister tree was not found.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'If the tree exists in the game, this will teleport you to it.'
                }
            )
            --#endregion

            ------------------------------------------------------------------#Dupe Tab
            --#region Dupe Setup
            cat.dupe = Main:CreateCategory('Dupe')
            sec.donate = cat.dupe:CreateSection('Donate Base')
            --#endregion

            --#region Dupe Vars
            var.dupeSelector = nil
            var.disableSave = nil
            var.donateBase = nil
            var.invDupe = nil
            var.centerDupe = nil
            var.monDupe = nil
            var.moneyInstLoad = nil
            var.dupeLoop = nil
            var.speedDel = nil
            --#endregion

            --#region Hide Dupers
            function hideDupers()
                var.invDupe.Visible = false
                var.dupeLoop.Visible = false
                var.centerDupe.Visible = false
                var.donateBase:ToggleVisible(false)
                var.teleAllItems.Visible = false
                var.plotDupe.Visible = false
                var.instLoad.Visible = false
                var.monDupe.Visible = false
                var.moneyInstLoad.Visible = false
                --var.speedDel.Visible = false
            end
            --#endregion

            --#region Disable Saving
            var.disableSave = sec.donate:Create('Toggle', 'Disable Saving',
                function(state)
                    getgenv().BlockSave = state
                    updateStatus(noSaveRed, state)
                end,
                {
                    Flag = 'DisableSaveFlag', 
                    Description = 'Disables the game from saving your slot. Will not stop it from saving when closing the game.',
                    Default = false
                }
            )  
            --#endregion

            --#region Dupe Type
            var.dupeSelector = sec.donate:Create('Dropdown', 'Dupe Type',
                function(selected)
                    hideDupers()
                    local checkCenter = getCenter()
                    if checkCenter and checkCenter:FindFirstChild('SelectionBox') then
                        checkCenter.SelectionBox:Destroy()
                    end
                    if selected == 'Donate Dupe' then
                        var.donateBase:ToggleVisible(true)
                    elseif selected == 'Inventory Dupe' then
                        var.invDupe.Visible = true
                        var.dupeLoop.Visible = true
                    elseif selected == 'Center Square Dupe' then
                        if checkCenter then
                            var.centerDupe.Visible = true
                            local selCenter = Instance.new('SelectionBox')
                            selCenter.Color3 = Color3.new(0, 1, 0)
                            selCenter.Parent = checkCenter
                            selCenter.Adornee = checkCenter
                        else
                            SendNotification('You do not have a plot loaded.')
                            var.centerDupe.Visible = false
                        end
                    elseif selected == 'Whole Plot Dupe' then
                        if checkCenter then
                            var.teleAllItems.Visible = true
                            var.plotDupe.Visible = true
                            var.instLoad.Visible = true
                        else
                            SendNotification('You do not have a plot loaded.')
                            var.teleAllItems.Visible = false
                            var.plotDupe.Visible = false
                            var.instLoad.Visible = false
                        end
                    elseif selected == 'Money Dupe' then
                        if checkCenter then
                            var.monDupe.Visible = true
                            var.moneyInstLoad.Visible = true
                            --var.speedDel.Visible = true
                        else
                            SendNotification('You do not have a plot loaded.')
                            var.monDupe.Visible = false
                            var.moneyInstLoad.Visible = false
                            var.speedDel.Visible = false
                        end
                    end
                end,
                {
                    Flag = 'DupeSelectFlag',
                    Options = {'None', 'Donate Dupe', 'Inventory Dupe', 'Center Square Dupe', 'Whole Plot Dupe', 'Money Dupe'},
                    --Options = {'None', 'Donate Dupe (PATCHED)', 'Inventory Dupe', 'Center Square Dupe', 'Whole Plot Dupe', 'Money Dupe'},
                    Description = 'Choose the kind of dupe you want to perform.'
                }
            )
            --#endregion

            --#region Donate Base
            var.donateBase = sec.donate:Create('Dropdown', 'Donate Base',
                function(selected)
                    if game.Players.LocalPlayer.CurrentSaveSlot.Value ~= -1 then
                        SendNotification('You must not have a slot loaded to use this.')
                    else
                        if canLoad() then
                            var.dupeSelector:ToggleVisible(false)
                            var.donateBase:ToggleVisible(false)
                            game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                            local blockSave = getgenv().BlockSave
                            getgenv().BlockSave = true
                            getgenv().instaLoad = true
                            local origDupeBase = nil
                            game:GetService('ReplicatedStorage').LoadSaveRequests.RequestLoad:InvokeServer(selected)
                            game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                            local bases = {}
                            for i, v in pairs(propertiesOrder) do
                                if v:FindFirstChild("Owner") and (v.Owner.Value == nil or v.Owner.Value == game.Players.LocalPlayer) then
                                    if v.Name == "Property" then
                                        OrigDupeBase = v
                                        break
                                    end
                                end
                            end
                            throwScreen("Waiting for load cooldown, please be patient.\nWhitelist the person you're donating to.", 59)

                            repeat
                                wait(1)
                            until canLoad()

                            local camera = workspace.CurrentCamera
                            game.Players.LocalPlayer.Character.Archivable = true
                            local p = game.Players.LocalPlayer.Character:Clone()
                            p.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                            p.HumanoidRootPart.Anchored = true
                            p.Name = "enfisenig"
                            p.Parent = workspace
                            camera.CameraSubject = p
                            game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService('Players').LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, true)
                            local oldPos = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
                            for _, v in next, workspace.Properties:GetChildren() do
                                if v:FindFirstChild("Owner") and (v.Owner.Value == nil or v.Owner.Value == game.Players.LocalPlayer) then
                                    for i=1,80 do
                                        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(v.OriginSquare.CFrame * CFrame.new(0, -2, 0))
                                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.OriginSquare)
                                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                                        task.wait()
                                    end
                                    break
                                end
                            end
                            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(oldPos)
                            camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
                            p:Destroy()
                            wait(.5)
                            game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(-1)
                            SendNotification('Your friend can now load on your base.')
                            getgenv().BlockSave = blockSave
                            getgenv().instaLoad = false
                            var.dupeSelector:ToggleVisible(true)
                            var.donateBase:ToggleVisible(true)
                            wait(1)
                            game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService'Players'.LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, false)
                            donateDuping = false
                        else
                            SendNotification('You cannot currently load. Try again in a minute.')
                        end
                    end
                end,
                {
                    Flag = 'DonateBaseFlag',
                    Options = {1, 2, 3, 4, 5, 6},
                    Description = 'Choose which base you want to donate to your friend. Make sure they are whitelisted.'
                }
            )
            --#endregion

            --#region Dupe loop
            var.dupeLooper = false
            var.dupeLoop = sec.donate:Create('Toggle', 'Dupe Loop Inventory',
                function(state)
                    var.dupeLooper = state
                end,
                {
                    Flag = 'DupeLoopInventoryFlag',
                    Description = 'Enabling this will loop duping your inventory.',
                    Default = false
                }
            )
            --#endregion

            --#region Dupe Inventory
            var.invDupe = sec.donate:Create('Button', 'Dupe Inventory',
                function()
                    if var.dupeLooper then
                        var.dupeSelector:ToggleVisible(false)
                        var.invDupe.Visible = false
                        local origPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                        wait(0.1)
                        var.HasTool = false
                        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                            if v:IsA('Tool') and v.Name ~= 'BlueprintTool' then
                                var.HasTool = true
                                break
                            end
                        end
                        if var.HasTool == false then
                            SendNotification('You do not have any axes to do.')
                            var.dupeSelector:ToggleVisible(true)
                        else                
                            repeat
                                game.Players.LocalPlayer.Character.Head:Destroy()
                                wait(0.2)
                                game.Players.LocalPlayer.Character:Destroy()
                                wait(0.8)
                                for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                    game:GetService('ReplicatedStorage').Interaction.ClientInteracted:FireServer(v, 'Drop tool', origPos)
                                end
                                game.Players.LocalPlayer.CharacterAdded:wait()
                                wait(2)

                                pcall(function() game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = origPos end)                        
                            until var.dupeLooper == false
                            var.HasTool = false
                            var.invDupe.Visible = true
                            var.dupeSelector:ToggleVisible(true)
                        end
                    else
                        local origPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                        wait(0.1)
                        var.HasTool = false
                        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                            if v:IsA('Tool') and v.Name ~= 'BlueprintTool' then
                                var.HasTool = true
                                break
                            end
                        end
                        if var.HasTool == false then
                            SendNotification('You do not have any axes to do.')
                            var.dupeSelector:ToggleVisible(true)
                        else
                            game.Players.LocalPlayer.Character.Head:Destroy()
                            wait(0.2)
                            game.Players.LocalPlayer.Character:Destroy()
                            wait(0.8)
                            for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                game:GetService('ReplicatedStorage').Interaction.ClientInteracted:FireServer(v, 'Drop tool', origPos)
                            end
                        end
                        game.Players.LocalPlayer.CharacterAdded:wait()
                        wait(2)

                        pcall(function() game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = origPos end)
                        var.HasTool = false
                        var.invDupe.Visible = true
                        var.dupeSelector:ToggleVisible(true)
                    end
                end,
                {
                    Description = 'This dupes all the axes you have in your inventory.',
                    BtnText = 'Go!'
                }
            )
            --#endregion
        
            --#region Center Square Dupe
            var.centerDupe = sec.donate:Create('Button', 'Center Square Dupe',
                function()
                    local result = false
                    local success
                    local firstItems = {}
                    local firstWood = {}
                    local secondItems = {}
                    local secondWood = {}
                    local finalItems = {}
                    local finalWood = {}
                    local currentSlot = game.Players.LocalPlayer.CurrentSaveSlot.Value
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                    --var.samePlot.Visible = false
                    var.centerDupe.Visible = false
                    var.dupeSelector:ToggleVisible(false)
                    if canLoad() == false then
                        local checkLoad
                        repeat
                            wait(1)
                            checkLoad = canLoad()
                        until checkLoad == true
                    end
                    local checkCenter = getCenter()
                    if checkCenter and checkCenter:FindFirstChild('SelectionBox') then
                        checkCenter.SelectionBox:Destroy()
                    end
                    local blockSave = getgenv().BlockSave
                    getgenv().BlockSave = true
                    game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService'Players'.LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, true)
                    local plot = getCenter().Parent
                    wait(2)
                    repeat
                        success, result=pcall(game.ReplicatedStorage.LoadSaveRequests.RequestLoad.InvokeServer, game.ReplicatedStorage.LoadSaveRequests.RequestLoad, currentSlot)
                    until result == true
                    SendNotification('Center square dupe has been completed.')
                    getgenv().BlockSave = blockSave
                    var.centerDupe.Visible = true
                    var.dupeSelector:ToggleVisible(true)
                    checkCenter = getCenter()
                    if checkCenter then
                        var.centerDupe.Visible = true
                        var.dupeSelector:ToggleVisible(true)
                        local selCenter = Instance.new('SelectionBox')
                        selCenter.Color3 = Color3.new(0, 1, 0)
                        selCenter.Parent = checkCenter
                        selCenter.Adornee = checkCenter
                    else
                        SendNotification('You do not have a plot loaded.')
                        var.centerDupe.Visible = false
                    end
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                    game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService'Players'.LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, false)
                end,
                {
                    Description = 'Dupes anything that you put into the center square of your base.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Whole Base Dupe
            var.instLoad = sec.donate:Create('Toggle', 'Instant Load Base?',
                function(state)
                end,
                {
                    Flag = 'InstLoadFlag',
                    Description = 'Enabling this will instantly load your base on the next available location.',
                    Default = false
                }
            )
            var.teleAllItems = sec.donate:Create('Toggle', 'Teleport Items?', 
                function(state)
                end,
                {
                    Flag = 'TeleItemsFlag',
                    Description = 'Enabling this will teleport all items to your new base.',
                    Default = false
                }
            )
            var.plotDupe = sec.donate:Create('Button', 'Whole Plot Dupe',
                function()
                    local getItems = {}
                    local getWood = {}
                    getItems, getWood = getDupeItems()

                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                    var.teleAllItems.Visible = false
                    var.plotDupe.Visible = false
                    var.instLoad.Visible = false
                    var.dupeSelector:ToggleVisible(false)
                    if canLoad() == false then
                        local checkLoad
                        repeat
                            wait(1)
                            checkLoad = canLoad()
                        until checkLoad == true
                    end
                    local getSaveState = getgenv().BlockSave
                    local dupeBase, newBase
                    if library.flags.InstLoadFlag == true then
                        var.reloadSlot = true
                        getgenv().instaLoad = true
                    else
                        var.reloadSlot = false
                        getgenv().instaLoad = false
                    end
                    getgenv().BlockSave = true
                    game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService'Players'.LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, true)
                    for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                        if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                            dupeBase = v
                        end
                    end
                    wait(0.01)
                    spawn(function()
                        function makeBase(posX)
                            game:GetService('ReplicatedStorage').PropertyPurchasing.ClientExpandedProperty:FireServer(dupeBase, posX)
                        end
                        for i = -2, 2 do
                            for l = -2, 2 do
                                if math.abs(i) + math.abs(l) ~= 0 then
                                    makeBase(CFrame.new(dupeBase.OriginSquare.Position.X + i * 40, dupeBase.OriginSquare.Position.Y, dupeBase.OriginSquare.Position.Z + l * 40))
                                end
                            end
                        end 
                    end)
                    wait(0.1)
                    game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(game.Players.LocalPlayer.CurrentSaveSlot.Value)
                    for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                        if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                            newBase = v
                        end
                    end
                    if library.flags.TeleItemsFlag == true then
                        if #getWood > 0 then
                            for i, v in pairs(getWood) do
                                if (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p - v.WoodSection.CFrame.p).magnitude > 80 then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.WoodSection.CFrame.p) + Vector3.new(2, 2, 2)
                                end
                                wait()
                                local oldPartPos = v.WoodSection.CFrame.p - dupeBase.OriginSquare.CFrame.p
                                local newPos = newBase.OriginSquare.CFrame.p + oldPartPos
                                v.PrimaryPart = v.WoodSection
                                for i = 1, 20 do
                                    game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(v)
                                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                                    v:SetPrimaryPartCFrame(CFrame.new(newPos) * CFrame.Angles(math.rad(90), 0, 0))
                                    wait()
                                end
                            end
                        end
                        if #getItems > 0 then
                            for i, v in pairs(getItems) do
                                local newPos = newBase.OriginSquare.CFrame.p + (v.Main.CFrame.p - dupeBase.OriginSquare.CFrame.p)
                                game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, CFrame.new(newPos), game.Players.LocalPlayer, nil, v, true)
                                wait(0.005)
                            end
                        end
                    end
                    SendNotification('Whole base dupe has been completed.')
                    wait(1)
                    getgenv().BlockSave = false
                    game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(curSlot, game.Players.LocalPlayer)
                    getgenv().BlockSave = getSaveState
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = newBase.OriginSquare.CFrame + Vector3.new(0, 5, 0)
                    game.ReplicatedStorage.Interaction.ClientSetListPlayer:InvokeServer(game:GetService'Players'.LocalPlayer.WhitelistFolder, game.Players.LocalPlayer, false)
                    var.teleAllItems.Visible = true
                    var.plotDupe.Visible = true
                    var.instLoad.Visible = true
                    getgenv().instaLoad = false
                    var.reloadSlot = false
                    library:UpdateToggle('InstLoadFlag', false)
                    library:UpdateToggle('TeleItemsFlag', false)
                    var.dupeSelector:ToggleVisible(true)    
                end,
                {
                    Description = 'Dupes your whole plot for you automatically.',
                    BtnText = 'Go!'
                }
            )


            --#endregion

            --#region Money Dupe
            var.getSpeed = false
            var.instMoneyLoad = false
            --[[
            var.speedDel = sec.donate:Create('Toggle', 'Speed Deload Money?',
                function(state)
                    var.getSpeed = state
                end,
                {
                    Flag = 'SpeedDelMoneyFlag',
                    Description = 'Use this for large bases to reload faster than the money.',
                    Default = false
                }
            )
        ]]
            var.moneyInstLoad = sec.donate:Create('Toggle', 'Instantly Load Base?',
                function(state)
                    var.instMoneyLoad = state
                end,
                {
                    Flag = 'InstMoneyLoadFlag',
                    Description = 'Use this to bypass the confirmation load base screen.',
                    Default = false
                }
            )

            var.monDupe = sec.donate:Create('Button', 'Auto Money Dupe',
                function()
                    local getSave = getgenv().BlockSave
                    local getLoad = getgenv().instaLoad
                    local hider = false
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                    hideDupers()
                    var.dupeSelector:ToggleVisible(false)
                    if canLoad() == false then
                        local checkLoad
                        repeat
                            wait(1)
                            checkLoad = canLoad()
                        until checkLoad == true
                    end
                    getgenv().BlockSave = true
                    spawn(function()
                        repeat
                            game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                            wait()
                        until hider == true
                    end)
                    spawn(function()
                        game.ReplicatedStorage.Transactions.ClientToServer.Donate:InvokeServer(game.Players.LocalPlayer, game.Players.LocalPlayer.leaderstats.Money.Value, game.Players.LocalPlayer.CurrentSaveSlot.Value)
                        wait(2)
                        getgenv().BlockSave = false
                        game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(game.Players.LocalPlayer.CurrentSaveSlot.Value, game.Players.LocalPlayer)
                        wait(30)
                        hider = true
                        var.monDupe.Visible = true
                        var.dupeSelector:ToggleVisible(true)
                        var.moneyInstLoad.Visible = true
                        --var.speedDel.Visible = true
                        library:UpdateToggle('InstMoneyLoadFlag', false)
                        library:UpdateToggle('SpeedDelMoneyFlag', false)
                        game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                    end)
                    wait(3)
                    if var.instMoneyLoad then
                        getgenv().instaLoad = true
                    end
                    if var.getSpeed then
                        local curSlot = game.Players.LocalPlayer.CurrentSaveSlot.Value
                        for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                            if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                                spawn(function()
                                    game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(v)
                                end)
                            end
                        end
                        wait(1)
                        game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(curSlot)
                    else
                        game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(game.Players.LocalPlayer.CurrentSaveSlot.Value)
                    end
                    getgenv().BlockSave = getSave
                    getgenv().instaLoad = getLoad
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                end,
                {
                    Description = 'Dupe your money.',
                    BtnText = 'Go!'
                }
            )

            hideDupers()
            --#endregion

            --#region --------------------------------------------------------#AutoBuy
            cat.auto = Main:CreateCategory('AutoBuy')
            sec.stores = cat.auto:CreateSection('Stores')

            con.StoreItems = nil
            var.storeChosen = Stores.WoodRUs.VisualItems
            var.buyAmount = 1
            var.BuyItems = 'Switch Conveyor'

            sec.stores:Create('Dropdown', "Select the Store",
                function(selected)
                    if selected == "Wood's R Us" then
                        con.StoreItems:Refresh(Stores.WoodRUs.VisualItems)
                        var.storeChosen = 'WoodRUs'
                    elseif selected == 'Boxed Cars' then
                        con.StoreItems:Refresh(Stores.CarStore.VisualItems)
                        var.storeChosen = 'CarStore'
                    elseif selected == 'Links Logic' then
                        con.StoreItems:Refresh(Stores.LogicStore.VisualItems)
                        var.storeChosen = 'LogicStore'
                    elseif selected == 'Fancy Furnishings' then
                        con.StoreItems:Refresh(Stores.FurnitureStore.VisualItems)
                        var.storeChosen = 'FurnitureStore'
                    elseif selected == 'Fine Arts' then
                        con.StoreItems:Refresh(Stores.FineArt.VisualItems)
                        var.storeChosen = 'FineArt'
                    elseif selected == "Bob's Shack" then
                        con.StoreItems:Refresh(Stores.ShackShop.VisualItems)
                        var.storeChosen = 'ShackShop'
                    end
                end,
                {
                    Flag = 'StoreListFlag',
                    Description = 'Items in Woods R Us Store',
                    Options = {"Wood's R Us", 'Boxed Cars', 'Links Logic', 'Fancy Furnishings', 'Fine Arts', "Bob's Shack"}
                }
            )

            con.StoreItems = sec.stores:Create('Dropdown', 'Purchasable Items',
                function(selected)
                    var.BuyItems = selected
                end,
                {
                    Flag = 'BuyItemsFlag',
                    Description = 'Select which item you would like to auto buy.',
                    Options = Stores.WoodRUs.VisualItems
                }
            )

            sec.stores:Create('Slider', 'Amount to purchase.',
                function(value)
                    var.buyAmount = value
                end,
                {
                    Flag = "PurchaseAmountFlag",
                    Description = 'Select this to change how many of the items you want to buy.',
                    Min = 1,
                    Default = 1,
                    Max = 100
                }
            )
            --Buy("Gift of Critically Acclaimed Knowledge", "WoodRUs", 10) -- use Stores.StoreNameHere.VisualItems for dropdowns
            sec.stores:Create('Button', 'Buy Items',
                function()
                    Buy(var.BuyItems, var.storeChosen, var.buyAmount)
                end,
                {
                    Description = 'Buy the items you have chosen',
                    BtnText = 'Go!'
                }
            )

            var.BluePrints = {"Wall3Tall", "Wall3TallCorner", "Wall3Corner", "Wedge5_Thin", "Wedge6", "Wedge6_Thin", "Wedge7", "Wedge7_Thin", "Wedge8", "Wedge8_Thin", "Wedge9", "Wedge9_Thin", "Wedge4_Thin", "Wedge3_Thin", "Wedge2_Thin", "Wedge1_Thin", "Wedge10_Thin", "Wedge10", "Floor1Tiny", "Floor2Tiny", "Ladder1", "Table2", "Table1", "Wedge5", "Wall1Short", "Door3", "Wall1ShortThin", "Floor2", "Floor2Large", "Floor1", "Floor1Large", "Wall3TallThin", "Wall3Thin", "Wall2TallCorner", "Wall2TallThin", "Wall2", "Wall2ShortThin", "Wall2ShortCorner", "Wall1TallThin", "Wall1TallCorner", "Wall1Corner", "Wall1", "Door2", "Floor2Small", "Floor1Small", "Wall3", "Wall2Tall", "Wall2Corner", "Wall2Short", "Wall1Tall", "Wall1Thin", "Post", "Wedge2", "Wedge1", "Wall1ShortCorner", "Wedge3", "Wedge4", "Stair1", "Stair2", "Door1"}
            var.fancyPrints = {"Cabinet1Thin", "Cabinet1", "Cabinet1CornerTight", "Cabinet1CornerWide", "CounterTop1Thin", "CounterTop1", "CounterTop1Sink"}

            sec.stores:Create('Button', 'Temporary Blueprints.',
                function()
                    var.bpCount = 0
                    for i, v in pairs(game.ReplicatedStorage.Purchasables.Structures.BlueprintStructures:GetChildren()) do
                        if not game.Players.LocalPlayer.PlayerBlueprints.Blueprints:FindFirstChild(v.Name) then
                            var.clone = v:Clone()
                            var.clone.Parent = game.Players.LocalPlayer.PlayerBlueprints.Blueprints
                            var.bpCount = var.bpCount + 1
                        end
                    end
                    SendNotification("Cynical Script 2", "You have been given ".. var.bpCount.. " blueprints.")
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Gives you the blueprints temporarily until game restart.'
                }
            )
            --#endregion

            ------------------------------------------------------------------#Base Drop
            --#region Base Drop Setup
            cat.basedrop = Main:CreateCategory('Base Drop')
            sec.dropType = cat.basedrop:CreateSection('Selection')
            sec.selTel = cat.basedrop:CreateSection('Teleport Items')
            --#endregion
            
            --#region Hide Base Drop Tools
            var.boxSizeX = 1
            var.boxSizeY = 1
            local getItems = nil
            local sortItems = {}
            var.boxSortPosition = nil
            var.placeBoxSort = nil
            var.cancelBox = nil
            var.xWideSlider = nil
            var.zWideSlider = nil
            var.sortBoxesButton = nil
            var.boxType = 'Boxes'
            var.dropType = nil
            var.teleWoods = nil
            var.standingWood = nil
            var.woodSel = nil
            var.woodRingEnable = nil
            var.woodRingRadius = nil
            var.woodRingSelection = nil
            var.boxLassoButton = nil
            var.boxLasso = nil
            var.boxLassoButton = nil
            var.boxLassoSortY = nil
            var.boxLassoSortX = nil
            var.boxesAxesLasso = nil
            var.charWoodSelect = nil

            function hideBTools()
                var.selTools:ToggleVisible(false)
                var.singItem:ToggleVisible(false)
                var.lassoTool.Visible = false
                var.teleItems.Visible = false
                library:UpdateToggle('LassoToolFlag', false)
                var.xWideSlider.Visible = false
                var.zWideSlider.Visible = false
                var.sortBoxesButton.Visible = false
                var.dropType.Visible = false
                var.teleWoods.Visible = false
                var.standingWood.Visible = false
                var.woodSel:ToggleVisible(false)
                var.woodRingEnable.Visible = false
                var.woodRingRadius.Visible = false
                var.woodRingSelection.Visible = false
                var.boxLassoButton.Visible = false
                var.boxLasso.Visible = false
                var.boxLassoButton.Visible = false
                var.boxLassoSortY.Visible = false
                var.boxLassoSortX.Visible = false
                var.boxesAxesLasso.Visible = false
                var.charWoodSelect:ToggleVisible(false)
            end
            --#endregion

            --#region Item Counter
            local itemCounter

            sec.dropType:Create('Toggle', 'Item Counter',
                function(state)
                    if itemCounter then itemCounter:Disconnect() end
                    if state then
                        itemCounter = var.mouse.Button1Up:Connect(function()
                            local targetCount = var.mouse.Target
                            local countS = 0
                            if tostring(targetCount) == 'Main' then
                                local itemToCount = targetCount.Parent
                                for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                    if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                                        if v:FindFirstChild('PurchasedBoxItemName') or (v:FindFirstChild('Type') and v.Type.Value == 'Tool') then
                                            if tostring(v) == tostring(itemToCount) then
                                                countS = countS + 1
                                            end
                                        end
                                    end
                                end
                                if countS > 1 then
                                    SendNotification('You have '.. tostring(countS).. ' '.. tostring(itemToCount).. 's.')
                                elseif countS == 1 then
                                    SendNotification('You have '.. tostring(countS).. ' '.. tostring(itemToCount).. '.')
                                end
                            else
                                SendNotification('This is not a countable item.')
                            end            
                        end)
                    else
                        itemCounter:Disconnect()
                    end
                end,
                {
                    Flag = 'ItemCounterFlag',
                    Description = 'Click an item and it will tell you how many you have.',
                    Default = false
                }
            )
            --#endregion

            --#region Enable Selection Tools
            sec.dropType:Create('Toggle', 'Enable Selection Tools',
                function(state)
                    var.selTools:ToggleVisible(state)
                    dDrag(state)
                    if state == false then
                        pcall(function() funcs.selectionBlocks:Disconnect() end)
                        for i, v in pairs(var.plr.Character.Torso:GetChildren()) do
                            if v.Name == "Part" then
                                v:Destroy()
                            end
                        end
                        library:UpdateToggle('WoodRingSelectorFlag', false)
                        hideBTools()
                        if var.mouseSelector then
                            var.mouseSelector:Disconnect()
                            var.mouseSelector = nil
                        end
                        if syn then
                            for i, v in pairs(game.CoreGui['CynicalV3']:GetChildren()) do
                                if v.Name == "SelectionBox" then
                                    v:Destroy()
                                end
                            end
                        end
                        if sWare then
                            for i, v in pairs(gethui():FindFirstChild('CynicalV3'):GetChildren()) do
                                if v.Name == "SelectionBox" then
                                    v:Destroy()
                                end
                            end
                        end
                        if var.selector then
                            var.selector:Disconnect()
                            var.selector = nil
                        end
                    end
                end,
                {
                    Flag = 'EnableSelectionFlag',
                    Description = 'Turn this on to be able to select items for base drops.',
                    Default = false
                }
            )
            --#endregion

            --#region Selection Type
            var.selTools = sec.dropType:Create('Dropdown', 'Selection Type',
                function(selected)
                    hideBTools()

                    function endSelection()
                        if var.selector then
                            var.selector:Disconnect()
                            var.selector = nil
                        end
                        if var.mouseSelector then
                            var.mouseSelector:Disconnect()
                            var.mouseSelector = nil
                        end
                    end
                    if selected == 'None' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                    elseif selected == 'Single Selection' then
                        var.selTools:ToggleVisible(true)
                        var.standingWood.Visible = true
                        local selection = Instance.new('SelectionBox')
                        selection.Color3 = Color3.new(0.2, 0.8, 0)
                        selection.Parent = game.CoreGui:FindFirstChild('CynicalV3') or gethui():FindFirstChild('CynicalV3')
                        selection.LineThickness = 0.05

                        endSelection()
                        var.mouseSelector = mouse.Move:Connect(function()
                            if #var.selectedWood > 0 then
                                var.teleWoods.Visible = true
                            end
                            if #var.selectedItems > 0 then
                                var.teleItems.Visible = true
                            end
                            local target = mouse.Target
                            if not target then
                                selection.Adornee = nil
                            else
                                if target.Parent:IsA('Model') and target.Parent.Name ~= 'Property' and (target.Name == 'Main' or target.Name == 'WoodSection') then
                                    if target.Parent:FindFirstChild('Owner') and target.Parent.Owner.Value ~= nil then
                                        if (target.Parent.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(target.Parent.Owner.Value)) and not target.Anchored then
                                            selection.Adornee = target.Parent
                                        end
                                    end
                                else
                                    selection.Adornee = nil
                                end
                            end
                        end)

                        var.selector = mouse.Button1Up:Connect(function()
                            local itemSelect = mouse.Target
                            if itemSelect.Parent:FindFirstChild('Owner') and (itemSelect.Parent.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(itemSelect.Parent.Owner.Value)) and not itemSelect.Anchored and (itemSelect.Name == 'Main' or itemSelect.Name == 'WoodSection') then
                                if itemSelect.Parent:FindFirstChild('Main') then
                                    if not table.find(var.selectedItems, itemSelect.Parent) then
                                        local selItem = Instance.new('SelectionBox')
                                        selItem.Parent = itemSelect.Parent
                                        selItem.Color3 = Color3.new(0.1, 0.4, 1)
                                        selItem.Adornee = itemSelect
                                        selItem.LineThickness = 0.05
                                        table.insert(var.selectedItems, itemSelect.Parent)
                                        var.teleItems.Visible = true
                                    else
                                        for i, v in pairs(var.selectedItems) do 
                                            if v == itemSelect.Parent then
                                                v.SelectionBox:Destroy()
                                                table.remove(var.selectedItems, i)
                                                break
                                            end
                                        end
                                    end
                                end
                                if itemSelect.Parent:FindFirstChild('WoodSection') then
                                    if not table.find(var.selectedWood, itemSelect.Parent) then
                                        local selItem = Instance.new('SelectionBox')
                                        selItem.Parent = itemSelect.Parent
                                        selItem.Color3 = Color3.new(0.1, 0.4, 1)
                                        selItem.Adornee = itemSelect
                                        selItem.LineThickness = 0.05
                                        table.insert(var.selectedWood, itemSelect.Parent)
                                        var.teleWoods.Visible = true
                                    else
                                        for i, v in pairs(var.selectedWood) do
                                            if v == itemSelect.Parent then
                                                v.SelectionBox:Destroy()
                                                table.remove(var.selectedWood, i)
                                                break
                                            end
                                        end                                
                                    end
                                end
                            end
                        end)
                    elseif selected == 'Single Item' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                        var.ownedItems = {}
                        for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                            if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer and v:FindFirstChild('Main') and not v.Main.Anchored and v:FindFirstChild('Type') and v.Type.Value ~= 'Vehicle' and v.Type.Value ~= 'Vehicle Spot' then
                                if not table.find(var.ownedItems, tostring(v)) then
                                    table.insert(var.ownedItems, tostring(v))
                                end
                            end
                        end
                        if var.ownedItems[1] == nil then
                            var.ownedItems = {'No Items Owned'}
                        end
                        var.teleItems.Visible = true
                        var.singItem:Refresh(var.ownedItems)
                        var.selTools:ToggleVisible(true)
                        var.singItem:ToggleVisible(true)
                    elseif selected == 'Lasso Tool' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                        --var.cacheItems.Visible = true
                        var.lassoTool.Visible = true
                    elseif selected == 'Lasso Box Sort' then
                        var.boxLassoButton.Visible = true
                        var.boxLasso.Visible = true
                        var.boxLassoButton.Visible = true
                        var.boxLassoSortY.Visible = true
                        var.boxLassoSortX.Visible = true
                        var.boxesAxesLasso.Visible = true
                    elseif selected == 'Single Type' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                        SendNotification('This has not been added yet.')
                    elseif selected == 'Clear Entire Selection' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                        clearItems()
                    elseif selected == 'Box Sort' then
                        endSelection()
                        var.selTools:ToggleVisible(true)
                        var.xWideSlider.Visible = true
                        var.zWideSlider.Visible = true
                        var.sortBoxesButton.Visible = true
                        var.dropType.Visible = true
                    elseif selected == 'Wood Selector' then
                        endSelection()
                        clearItems()
                        var.selTools:ToggleVisible(true)
                        var.standingWood.Visible = true
                        var.woodSel:ToggleVisible(true)
                    elseif selected == 'Wood Ring' then
                        endSelection()
                        clearItems()
                        var.selTools:ToggleVisible(true)
                        var.charWoodSelect:ToggleVisible(true)
                        var.woodRingEnable.Visible = true
                        var.woodRingRadius.Visible = true
                        var.woodRingSelection.Visible = true
                        var.standingWood.Visible = true
                    end

                end,
                {
                    Flag = 'DropTypeFlag',
                    Description = 'Choose how you would like to select items.',
                    Options = {'None', 'Single Selection', 'Single Item', 'Lasso Tool', 'Lasso Box Sort', 'Single Type', 'Box Sort', 'Wood Selector', 'Wood Ring', 'Clear Entire Selection'}
                }
            )
            --#endregion

            --#region Single Item Selection
            var.singItem = sec.dropType:Create('Dropdown', 'Select Single Item',
                function(selected)
                    for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                        if v.Name == selected and not v:FindFirstChild('SelectionBox') and v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                            local selItem = Instance.new("SelectionBox")
                            selItem.Parent = v
                            selItem.Color3 = Color3.new(0.1, 0.4, 1)
                            selItem.Adornee = v
                            selItem.LineThickness = 0.05
                            table.insert(var.selectedItems, v)
                        end
                    end
                end,
                {
                    Flag = 'SingleItemFlag',
                    Description = 'Choose single items for base drop.',
                    Options = var.ownedItems
                }
            )
            --#endregion

            --#region Wood Selector
            var.woodSel = sec.dropType:Create('Dropdown', 'Wood Selection',
                function(selected)
                    local tree = var.trees[selected]
                    for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                        if v.Name == 'Plank' and v:FindFirstChild('Owner') and (v.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(v.Owner.Value)) and v:FindFirstChild('TreeClass') and v.TreeClass.Value == tree then
                            if not v:FindFirstChild('SelectionBox') then
                                local selItem = Instance.new("SelectionBox")
                                selItem.Parent = v
                                selItem.Color3 = Color3.new(0.1, 0.4, 1)
                                selItem.Adornee = v
                                selItem.LineThickness = 0.05
                                table.insert(var.selectedWood, v)
                            end
                        end
                    end
                    if #var.selectedWood > 0 then
                        var.teleWoods.Visible = true
                    else
                        SendNotification('You do not have any of that wood type.')
                    end
                end,
                {
                    Flag = 'WoodSelectorFlag',
                    Description = 'This selects the wood that you have for teleporting the wood.',
                    Options = var.treeLabels
                }
            )
            --#endregion

            --#region Lasso Tool
            --[[
            var.cacheItems = sec.dropType:Create('Button', 'Cache Owned Items', 
                function()
                    cacheItems()
                end,
                {
                Description = 'This saves your items so the lasso tool will be less laggy.',
                BtnText = 'Go!'
                }
            )
            ]]
            var.lassoTool = sec.dropType:Create('Toggle', 'Lasso Tool',
                function(state)
                    cacheItems()
                    if dragSelect then
                        dragSelect:Disconnect()
                    end
                    if state then
                        dragSelect = userinputservice.InputBegan:connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 and boxDrag then
                                Frame.Visible = true
                                Frame.Position = UDim2.new(0,Mouse.X,0,Mouse.Y)
                                while Run.RenderStepped:wait() and userinputservice:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                                    Frame.Size = UDim2.new(0,Mouse.X,0,Mouse.Y) - Frame.Position
                                    for _ ,v in next, cachedItems do
                                        if not v:FindFirstChild('SelectionBox') then
                                            local screenpos, visible = camera:WorldToScreenPoint(v.Main.CFrame.p)
                                            if visible then
                                                if is_in_frame(screenpos, Frame) then
                                                    local a = Instance.new("SelectionBox", v)
                                                    a.Adornee = a.Parent
                                                    a.Color3 = Color3.new(0.1, 0.4, 1)
                                                    a.LineThickness = 0.05
                                                    table.insert(var.selectedItems, v)
                                                    var.teleItems.Visible = true
                                                end
                                            else
                                                if v.Main:FindFirstChild("SelectionBox") then
                                                    v.Main.SelectionBox:Destroy()
                                                end
                                            end
                                        end
                                    end
                                    Run.RenderStepped:wait()
                                end
                                Frame.Size = UDim2.new(0,1,0,1)
                                Frame.Visible = false
                            end
                        end)
                    else
                        pcall(function() dragSelect:Disconnect() end)
                    end
                end,
                {
                    Flag = 'LassoToolFlag',
                    Description = 'This will enable or disable the lasso tool for base drops.',
                    Default = false
                }
            )
            --#endregion

            --#region Lasso Box Sort
            var.boxSortPositionLasso = nil
            var.placeBoxSortLasso = nil
            var.lassoBoxX = 6
            var.lassoBoxY = 6
            var.boxesOrNot = false

            local boxSortLasso = function(itemTable, boxX, boxY)
                if itemTable[1] then
                    local maxRow = boxX
                    local maxColumn = boxY
                    local maxHeight = 1
                    local preview = Instance.new('Part', game.Workspace)
                    preview.Name = 'Preview'
                    preview.Anchored = true
                    preview.Transparency = 1
                    preview.CanCollide = false
                    
                    local previewBox = Instance.new('SelectionBox',preview)
                    preview.SelectionBox.LineThickness = 0.05
                    while wait() do
                        if #itemTable <= boxX * boxY * maxHeight then
                            break
                        else
                            maxHeight = maxHeight + 1
                        end
                    end
                    
                    preview.Size = Vector3.new(itemTable[1].Main.Size.X * maxColumn, itemTable[1].Main.Size.Y * maxHeight, itemTable[1].Main.Size.Z * maxRow)
                    previewBox.Adornee = preview
                    local yy
                    if maxHeight == 1 then
                        yy = -preview.Size.Y
                    else
                        yy = -(preview.Size.Y - itemTable[1].Main.Size.Y/2)
                    end
                    local yyy = 0
                    if maxHeight > 2 then
                        yyy = (maxHeight - 2) * itemTable[1].Main.Size.Y/2
                    end
                    local previewBoxPos = preview.Position + Vector3.new(-(preview.Size.X/2 + itemTable[1].Main.Size.X/2), yy + yyy,-(preview.Size.Z/2 + itemTable[1].Main.Size.Z/2))
                    local itemIndex2 = 1
                    for y = 1, maxHeight do
                        for x = 1, maxColumn do
                            for z = 1, maxRow do
                                if itemTable[itemIndex2] then
                                    local item = itemTable[itemIndex2]:Clone()
                                    item.Parent = preview
                                    item.Main.CanCollide = false
                                    item.Main.Orientation = Vector3.new(0,0,-1)
                                    item.Main.Position = Vector3.new(previewBoxPos.X + x * (itemTable[1].Main.Size.X), previewBoxPos.Y + y * (itemTable[1].Main.Size.Y), previewBoxPos.Z + z * (itemTable[1].Main.Size.Z))
                                    item.Main.Transparency = 0.7
                                    if item.Main:FindFirstChild('ItemImage') then
                                        for i,v in pairs(item.Main:GetChildren()) do
                                            if v.Name == 'ItemImage' then
                                                v.Transparency = 0.7
                                            end
                                        end
                                    end
                                    item.SelectionBox:Destroy()
                                    local weld = Instance.new('WeldConstraint', item)
                                    weld.Part0 = item.Main
                                    weld.Part1 = preview
                                    itemIndex2 = itemIndex2 + 1
                                end
                            end
                        end
                    end
                    var.boxSortPositionLasso = mouse.Move:Connect(function()
                        mouse.TargetFilter = preview
                        local hit = mouse.Hit.Position
                        if mouse.Target.Name ~= 'Ground' then
                            preview.CFrame = CFrame.new(hit.X - preview.Size.X/2, hit.Y + preview.Size.Y/2, hit.Z - preview.Size.Z/2)
                        end
                    end)
                    var.placeBoxSortLasso = mouse.Button1Up:Connect(function()
                        pcall(function() var.boxSortPositionLasso:Disconnect() end)
                        local pos = preview.CFrame + Vector3.new(-(preview.Size.X/2 + itemTable[1].Main.Size.X/2), yy + yyy,-(preview.Size.Z/2 + itemTable[1].Main.Size.Z/2))
                        local itemIndex = 1
                        for y = 1, maxHeight do
                            for x = 1, maxColumn do
                                for z = 1, maxRow do
                                    if itemTable[itemIndex] then
                                        local item = itemTable[itemIndex]
                                        local originProperty
                                        for i,v in pairs(game.Workspace.Properties:GetChildren()) do
                                            if v.Owner.Value == item.Owner.Value then
                                                originProperty = v.OriginSquare.CFrame + Vector3.new(0, 5, 0)
                                            end
                                        end
                                        game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, originProperty, game.Players.LocalPlayer, nil, item, true)
                                        game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, CFrame.new(pos.X + x * (itemTable[1].Main.Size.X), pos.Y + y * (itemTable[1].Main.Size.Y), pos.Z + z * (itemTable[1].Main.Size.Z)), game.Players.LocalPlayer, nil, item, true)
                                        pcall(function() itemTable[itemIndex].SelectionBox:Destroy() end)
                                        itemIndex = itemIndex + 1
                                    end
                                end
                            end
                        end
                        pcall(function() preview:Destroy() end)
                        pcall(function() var.placeBoxSortLasso:Disconnect() end)
                        pcall(function() var.boxSortPositionLasso:Disconnect() end)
                        var.BoxEnded = true
                    end)
                end
            end

            var.boxLasso = sec.dropType:Create('Toggle', 'Lasso Box Sort',
                function(state)
                    cacheItems()
                    if dragSelect then
                        dragSelect:Disconnect()
                    end
                    if state then
                        dragSelect = userinputservice.InputBegan:connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 and boxDrag then
                                Frame.Visible = true
                                Frame.Position = UDim2.new(0,Mouse.X,0,Mouse.Y)
                                while Run.RenderStepped:wait() and userinputservice:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                                    Frame.Size = UDim2.new(0,Mouse.X,0,Mouse.Y) - Frame.Position
                                    for _ ,v in next, cachedItems do
                                        if not v:FindFirstChild('SelectionBox') then
                                            local screenpos, visible = camera:WorldToScreenPoint(v.Main.CFrame.p)
                                            if visible then
                                                if is_in_frame(screenpos, Frame) then
                                                    local a = Instance.new("SelectionBox", v)
                                                    a.Adornee = a.Parent
                                                    a.Color3 = Color3.new(0.1, 0.4, 1)
                                                    a.LineThickness = 0.05
                                                    table.insert(var.selectedItems, v)
                                                    var.teleItems.Visible = true
                                                end
                                            else
                                                if v.Main:FindFirstChild("SelectionBox") then
                                                    v.Main.SelectionBox:Destroy()
                                                end
                                            end
                                        end
                                    end
                                    Run.RenderStepped:wait()
                                end
                                Frame.Size = UDim2.new(0,1,0,1)
                                Frame.Visible = false
                            end
                        end)
                    else
                        pcall(function() dragSelect:Disconnect() end)
                    end
                end,
                {
                    Flag = 'LassoBoxSortFlag',
                    Description = 'This will allow you box sort with lasso.',
                    Default = false
                }
            )

            var.boxLassoSortX = sec.dropType:Create('Slider', 'Box Sort Width',
                function(value)
                    var.lassoBoxX = value
                end,
                {
                    Flag = 'boxLassoSortXFlag',
                    Description = 'How wide do you want the lasso box sort?',
                    Min = 1,
                    Max = 50,
                    Default = 6
                }
            )

            var.boxLassoSortY = sec.dropType:Create('Slider', 'Box Sort Width',
                function(value)
                    var.lassoBoxY = value
                end,
                {
                    Flag = 'boxLassoSortYFlag',
                    Description = 'How deep do you want the lasso box sort?',
                    Min = 1,
                    Max = 50,
                    Default = 6
                }
            )

            var.boxesAxesLasso = sec.dropType:Create('Toggle', 'Axes/Boxes Option',
                function(state)
                    var.boxesOrNot = state
                end,
                {
                    Flag = 'boxesAxesToggleFlag',
                    Description = 'Choose between boxes or axes.',
                    Default = false
                }
            )

            var.boxLassoButton = sec.dropType:Create('Button', 'Start Box Sort',
                function()
                    local getItems = {}
                    for i, v in pairs(var.selectedItems) do
                        if var.boxesOrNot then
                            if not table.find(getItems, v.Name) and (v:FindFirstChild('PurchasedBoxItemName') or (v:FindFirstChild('Type') and v.Type.Value == 'Gift')) then
                                table.insert(getItems, v.Name)
                            end
                        else
                            if not table.find(getItems, v.Name) and v:FindFirstChild('ToolName') then
                                table.insert(getItems, v.Name)
                            end
                        end
                    end
                    for i, v in pairs(getItems) do
                    end
                    for s = 1, #getItems do
                        local itemToGet = getItems[1]
                        local moveItems = {}
                        for i, v in pairs(var.selectedItems) do
                            if var.boxesOrNot then
                                if tostring(v) == tostring(itemToGet) and (v:FindFirstChild('PurchasedBoxItemName') or (v:FindFirstChild('Type') and v.Type.Value == 'Gift')) then
                                    table.insert(moveItems, v)
                                end
                            else
                                if tostring(v) == tostring(itemToGet) and v:FindFirstChild('ToolName') then
                                    table.insert(moveItems, v)
                                end
                            end
                        end  
                        table.remove(getItems, 1)
                        var.BoxEnded = false
                        boxSortLasso(moveItems, var.lassoBoxX, var.lassoBoxY)
                        repeat
                            wait()
                        until var.BoxEnded == true
                    end
                    getItems = {}
                    moveItems = {}
                    var.selectedItems = {}
                    clearItems()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Box Sorts all the items you selected with the lasso tool.'
                }
            )
            --#endregion

            --#region Wood Ring
            var.selRange = 30
            local funcs = {}
            var.selWoodPlayer = game.Players.LocalPlayer

            var.woodRingEnable = sec.dropType:Create('Toggle', 'Enable Wood Ring',
                function(state)
                    if state then
                        local character = game.Players.LocalPlayer.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        local parts = {}
                        local numberOfParts = 64
            
                        for _ = 1, numberOfParts do
                            table.insert(parts, Instance.new("Part"))
                        end
            
                        for i, part in pairs(parts) do
                            part.Anchored = true
                            part.CanCollide = false
                            part.Parent = var.plr.Character.Torso
                            part.Size = Vector3.new(0.5, 1, 0.5)
                            part.Material = Enum.Material.Glass
                            part.BrickColor = BrickColor.new("Lime green")
                            part.Shape = Enum.PartType.Ball
                            part.Transparency = 0.2
                        end
            
                        local fullCircle = 2 * math.pi
            
                        local function getXAndZPositions(angle)
                            local x = math.cos(angle) * var.selRange
                            local z = math.sin(angle) * var.selRange
                            return x, z
                        end
                        funcs.selectionBlocks = game:GetService("RunService").Heartbeat:Connect(function()
                            for i, part in pairs(parts) do
                                local angle = i * (fullCircle / #parts)
                                local x, z = getXAndZPositions(angle)
                                
                                local position = (hrp.CFrame * CFrame.new(x, 0, z)).p
                                local lookAt = hrp.Position
                                
                                part.CFrame = CFrame.new(position, lookAt)
                            end
                        end)
                    else
                        funcs.selectionBlocks:Disconnect()
                        for i, v in pairs(var.plr.Character.Torso:GetChildren()) do
                            if v.Name == "Part" then
                                v:Destroy()
                            end
                        end
                    end 
                end,
                {
                    Flag = 'WoodRingSelectorFlag',
                    Description = 'Enable/Disable the ring selector.',
                    Default = false
                }
            )

            var.woodRingRadius = sec.dropType:Create('Slider', 'Ring Size',
                function(value)
                    var.selRange = value
                end,
                {
                    Flag = 'WoodRingRadiusFlag',
                    Description = 'How big do you want the ring? Duh!',
                    Min = 5,
                    Max = 80,
                    Default = 20
                }
            )

            var.charWoodSelect = sec.dropType:Create('Dropdown', 'Choose the player',
                function(selected)
                    var.selWoodPlayer = game.Players[selected]
                end,
                {
                    Flag = 'WoodPlayerListFlag',
                    PlayerList = true,
                    Description = 'Choose the player you want to select their wood.'
                }
            )

            var.woodRingSelection = sec.dropType:Create('Button', 'Select Items', 
                function()
                    if var.selWoodPlayer ~= game.Players.LocalPlayer then
                        var.isWhiteListed = game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(var.selWoodPlayer)
                    end
                    for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                        if v.Name ~= "PlaceholderPart" then
                            if v:FindFirstChild("Owner") and v.Owner.Value ~= nil then
                                if v.Owner.Value == game.Players.LocalPlayer or (v.Owner.Value == var.selWoodPlayer and var.isWhiteListed) then
                                    if v:FindFirstChild("WoodSection") ~= nil then
                                        if (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p-v.WoodSection.CFrame.p).magnitude <= var.selRange then
                                            if not v:FindFirstChild("SelectionBox") then
                                                local selItem = Instance.new("SelectionBox")
                                                selItem.Parent = v
                                                selItem.Color3 = Color3.fromRGB(206, 111, 23)
                                                selItem.Adornee = v
                                                table.insert(var.selectedWood, v)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if #var.selectedWood > 0 then
                        var.teleWoods.Visible = true
                    else
                        var.teleWoods.Visible = false
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Select the items that are in the ring.'
                }
            )
            --#endregion
        
            --#region Box Sort

            var.xWideSlider = sec.dropType:Create('Slider', 'How many wide?',
                function(value)
                    var.boxSizeX = value
                end,
                {
                    Description = 'This lets you select how wide you want the box stack.',
                    Flag = 'WideSliderFlag',
                    Min = 1,
                    Max = 50,
                    Default = 1
                }
            )

            var.zWideSlider = sec.dropType:Create('Slider', 'How many thick?',
                function(value)
                    var.boxSizeY = value
                end,
                {
                    Description = 'This lets you select how thick you want the box stack.',
                    Flag = 'ThickSliderFlag',
                    Min = 1,
                    Max = 50,
                    Default = 1
                }
            )

            var.dropType = sec.dropType:Create('Toggle', 'Boxes or Axes?',
                function(state)
                    if state then
                        var.boxType = 'Axes'
                    else
                        var.boxType = 'Boxes'
                    end
                end,
                {
                    Flag = 'BoxChosenTypeFlag',
                    Description = 'Choose between axes or boxes.',
                    Default = false
                }
            )
            var.sortBoxesButton = sec.dropType:Create('Button', 'Select the item you want to sort.',
                function()
                    sortItems = {}
                    SendNotification('Click on the item or axe you want to sort.')
                    count = 0
                    for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                        if v:FindFirstChild('SelectionBox') then
                            v.SelectionBox:Destroy()
                        end
                    end
                    pcall(function() getItems:Disconnect() end)
                    pcall(function() var.boxSortPosition:Disconnect() end)
                    pcall(function() var.cancelBox:Disconnect() end)
                    pcall(function() var.placeBoxSort:Disconnect() end)
                    getItems = var.mouse.Button1Up:Connect(function()
                        local target = var.mouse.Target
                        if target.Parent:FindFirstChild('PurchasedBoxItemName') or target.Parent.Type.Value == 'Tool' or target.Parent.Type.Value == 'Gift' or target.Parent.Type.Value == 'Loose Item' then
                            if target.Parent:FindFirstChild('Owner') and target.Parent.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(target.Parent.Owner.Value) then
                                for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do  
                                    if v.Name == target.Parent.Name and (v:FindFirstChild('Owner') and (v.Owner.Value == game.Players.LocalPlayer or game.ReplicatedStorage.Interaction.ClientIsWhitelisted:InvokeServer(v.Owner.Value))) then
                                        if not table.find(sortItems, v.Parent) then
                                            if var.boxType == 'Axes' and v:FindFirstChild('ToolName')then
                                                game:GetService("ReplicatedStorage").Interaction.ClientRequestOwnership:FireServer(v)
                                                local selItem = Instance.new("SelectionBox")
                                                selItem.Parent = v
                                                selItem.Color3 = Color3.fromRGB(255, 16, 240)
                                                selItem.Adornee = v
                                                selItem.LineThickness = 0.05
                                                table.insert(sortItems, v)
                                            elseif var.boxType == 'Boxes' and ((v:FindFirstChild('PurchasedBoxItemName') or v.Type.Value == 'Gift') or (v.Name == 'Candy')) then
                                                game:GetService("ReplicatedStorage").Interaction.ClientRequestOwnership:FireServer(v)
                                                local selItem = Instance.new("SelectionBox")
                                                selItem.Parent = v
                                                selItem.Color3 = Color3.fromRGB(255, 16, 240)
                                                selItem.Adornee = v
                                                selItem.LineThickness = 0.05
                                                table.insert(sortItems, v)
                                            end
                                        end
                                    end 
                                end 
                                pcall(function() getItems:Disconnect() end)
                                if sortItems[1] then
                                    local maxRow = var.boxSizeX
                                    local maxColumn = var.boxSizeY
                                    local maxHeight = 1
                                    local preview = Instance.new('Part', game.Workspace)
                                    preview.Name = 'Preview'
                                    preview.Anchored = true
                                    preview.Transparency = 1
                                    preview.CanCollide = false
                                    
                                    local previewBox = Instance.new('SelectionBox',preview)
                                    preview.SelectionBox.LineThickness = 0.05
                                    while wait() do
                                        if #sortItems <= var.boxSizeX * var.boxSizeY * maxHeight then
                                            break
                                        else
                                            maxHeight = maxHeight + 1
                                        end
                                    end
                                    
                                    preview.Size = Vector3.new(sortItems[1].Main.Size.X * maxColumn, sortItems[1].Main.Size.Y * maxHeight, sortItems[1].Main.Size.Z * maxRow)
                                    previewBox.Adornee = preview
                                    local yy
                                    if maxHeight == 1 then
                                        yy = -preview.Size.Y
                                    else
                                        yy = -(preview.Size.Y - sortItems[1].Main.Size.Y/2)
                                    end
                                    local yyy = 0
                                    if maxHeight > 2 then
                                        yyy = (maxHeight - 2) * sortItems[1].Main.Size.Y/2
                                    end
                                    local previewBoxPos = preview.Position + Vector3.new(-(preview.Size.X/2 + sortItems[1].Main.Size.X/2), yy + yyy,-(preview.Size.Z/2 + sortItems[1].Main.Size.Z/2))
                                    local itemIndex2 = 1
                                    for y = 1, maxHeight do
                                        for x = 1, maxColumn do
                                            for z = 1, maxRow do
                                                if sortItems[itemIndex2] then
                                                    local item = sortItems[itemIndex2]:Clone()
                                                    item.Parent = preview
                                                    item.Main.CanCollide = false
                                                    item.Main.Orientation = Vector3.new(0,0,-1)
                                                    item.Main.Position = Vector3.new(previewBoxPos.X + x * (sortItems[1].Main.Size.X), previewBoxPos.Y + y * (sortItems[1].Main.Size.Y), previewBoxPos.Z + z * (sortItems[1].Main.Size.Z))
                                                    item.Main.Transparency = 0.7
                                                    if item.Main:FindFirstChild('ItemImage') then
                                                        for i,v in pairs(item.Main:GetChildren()) do
                                                            if v.Name == 'ItemImage' then
                                                                v.Transparency = 0.7
                                                            end
                                                        end
                                                    end
                                                    item.SelectionBox:Destroy()
                                                    local weld = Instance.new('WeldConstraint', item)
                                                    weld.Part0 = item.Main
                                                    weld.Part1 = preview
                                                    itemIndex2 = itemIndex2 + 1
                                                end
                                            end
                                        end
                                    end
                                    var.cancelBox = mouse.Button2Up:Connect(function()
                                        if game.Workspace:FindFirstChild('Preview') then
                                            game.Workspace.Preview:Destroy()
                                            pcall(function() var.cancelBox:Disconnect() end)
                                            pcall(function() var.placeBoxSort:Disconnect() end)
                                            pcall(function() var.boxSortPosition:Disconnect() end)
                                            for i, v in pairs(sortItems) do
                                                pcall(function() v.SelectionBox:Destroy() end)
                                            end
                                            sortItems = {}
                                            SendNotification('Box sort has been canceled.')
                                        end
                                    end)
                                    var.boxSortPosition = mouse.Move:Connect(function()
                                        mouse.TargetFilter = preview
                                        local hit = mouse.Hit.Position
                                        if mouse.Target.Name ~= 'Ground' then
                                            preview.CFrame = CFrame.new(hit.X - preview.Size.X/2, hit.Y + preview.Size.Y/2, hit.Z - preview.Size.Z/2)
                                        end
                                    end)
                                    var.placeBoxSort = mouse.Button1Down:Connect(function()
                                        pcall(function() var.boxSortPosition:Disconnect() end)
                                        local pos = preview.CFrame + Vector3.new(-(preview.Size.X/2 + sortItems[1].Main.Size.X/2), yy + yyy,-(preview.Size.Z/2 + sortItems[1].Main.Size.Z/2))
                                        local itemIndex = 1
                                        for y = 1, maxHeight do
                                            for x = 1, maxColumn do
                                                for z = 1, maxRow do
                                                    if sortItems[itemIndex] then
                                                        local item = sortItems[itemIndex]
                                                        local originProperty
                                                        for i,v in pairs(game.Workspace.Properties:GetChildren()) do
                                                            if v.Owner.Value == item.Owner.Value then
                                                                originProperty = v.OriginSquare.CFrame + Vector3.new(0, 5, 0)
                                                            end
                                                        end
                                                        game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, originProperty, game.Players.LocalPlayer, nil, item, true)
                                                        game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, CFrame.new(pos.X + x * (sortItems[1].Main.Size.X), pos.Y + y * (sortItems[1].Main.Size.Y), pos.Z + z * (sortItems[1].Main.Size.Z)), game.Players.LocalPlayer, nil, item, true)
                                                        pcall(function() sortItems[itemIndex].SelectionBox:Destroy() end)
                                                        itemIndex = itemIndex + 1
                                                    end
                                                end
                                            end
                                        end
                                        pcall(function() preview:Destroy() end)
                                        pcall(function() var.placeBoxSort:Disconnect() end)
                                        pcall(function() var.cancelBox:Disconnect() end)
                                        pcall(function() var.boxSortPosition:Disconnect() end)
                                        SendNotification('Sorting has been completed.')
                                    end)
                                end
                            else
                                SendNotification('That item does not belong to you or are whitelisted.')
                                pcall(function() getItems:Disconnect() end)
                            end
                        else
                            pcall(function() getItems:Disconnect() end)
                            SendNotification('Canceled. That is not a box item or an axe.')
                        end
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This allows you to select the item you want to stack in box sort.'
                }
            )

            --#endregion

            --#region Teleport Selected Items
            var.standingWoodz = false 

            var.standingWood = sec.selTel:Create('Toggle', 'Laying Down/Standing Wood',
                function(state)
                    var.standingWoodz = state
                end,
                {
                    Flag = 'StandingWoodFlag',
                    Description = 'Off means wood lays down and on means wood stands up after teleporting.',
                    Default = false
                }
            )

            library:UpdateToggle('StandingWoodFlag', GuiSettings['StandingWoodOption'])

            var.teleItems = sec.selTel:Create('Button', 'Teleport Selected Items',
                function()
                    local chrPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    if #var.selectedItems > 0 then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = chrPos + Vector3.new(4, 2, 4)
                        for i, v in pairs(var.selectedItems) do
                            v:FindFirstChild('SelectionBox'):Destroy()
                            game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, chrPos, game.Players.LocalPlayer, nil, v, true)                    
                        end
                        var.selectedItems = {}
                    end
                end,    
                {
                    Description = 'Teleport the selected items you chose to your character location.',
                    BtnText = 'Go!'
                }
            )

            var.teleWoods = sec.selTel:Create('Button', 'Teleport Selected Wood',
                function()   
                    local chrPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = chrPos + Vector3.new(5, 2, 5)
                    if #var.selectedWood > 0 then
                        for i, v in pairs(var.selectedWood) do
                            if v:FindFirstChild('SelectionBox') then v.SelectionBox:Destroy() end
                            if (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p - v.WoodSection.CFrame.p).magnitude > 40 then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.WoodSection.CFrame.p) + Vector3.new(2, 2, 2)
                            end
                            wait()
                            v.PrimaryPart = v.WoodSection
                            for i = 1, 6 do
                                game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(v)
                                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                                if var.standingWoodz then
                                    v:SetPrimaryPartCFrame(chrPos + Vector3.new(0, v.WoodSection.Size.Y / 2, 0))
                                else
                                    v:SetPrimaryPartCFrame(chrPos * CFrame.Angles(math.rad(90), 0, 0))
                                end
                                wait()
                            end
                        end
                        var.selectedWood = {}
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Teleport the wood you selected to the location your character was standing.'
                }
            )
            hideBTools()
            --#endregion

            ------------------------------------------------------------------#Base Slot
            --#region Base Setup
            cat.base = Main:CreateCategory('Base')
            sec.land = cat.base:CreateSection('Land')
            sec.deload = cat.base:CreateSection('Plot Options')
            sec.bloos = cat.base:CreateSection('Blueprints')
            sec.autobuild = cat.base:CreateSection('Auto Build')
            --#endregion

            --#region Controls 
            var.baseSelect = nil
            var.loadBaseButton = nil
            var.delBases = nil
            var.plrBaseSave = nil
            var.saveBaseBtn = nil
            var.saveBaseName = nil
            var.loadBaseName = nil
            var.loadBaseBtn = nil
            var.selectBuildType = nil
            --#endregion

            --#region Hide Builders
            function hideBuilders()
                var.baseSelect:ToggleVisible(false)
                var.loadBaseButton.Visible = false
                var.delBases.Visible = false
                var.plrBaseSave:ToggleVisible(false)
                var.saveBaseBtn.Visible = false
                var.saveBaseName.Visible = false
                var.loadBaseName.Visible = false
                var.loadBaseBtn.Visible = false
                var.loadBlues.Visible = false
                var.contiBlues.Visible = false
                var.canceBlues.Visible = false
            end
            --#endregion

            --#region Free land
            sec.land:Create('Button', 'Free Land',
                function()
                    var.Base2 = nil
                    var.Square2 = nil
                    var.closestSlot = 10000000000
                    var.chosenSlot = nil
                    for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                        if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                            var.Base2 = v
                            var.Square2 = v.OriginSquare
                        end
                    end
                    if var.Square2 == nil then
                        for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                            if v:FindFirstChild('Owner') and v:FindFirstChild('OriginSquare') and v.Owner.Value == nil then
                                if (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p - v.OriginSquare.CFrame.p).magnitude < var.closestSlot then
                                    var.closetSlot = (game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.p - v.OriginSquare.CFrame.p).magnitude
                                    var.chosenSlot = v
                                end
                            end
                        end
                        game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(var.chosenSlot, var.chosenSlot.OriginSquare.OriginCFrame.Value.p + Vector3.new(0, 3, 0))
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = var.chosenSlot.OriginSquare.CFrame + Vector3.new(0, 4, 0)
                        SendNotification('Your land is now available to use.')
                    else
                        SendNotification('You already have land.')
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(var.Square2.CFrame.p) + Vector3.new(0, 4, 0)
                    end
                end,
                {
                    Description = "Clicking this will give you free land if you don't have any.",
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Max Land
            sec.land:Create('Button', 'Max Land',
                function()
                    var.Base = nil
                    var.Square = nil
                    for i, v in pairs(game.Workspace.Properties:GetChildren()) do
                        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
                            var.Base = v
                            var.Square = v.OriginSquare
                            break
                        end
                    end
                    if not var.Base or not var.Square then 
                        SendNotification('You do not have a slot of land to get max land.')
                        return 
                    end
                    function makeBase(posX)
                        game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(var.Base, posX)
                    end
                    for i = -2, 2 do
                        for l = -2, 2 do
                            if math.abs(i) + math.abs(l) ~= 0 then
                                makeBase(CFrame.new(var.Square.Position.X + i * 40, var.Square.Position.Y, var.Square.Position.Z + l * 40))
                            end
                        end
                    end
                    for nin, van in pairs(game.Workspace:GetChildren()) do
                        if van.Name == "TreeRegion" then
                            for i, v in pairs(van:GetChildren()) do
                                if v:FindFirstChild("WoodSection") then
                                    if math.abs(var.Square.CFrame.Z - v.WoodSection.CFrame.Z) <= 100 and math.abs(var.Square.CFrame.X - v.WoodSection.CFrame.X) <= 100 then
                                        game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(v:FindFirstChildOfClass("Part"))
                                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                                        game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(v)
                                    end
                                end
                            end
                        end
                    end
                    SendNotification("Your land has been delivered. Save your land.")
                end,
                {
                    Description = 'Purchases for free, all the land slots available.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Speed Deload
            sec.deload:Create('Button', 'Speed Base Deload',
                function()
                    --[[
                    if getCenter() then
                        local deLoadItems = Instance.new('BindableFunction', workspace)
                        deLoadItems.Name = 'Cynical_FastDeload'
                        deLoadItems.OnInvoke = function(v)
                            if tostring(v) == 'Yes' then
                                local saveIt = getgenv().BlockSave
                                getgenv().BlockSave = false
                                game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                                game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(game.Players.LocalPlayer.CurrentSaveSlot.Value, game.Players.LocalPlayer)
                                wait(1)
                                getgenv().BlockSave = true
                                for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                    if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                                        spawn(function()
                                            game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(v)
                                        end)
                                    end
                                end
                                wait(1)
                                game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(-1)
                                getgenv().BlockSave = saveIt
                                game:GetService('Players').LocalPlayer.CurrentSaveSlot.Set:Invoke(-1, password)
                                game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                                SendNotification('Your base has been deloaded.')
                            end
                        end
                        game.StarterGui:SetCore('SendNotification', {
                            Title = 'Fusion',
                            Text = 'Are you sure you want to use fast deload?',
                            Icon = 'rbxassetid://6243863672',
                            Duration = 10,
                            Button1 = 'Yes',
                            Button2 = 'No',
                            Callback = deLoadItems
                        })
                        repeat
                            wait(1)
                            var.count = var.count + 1
                        until var.count >= 10
                        var.count = 0
                        deLoadItems:Destroy()
                    else
                        SendNotification('You do not have a base loaded to use this.')
                    end
                    ]]
                    SendNotification('This has been temporarily disabled.')
                end,
                {
                    Description = 'This speed deloads your base for you. Dangerous to use.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Clear Entire Base
            sec.deload:Create('Button', 'Delete Base Items',
                function()
                    local delItems = Instance.new('BindableFunction', workspace)
                    delItems.Name = 'Cynical_Deleter'
                    delItems.OnInvoke = function(v)
                        if tostring(v) == 'Yes' then
                            for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                if v:FindFirstChild('Owner') and v.Owner.Value == game.Players.LocalPlayer then
                                    spawn(function()
                                        game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(v)
                                    end)
                                end
                            end

                        elseif tostring(v) == 'No' then
                            SendNotification('You have cancelled base delete.')
                        end
                    end
                    game.StarterGui:SetCore('SendNotification', {
                        Title = 'Fusion',
                        Text = 'Are you sure you want to delete all of your items?',
                        Icon = 'rbxassetid://6243863672',
                        Duration = 10,
                        Button1 = 'Yes',
                        Button2 = 'No',
                        Callback = delItems
                    })
                    repeat
                        wait(1)
                        var.count = var.count + 1
                    until var.count >= 10
                    var.count = 0
                    delItems:Destroy()
                end,
                {
                    Description = 'This will delete all the items on your base. Use it carefully.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Save Bypass
            sec.deload:Create('Button', 'Disable Save Bypass',
                function()
                    local isSaving = getgenv().BlockSave
                    getgenv().BlockSave = false
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = true
                    game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(game.Players.LocalPlayer.CurrentSaveSlot.Value, game.Players.LocalPlayer)
                    wait(20)
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                    SendNotification('Your slot has now been saved.')
                    getgenv().BlockSave = isSaving
                end,
                {
                    Description = 'This will allow you to save your slot manually whether disable saving is enabled or not.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Wire through wall
            sec.deload:Create('Button', 'Wire Through Wall', 
                function()
                    local MT;
                    MT = hookfunction(getrawmetatable(game).__namecall, function(...)
                        local method = getnamecallmethod()
                        if getcallingscript() and getcallingscript().Name == "WireDragger" then
                            if method == "FindPartOnRayWithIgnoreList" then
                                local T = {...}
                                if (T[3][2]) then
                                    T[2] = Ray.new(Vector3.new(0,0,0),Vector3.new(0,0,0))
                                    return MT(unpack(T))
                                end
                            end
                        end
                        return MT(...)
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Enabling this will allow you to run wires through walls.'
                }
            )
            --#endregion

            --#region Modded Sawmill build    
            var.getConvs = nil 
            var.firstSaw = nil
            var.getlastItems = nil

            sec.deload:Create('Toggle', 'Build Modded Sawmill',
                function(state)
                    if state then
                        local chrPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                        
                        local FirstSawmill, SecondSawmill, pressurePlate, trapDoor, wire1, wire2, wire3, wire4, wire5, wire6, wire7, sawmillPos
                        SendNotification('Click on the first sawmill.')
                        var.firstSaw = var.mouse.Button1Up:Connect(function()
                            local ms = var.mouse.Target.Parent.Parent
                            if (ms.Name == 'Model' or ms.Name == 'Sawmill4') and ms:FindFirstChild('ItemName') and ms.ItemName.Value == 'Sawmill4' then
                                if ms:FindFirstChild('Owner') and ms.Owner.Value == game.Players.LocalPlayer then
                                    if FirstSawmill and not SecondSawmill then
                                        SecondSawmill = ms
                                        local selCenter = Instance.new('SelectionBox')
                                        selCenter.Color3 = Color3.new(0, 1, 0)
                                        selCenter.Parent = SecondSawmill
                                        selCenter.Adornee = SecondSawmill
                                        selCenter.LineThickness = 0.02
                                        if FirstSawmill and SecondSawmill then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = chrPos + Vector3.new(8, 2, 8)
                                            game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, CFrame.new(chrPos.p), game.Players.LocalPlayer, nil, FirstSawmill, true)
                                            game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(nil, CFrame.new(chrPos.p), game.Players.LocalPlayer, nil, SecondSawmill, true)
                                            sawmillPos = FirstSawmill.Main.CFrame
                                            pcall(function() var.firstSaw:Disconnect() end)
                                            pcall(function() FirstSawmill.SelectionBox:Destroy() end)
                                            pcall(function() SecondSawmill.SelectionBox:Destroy() end)
                                            FirstSawmill = nil
                                            SecondSawmill = nil
                                            local conveyors = {}
                                            local selBog = Instance.new('SelectionBox')
                                            selBog.Color3 = Color3.new(0, 1, 0)
                                            var.getConvs = var.mouse.Button1Up:Connect(function()
                                                local ms = var.mouse.Target
                                                if tostring(ms) == 'Conveyor' then
                                                    if tostring(ms.Parent.Parent.Parent) == 'Model' or tostring(ms.Parent.Parent.Parent) == 'StraightConveyor' and not ms.Parent.Parent.Parent:FindFirstChild('SelectionBox') then
                                                        if ms.Parent.Parent.Parent:FindFirstChild('Owner') and ms.Parent.Parent.Parent.Owner.Value == game.Players.LocalPlayer then
                                                            local selBog = Instance.new('SelectionBox')
                                                            selBog.Color3 = Color3.new(0, 1, 0)
                                                            selBog.Parent = ms.Parent.Parent.Parent
                                                            selBog.Adornee = ms.Parent.Parent.Parent
                                                            selBog.LineThickness = 0.02
                                                            table.insert(conveyors, ms.Parent.Parent.Parent)
                                                        end
                                                    end
                                                elseif tostring(ms) == 'Part' then
                                                    if tostring(ms.Parent.Parent) == 'Model' or tostring(ms.Parent.Parent) == 'StraightConveyor' and not ms.Parent.Parent.Parent:FindFirstChild('SelectionBox') then
                                                        if ms.Parent.Parent:FindFirstChild('Owner') and ms.Parent.Parent.Owner.Value == game.Players.LocalPlayer then
                                                            local selBog = Instance.new('SelectionBox')
                                                            selBog.Color3 = Color3.new(0, 1, 0)
                                                            selBog.Parent = ms.Parent.Parent.Parent
                                                            selBog.Adornee = ms.Parent.Parent.Parent
                                                            selBog.LineThickness = 0.02
                                                            table.insert(conveyors, ms.Parent.Parent.Parent)
                                                        end
                                                    end
                                                end
                                                print('You have '..tostring(#conveyors)..' conveyors.')
                                                if #conveyors == 7 then
                                                    pcall(function() var.getConvs:Disconnect() end)
                                                    SendNotification('You have 7 conveyors.')
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[1].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(-2.9, 1.2, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[1], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[2].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(1.1, 1.2, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[2], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[3].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(5.1, 1.2, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[3], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[4].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(9.1, 1.2, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[4], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[5].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(-2.0, 3.8, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[5], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[6].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(2.0, 3.8, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[6], true)
                                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(conveyors[7].ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(6.0, 3.8, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, conveyors[7], true)
                                                    local pPlate, hHatch
                                                    var.getlastItems = var.mouse.Button1Up:Connect(function()
                                                        local mouse = var.mouse.Target
                                                        print(tostring(mouse))
                                                        if mouse.Parent:FindFirstChild('ItemName') and mouse.Parent.ItemName.Value == 'PressurePlate' then
                                                            pPlate = mouse.Parent
                                                        end
                                                        if mouse.Parent:FindFirstChild('ItemName') and mouse.Parent.ItemName.Value == 'Hatch' then
                                                            hHatch = mouse.Parent
                                                        end
                                                        if pPlate and hHatch then
                                                            pcall(function() var.getlastItems:Disconnect() end)
                                                            game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(pPlate.ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(4, 5, 0)) * CFrame.Angles(0, math.rad(180), 0), game.Players.LocalPlayer, nil, pPlate, true)
                                                            game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(hHatch.ItemName.Value, (CFrame.new(chrPos.p) + Vector3.new(4, 6.2, 0)) * CFrame.Angles(math.rad(180), 0, 0), game.Players.LocalPlayer, nil, hHatch, true)
                                                        end
                                                        
                                                    end)
                                                end

                                            end)
                                        end
                                    end                        
                                    if not FirstSawmill and ms.XLabel.SurfaceGui.TextLabel.Text == '2.8' then
                                        FirstSawmill = ms
                                        local selCenter = Instance.new('SelectionBox')
                                        selCenter.Color3 = Color3.new(0, 1, 0)
                                        selCenter.Parent = FirstSawmill
                                        selCenter.Adornee = FirstSawmill
                                        selCenter.LineThickness = 0.02
                                        SendNotification('Click on the second sawmill.')
                                    else
                                        SendNotification('The first sawmill must be set to 2.8 x 2.6')
                                    end
                                end
                            else
                                SendNotification('That is not the proper sawmill.')
                                pcall(function() var.firstSaw:Disconnect() end)
                                FirstSawmill = nil
                                SecondSawmill = nil
                            end
                        end)
                    else
                        pcall(function() var.getConvs:Disconnect() end)
                        pcall(function() var.firstSaw:Disconnect() end)
                    end
                end,
                {
                    Flag = 'BuildAutoMillFlag',
                    Description = 'This will build the modded sawmill contraption.',
                    Default = false
                }
            )
            --#endregion

            --#region Auto Gray wood
            sec.bloos:Create('Toggle', 'Gray Wood',
                function(state)
                    if state then
                        var.auto = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(child)
                            wait(0.2)
                            if child:FindFirstChild("Owner") and child.Owner.Value == game.Players.LocalPlayer then
                                if child:FindFirstChild("BuildDependentWood") and child:FindFirstChild("Type") and child.Type.Value == "Blueprint" then
                                    local partAuto = child.BuildDependentWood
                                    local position = nil
                                    if partAuto:FindFirstChild("MainCFrame") then
                                        position = partAuto.Parent.MainCFrame.Value
                                    else
                                        position = partAuto.Parent.Main.CFrame
                                    end
                                    game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure:FireServer(partAuto.Parent.ItemName.Value,position, game.Players.LocalPlayer, nil, partAuto.Parent, true)
                                end
                            end
                        end)
                    else    
                        var.auto:Disconnect()
                    end
                end,
                {
                    Flag = 'GrayWoodBluePrintFlag',
                    Description = 'Enabling this will allow any blueprints you place to turn into gray wood.',
                    Default = false
                }
            )
            --#endregion

            --#region Delete blueprint/gray wood
            var.StructDeleter = nil
            var.delStructs = 0

            sec.bloos:Create('Toggle', 'Delete Clicked Item',
                function(state)
                    if state then
                        local delStructures = Instance.new("BindableFunction", workspace)
                        delStructures.Name = "Cynical_StructureDel"
                        delStructures.OnInvoke = function(v)
                            if tostring(v) == "Yes" then
                                var.StructDeleter = var.mouse.Button1Down:Connect(function(v)
                                    local struct = var.mouse.Target
                                    if struct.Parent:FindFirstChild("Type") then
                                        if struct.Parent.Type.Value == "Structure" or struct.Parent.Type.Value == "Blueprint" and struct.Parent:FindFirstChild('Owner') and struct.Parent.Owner.Value == game.Players.LocalPlayer then
                                            game:GetService("ReplicatedStorage").Interaction.DestroyStructure:FireServer(struct.Parent)
                                            return
                                        end
                                    end
                                end)
                            end
                        end
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Cynical Script 2",
                            Text = "Are you sure you want to delete structures?",
                            Icon = "rbxassetid://6243863672",
                            Duration = 10,
                            Button1 = "Yes",
                            Button2 = "No",
                            Callback = delStructures,
                        })
                        repeat
                            wait(1)
                            var.delStructs = var.delStructs + 1
                        until var.delStructs >= 10
                        delStructures:Destroy()
                    else
                        var.StructDeleter:Disconnect()
                        var.StructDeleter = nil
                    end
                end,
                {
                    Flag = 'DeleteItemFlag',
                    Description = 'Enabling this will allow you to delete any item you own.',
                    Default = false
                }
            )
            --#endregion

            --#region Load structures
            var.selected = nil
            var.structures = game:HttpGet("https://cynmod.github.io/cynical/Bases/structures.txt", true):split("\n")
            for i, v in pairs(var.structures) do
                if #v == 0 then
                    var.structures[i] = nil
                end
            end
            --#endregion

            --#region Auto Build Select
            var.contiBlues = nil
            var.canceBlues = nil
            var.loadBlues = nil

            var.selectBuildType = sec.autobuild:Create('Dropdown', 'Auto Build Type',
                function(selected)
                    hideBuilders()
                    if selected == 'Auto Autobuild' then
                        var.baseSelect:ToggleVisible(true)
                        var.loadBaseButton.Visible = true
                        var.delBases.Visible = true
                    elseif selected == 'Manual Autobuild' then
                        var.baseSelect:ToggleVisible(true)
                        var.loadBlues.Visible = true
                    elseif selected == 'Save Local' then
                        var.plrBaseSave:ToggleVisible(true)
                        var.saveBaseBtn.Visible = true
                        var.saveBaseName.Visible = true
                    elseif selected == 'Load Local' then
                        var.loadBaseName.Visible = true
                        var.loadBaseBtn.Visible = true
                    end
                end,
                {
                    Flag = 'AutoBuildTypeFlag',
                    Description = 'Choose the type of autobuild you want to do.',
                    Options = {'Auto Autobuild', 'Manual Autobuild', 'Save Local', 'Load Local'}
                }
            )
            --#endregion

            --#region Autobuild
            var.baseSelect = sec.autobuild:Create('Dropdown', 'Choose your base.',
                function(selected)
                    var.selected = selected:gsub(".", function(v) return (v == " " and "") or v end)
                    var.selected = string.sub(var.selected, 1, string.len(var.selected) - 1)
                    getgenv().http_request = http_request or request or syn.request
                    var.payload = game:GetService("HttpService"):JSONDecode(http_request({Url="https://cynmod.github.io/cynical/Bases/"..var.selected}).Body)
                    SendNotification(tostring(#var.payload)..' blueprints are in this build.')
                    --[[local land = getCenter().Parent
                    if land then
                        local plot_pos = land.OriginSquare.Position
                        var.auto = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(child)
                            wait()
                            if child:FindFirstChild('Owner') and child.Owner.Value == game.Players.LocalPlayer then
                                local auto_part = Instance.new('Part')
                                auto_part.Name = 'prev_part'
                                auto_part.Anchored = true
                                auto_part.Parent = game.Workspace
                                auto_part.Color = Color3.new(0, 1, 0)
                                auto_part.Size = child.BuildDependentWood.Size
                                auto_part.CFrame = child.BuildDependentWood.CFrame--Main.CFrame * CFrame.Angles(math.rad(90), math.rad(90), 0)
                                auto_part.Transparency = 0.2
                                game:GetService("ReplicatedStorage").Interaction.DestroyStructure:FireServer(child)
                                
                            end
                        end)
                        for i, v in pairs(var.payload) do
                            local main_cframe = CFrame.new(unpack(v['main_cframe'])) + plot_pos
                            game.ReplicatedStorage.PlaceStructure.ClientPlacedBlueprint:FireServer(v['structure_type'], main_cframe, game.Players.LocalPlayer)
                            wait()
                        end
                        var.auto:Disconnect()
                    end]]
                end,
                {
                    Flag = 'BaseChosenFlag',
                    Description = 'Choose the base you want to load.',
                    Options = var.structures
                }
            )
            var.continueLoad = false
            var.CancelAutoBuild = false
            var.bluePrintCount = 0
            var.loadBlues = sec.autobuild:Create('Button', 'Load Blueprints',
                function()
                    if var.selected then
                        var.contiBlues.Visible = true
                        getgenv().http_request = http_request or request or syn.request
                        var.payload = game:GetService("HttpService"):JSONDecode(http_request({Url="https://cynmod.github.io/cynical/Bases/"..var.selected}).Body)
                        local land = getCenter().Parent
                        if land then
                            local plot_pos = land.OriginSquare.Position
                            var.canceBlues.Visible = true
                            for i, v in pairs(var.payload) do
                                local main_cframe = CFrame.new(unpack(v['main_cframe'])) + plot_pos
                                game.ReplicatedStorage.PlaceStructure.ClientPlacedBlueprint:FireServer(v['structure_type'], main_cframe, game.Players.LocalPlayer)
                                var.bluePrintCount = var.bluePrintCount + 1
                                if var.bluePrintCount >= 30 then
                                    var.bluePrintCount = 0
                                    var.contiBlues.Visible = true
                                    var.loadBlues.Visible = false
                                    SendNotification('Press the button to continue once all are converted.')
                                    repeat
                                        wait()
                                        if var.CancelAutoBuild then
                                            break
                                        end
                                    until var.continueLoad
                                    var.continueLoad = false
                                    var.contiBlues.Visible = false
                                    var.loadBlues.Visible = true
                                end
                                if var.CancelAutoBuild then
                                    var.CancelAutoBuild = false
                                    break
                                end
                            end
                        else
                            SendNotification('You do not have any land loaded.')
                        end
                    else
                        SendNotification('You need to pick a build first.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Delete all the auto build hologram.'
                }
            )

            var.contiBlues = sec.autobuild:Create('Button', 'Continue Building',
                function()
                    var.continueLoad = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Click this to load the next set of blueprints.'
                }
            )

            var.canceBlues = sec.autobuild:Create('Button', 'Cancel Autobuild',
                function()
                    var.CancelAutoBuild = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Cancel the manual autobuild feature.'
                }
            )

            var.auto = nil

            --#region Load Base
            var.loadBaseButton = sec.autobuild:Create('Button', 'Load Base',
                function()
                    if var.selected then
                        hideBuilders()
                        var.selectBuildType:ToggleVisible(false)
                        getgenv().http_request = http_request or request or syn.request
                        var.payload = game:GetService("HttpService"):JSONDecode(http_request({Url="https://cynmod.github.io/cynical/Bases/"..var.selected}).Body)
                        local land = getCenter().Parent
                        var.made = false
                        if land then
                            local plot_pos = land.OriginSquare.Position
                            local blueprint_count = 0
                            function fill_bps()
                                for i, child in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                    if child:FindFirstChild("Type") and child:FindFirstChild("Owner") and child.Owner.Value == game.Players.LocalPlayer then
                                        if child.Type.Value == "Blueprint" then
                                            game.ReplicatedStorage.PlaceStructure.ClientPlacedStructure:FireServer(child.ItemName.Value, child.Main.CFrame, game.Players.LocalPlayer, nil, child, true)
                                        end
                                    end
                                end
                            end
                            var.auto = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(child)
                                wait()
                                if child:FindFirstChild("Owner") then
                                    if tostring(child.Owner.Value) == tostring(var.plr) then
                                        if child:FindFirstChild("BuildDependentWood") then
                                            if child:FindFirstChild("Type") then
                                                if child.Type.Value == "Blueprint" then
                                                    local partAuto = child.BuildDependentWood
                                                    local position = nil
                                                    if partAuto:FindFirstChild("MainCFrame") then
                                                        position = partAuto.Parent.MainCFrame.Value
                                                    else
                                                        position = partAuto.Parent.Main.CFrame
                                                    end
                                                    local grayPaint = game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure
                                                    grayPaint:FireServer(partAuto.Parent.ItemName.Value,position, var.plr, nil, partAuto.Parent, true)
                                                    var.made = true
                                                else
                                                var.made = true 
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                            wait(2)
                            for i, v in pairs(var.payload) do
                                local main_cframe = CFrame.new(unpack(v['main_cframe'])) + plot_pos
                                game.ReplicatedStorage.PlaceStructure.ClientPlacedBlueprint:FireServer(v['structure_type'], main_cframe, game.Players.LocalPlayer)
                                repeat
                                    wait()
                                until var.made
                                var.made = false
                            end
                            wait(0.1)
                            fill_bps()
                            SendNotification('Your base has been loaded.')
                            var.baseSelect:ToggleVisible(true)
                            var.loadBaseButton.Visible = true
                            var.delBases.Visible = true
                            var.selectBuildType:ToggleVisible(true)
                            var.auto:Disconnect()
                        else
                            SendNotification('You need to have a plot loaded first.')
                            var.baseSelect:ToggleVisible(true)
                            var.selectBuildType:ToggleVisible(true)
                            var.loadBaseButton.Visible = true
                            var.delBases.Visible = true
                        end
                    else
                        SendNotification('You must choose a base to load.')
                        var.baseSelect:ToggleVisible(true)
                        var.selectBuildType:ToggleVisible(true)
                        var.loadBaseButton.Visible = true
                        var.delBases.Visible = true
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Load the base you selected above.'
                }
            )
            --#endregion

            --#region Delete Base
            var.delBases = sec.autobuild:Create('Button', 'Delete Base',
                function()
                    local itemCount = 0
                    var.delCount = 0
                    var.firstDelTable = {}
                    var.secondDelTable = {}
                    local delBase = Instance.new("BindableFunction", workspace)
                    delBase.Name = "Cynical_DeleteBase"
                    delBase.OnInvoke = function(v)
                        if tostring(v) == "Yes" then
                            for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                if v:FindFirstChild("Owner") and v.Owner.Value == var.plr then
                                    if v:FindFirstChild("Type") and v.Type.Value == "Structure" and v:FindFirstChild("BuildDependentWood") and v.BuildDependentWood.BrickColor == BrickColor.new("Medium stone grey") then
                                        itemCount = itemCount + 1
                                    end
                                end 
                            end
                            --print(itemCount)
                            local splitItems = math.floor(itemCount / 2)
                            itemCount = 0
                            for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                if v:FindFirstChild("Owner") and v.Owner.Value == var.plr then
                                    if v:FindFirstChild("Type") and v.Type.Value == "Structure" and v:FindFirstChild("BuildDependentWood") and v.BuildDependentWood.BrickColor == BrickColor.new("Medium stone grey") then
                                        itemCount = itemCount + 1
                                        if itemCount <= splitItems then
                                            table.insert(var.firstDelTable, v)
                                        elseif itemCount > splitItems then
                                            table.insert(var.secondDelTable, v)
                                        end
                                    end
                                end 
                            end
                            var.First = false
                            var.Second = false
                            spawn(function()
                                for i, v in pairs(var.firstDelTable) do
                                    game:GetService("ReplicatedStorage").Interaction.DestroyStructure:FireServer(v)
                                end
                                var.First = true
                            end)
                            spawn(function()
                                for i, v in pairs(var.secondDelTable) do
                                    game:GetService("ReplicatedStorage").Interaction.DestroyStructure:FireServer(v)
                                end
                                var.Second = true
                            end)
                            repeat
                                wait(0.1)
                            until var.First == true and var.Second == true
                            for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                if v:FindFirstChild("Owner") and v.Owner.Value == var.plr then
                                    if v:FindFirstChild("Type") and v.Type.Value == "Structure" and v:FindFirstChild("BuildDependentWood") and v.BuildDependentWood.BrickColor == BrickColor.new("Medium stone grey") then
                                        game:GetService("ReplicatedStorage").Interaction.DestroyStructure:FireServer(v)
                                    end
                                end 
                            end
                            SendNotification("Cynical Script 2", "Your base has been cleared of all gray wood.", 5)
                        end
                    end
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Cynical Script 2",
                        Text = "Are you sure you want to delete the base?",
                        Icon = "",
                        Duration = 10,
                        Button1 = "Yes",
                        Button2 = "No",
                        Callback = delBase,
                    })
                    repeat
                        wait(1)
                        var.delCount = var.delCount + 1
                    until var.delCount >= 10
                    delBase:Destroy()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Delete all the gray wood on your base.'
                }
            )
            --#endregion


            var.savePlayer = nil

            var.plrBaseSave = sec.autobuild:Create('Dropdown', 'Select Player',
                function(selected)
                    var.savePlayer = game.Players[selected]
                end,
                {
                    Description = 'Choose the player you want to save the base layout for.',
                    PlayerList = true,
                    ShowLocalPlayer = true,
                    Flag = 'SaveBasePlayerFlag'
                }
            )
            var.fileName = nil

            var.saveBaseName = sec.autobuild:Create('Textbox', 'File name:',
                function(input)
                    var.fileName = input
                end,
                {
                    Flag = 'SaveFileNameFlag',
                    Description = 'This is what you want to the filename to be called.',
                    Default = ''
                }
            )

            var.saveBaseBtn = sec.autobuild:Create('Button', 'Save base',
                function()
                    if var.fileName then
                        if var.savePlayer then
                            local data = {}
                            get_plot = function(user)
                                if user == nil then user = game.Players.LocalPlayer end
                                local land
                                for _, plot in pairs(workspace.Properties:GetChildren()) do
                                    if plot.Owner.Value == user then
                                        land = plot
                                        break
                                    end
                                end
                                if not land then
                                    SendNotification('This user does not have land.')
                                end
                                return land
                            end
                            local plot_pos = get_plot(var.savePlayer).OriginSquare.Position
                            for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                if v:FindFirstChild("Type") and v:FindFirstChild("ItemName") and v:FindFirstChild("Owner") and v.Owner.Value == var.savePlayer then
                                    if (v.Type.Value == "Structure" and v:FindFirstChild("BuildDependentWood")) or v.Type.Value == "Blueprint" then
                                        payload = {}
                                        payload['structure_type'] = v.ItemName.Value
                                        if v.Type.Value == "Structure" then
                                            if v:FindFirstChild("BlueprintWoodClass") then
                                                payload['wood_type'] = v.BlueprintWoodClass.Value
                                            else
                                                payload['wood_type'] = nil
                                            end
                                            payload['main_cframe'] = {(v.MainCFrame.Value-plot_pos):components()}
                                        elseif v.Type.Value == "Blueprint" then
                                            payload['wood_type'] = nil
                                            payload['main_cframe'] = {(v.Main.CFrame-plot_pos):components()}
                                        end
                                        table.insert(data, payload)
                                    end
                                end
                            end
                            writefile(var.fileName..".json", game.HttpService:JSONEncode(data))
                            SendNotification(var.fileName..'.json has been saved.')
                        else
                            SendNotification('You did not choose a player.')
                        end
                    else
                        SendNotification('You did not give the base a name.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Save the players base you chose to the filename you typed.'
                }
            )

            var.loadFile = nil

            var.loadBaseName = sec.autobuild:Create('Textbox', 'Filename to load',
                function(input)
                    var.loadFile = input
                end,
                {
                    Flag = 'LoadFileNameFlag',
                    Description = 'This is the filename you want to load.',
                    Default = ''
                }
            )

            var.loadBaseBtn = sec.autobuild:Create('Button', 'Load File',
                function()
                    local bool, error = pcall(function() readfile(var.loadFile..".json") end)
                    if bool == true then
                        var.payload = game.HttpService:JSONDecode(readfile(var.loadFile..".json"))
                        local land = getCenter()
                        if not land then
                            SendNotification('You need to have land to use this.')
                        else
                            var.baseSelect:ToggleVisible(false)
                            var.loadBaseBtn.Visible = false
                            var.selectBuildType:ToggleVisible(false)
                            var.loadBaseName.Visible = false
                            local plot_pos = land.Position
                            local blueprint_count = 0
                            function fill_bps()
                                for i, child in pairs(game.Workspace.PlayerModels:GetChildren()) do
                                    if child:FindFirstChild("Type") and child:FindFirstChild("Owner") and child.Owner.Value == game.Players.LocalPlayer then
                                        if child.Type.Value == "Blueprint" then
                                            game.ReplicatedStorage.PlaceStructure.ClientPlacedStructure:FireServer(child.ItemName.Value, child.Main.CFrame, game.Players.LocalPlayer, nil, child, true)
                                        end
                                    end
                                end
                            end
                            var.auto = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(child)
                                wait()
                                if child:FindFirstChild("Owner") then
                                    if tostring(child.Owner.Value) == tostring(var.plr) then
                                        if child:FindFirstChild("BuildDependentWood") then
                                            if child:FindFirstChild("Type") then
                                                if child.Type.Value == "Blueprint" then
                                                    local partAuto = child.BuildDependentWood
                                                    local position = nil
                                                    if partAuto:FindFirstChild("MainCFrame") then
                                                        position = partAuto.Parent.MainCFrame.Value
                                                    else
                                                        position = partAuto.Parent.Main.CFrame
                                                    end
                                                    local grayPaint = game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedStructure
                                                    grayPaint:FireServer(partAuto.Parent.ItemName.Value,position, var.plr, nil, partAuto.Parent, true)
                                                    var.made = true
                                                else
                                                var.made = true 
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                            wait(2)
                            for i, v in pairs(var.payload) do
                                local main_cframe = CFrame.new(unpack(v['main_cframe'])) + plot_pos
                                game.ReplicatedStorage.PlaceStructure.ClientPlacedBlueprint:FireServer(v['structure_type'], main_cframe, game.Players.LocalPlayer)
                                repeat
                                    wait()
                                until var.made
                                var.made = false
                            end
                            wait(0.1)
                            fill_bps()
                            var.baseSelect:ToggleVisible(true)
                            var.loadBaseBtn.Visible = true
                            var.loadBaseName.Visible = true
                            var.selectBuildType:ToggleVisible(true)
                        end
                    else
                        SendNotification('That file does not exist. Try again.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Load the filename you typed in above that is in your workspace folder.'
                }
            )

            hideBuilders()
            --#endregion

            ------------------------------------------------------------------#Car Settings
            --#region Car Setup
            cat.carz = Main:CreateCategory('Car Stuff')
            sec.carsets = cat.carz:CreateSection('Settings')
            --#endregion

            --#region Flip Car
            sec.carsets:Create('Button', 'Flip Car',
                function()
                    if game.Players.LocalPlayer.Character.Humanoid.SeatPart ~= nil then
                        local car = game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent
                        spawn(function()
                            local Pos = CFrame.new(car.Main.Position)
                            for i = 1, 5 do
                                wait()
                                car:SetPrimaryPartCFrame(Pos * CFrame.Angles(math.rad(game.Players.LocalPlayer.Character.HumanoidRootPart.Orientation.x), math.rad(game.Players.LocalPlayer.Character.HumanoidRootPart.Orientation.y), 0))
                                game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(car.Main)
                                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(car.Main)
                            end
                        end)
                    end
                end,
                {
                    Description = 'This will flip your car back over, but you have to be sitting in it.',
                    BtnText = 'Go!'
                }
            )
            --#endregion

            --#region Car Color Changer
            var.carColorName = {"Medium Stone Gray", "Silver", "Earth Orange", "Earth Yellow", "Dark Gray", "Dark Gray Metallic", "Sand Green", "Sand Red", "Lemon Metalic", "Brick Yellow", "Faded Green", "Dark Red", "Rust", "Really Black", "Hot Pink"}
            var.carColor = {"Medium stone grey", "Silver", "Earth orange", "Earth yellow", "Dark grey", "Dark grey metallic", "Sand green", "Sand red", "Lemon metalic", "Brick yellow", "Faded green", "Dark red", "Rust", "Really black", "Hot pink"}
            var.disCon = false
            var.colorSel = nil
            var.PaintParts = nil
            local car = nil
            local colorSpawner
            local carSpawner
            var.colorSel = sec.carsets:Create('Dropdown', 'Car Color',
                function(selected)
                    SendNotification('Click on the spawning pad you want to spawn the colored car.')
                    local selColor = var.carColor[table.find(var.carColorName, selected)]
                    var.disCon = false
                    if colorSpawner then
                        colorSpawner:Disconnect()
                    end
                    local mouse = game.Players.LocalPlayer:GetMouse()
                    colorSpawner = mouse.Button1Up:Connect(function()
                        if mouse.Target.Parent:FindFirstChild('Type') and mouse.Target.Parent.Type.Value == 'Vehicle Spot' then
                            var.colorSel:ToggleVisible(false)
                            if mouse.Target.Parent.ItemName.Value == 'SmallTrailer' then
                                var.vehicleCost = 36
                            elseif mouse.Target.Parent.ItemName.Value == 'Trailer2' then
                                var.vehicleCost = 260
                            elseif mouse.Target.Parent.ItemName.Value == 'UtilityTruck2' then
                                var.vehicleCost = 100
                            elseif mouse.Target.Parent.ItemName.Value == 'UtilityTruck' then
                                var.vehicleCost = 8
                            elseif mouse.Target.Parent.ItemName.Value == 'Pickup1' then
                                var.vehicleCost = 380
                            end
                            carSpawner = game:GetService('Workspace').PlayerModels.ChildAdded:Connect(function(spawner)
                                spawner:WaitForChild('Owner')
                                if spawner:WaitForChild('PaintParts') then
                                    var.PaintParts = spawner.PaintParts.Part
                                end 
                            end)
                            car = mouse.Target.Parent:FindFirstChild('ButtonRemote_SpawnButton', true)
                            repeat
                                wait()
                                local playMoney = game.Players.LocalPlayer.leaderstats.Money.Value
                                if playMoney > var.vehicleCost then
                                    game.ReplicatedStorage.Interaction.RemoteProxy:FireServer(car)
                                    repeat wait(0.05) until var.PaintParts ~= var.C
                                    var.C = var.PaintParts
                                else
                                    SendNotification('You do not have enough money to continue.')
                                    if carSpawner then
                                        carSpawner:Disconnect()
                                    end
                                    if colorSpawner then
                                        colorSpawner:Disconnect()
                                    end
                                end
                            until var.PaintParts.BrickColor.Name == selColor or var.PaintParts.BrickColor.Name == 'Hot pink' or var.disCon == true
                            SendNotification('Car spawner has completed.')
                            if carSpawner then
                                carSpawner:Disconnect()
                            end
                            if colorSpawner then
                                colorSpawner:Disconnect()
                            end
                            var.colorSel:ToggleVisible(true)
                            car = nil
                        else
                            SendNotification('Spawning car failed. Choose your color again.')
                            if carSpawner then
                                carSpawner:Disconnect()
                            end
                            if colorSpawner then
                                colorSpawner:Disconnect()
                            end
                            var.colorSel:ToggleVisible(true)
                            car = nil
                        end
                    end)
                end,
                {
                    Flag = 'ColorCarSpawnerFlag', 
                    Description = 'Choose the color to spawn that color car upon selecting a car platform.',
                    Options = var.carColorName
                }
            )
            --#endregion

            --#region Cancel Car Color
            sec.carsets:Create('Button', 'Cancel Car Spawning',
                function()
                    var.disCon = true
                end,
                {
                    Description = 'Duh! Cancels the car spawner.',
                    BtnText = 'Go!'
                }
            )
            --#endregion
        
            --#region Fast Car
            sec.carsets:Create('Slider', 'Car Speed',
                function(value)
                    for _, bq in pairs(Workspace.PlayerModels:GetChildren()) do
                        if bq:IsA("Model") and bq:FindFirstChild("LampRemote") then
                            bq.Configuration.MaxSpeed.Value = value
                        end
                    end
                end,
                {
                    Flag = 'CarSpeedFlag',
                    Description = 'Changing this will change the speed of the car you are driving.',
                    Min = 1,
                    Max = 5,
                    Default = 1,
                    Precise = true
                }
            )
            --#endregion

            --#region --------------------------------------------------------#Settings
            --#region Settings
            cat.setz = Main:CreateCategory('Settings')
            sec.zoom = cat.setz:CreateSection('Settings')
            sec.control = cat.setz:CreateSection('Control Panel Settings')

            --#endregion

            --#region Auto Blacklist
            var.humCheck = nil

            sec.zoom:Create('Toggle', 'Auto Blacklist',
                function(state)
                    GuiSettings['AutoBlackList'] = state
                    if state then
                        var.Client = game.ReplicatedStorage.Interaction.ClientSetListPlayer
                        for i, v in pairs(game.Players:GetPlayers()) do
                            if v.Name ~= var.plr.Name then
                                var.Client:InvokeServer(var.plr.BlacklistFolder, v, true)
                            end
                        end
                        var.con = game.Players.PlayerAdded:connect(function(plrs)
                            var.Client:InvokeServer(var.plr.BlacklistFolder, plrs, true)
                        end)
                    else
                        pcall(function() var.con:Disconnect() end)
                    end
                end,
                {
                    Flag = 'AutoBlackListFlag',
                    Description = 'This will allow you to automatically blacklist someone as they join the server.',
                    Default = false
                }
            )
            library:UpdateToggle('AutoBlackListFlag', GuiSettings['AutoBlackList'])
            --#endregion

            --#region anti-blacklist
            var.black = nil

            sec.zoom:Create('Toggle', 'Anti-Blacklist',
                function(state)
                    local CBB = getsenv(game.Players.LocalPlayer.PlayerGui.BlackListGUI.ClientBeBlacklisted)
                    local wall = CBB.makeWalls
                    local kick = CBB.checkIfPlayerNeedsToBeKicked
                    if state then
                        CBB.makeWalls = function() end
                        CBB.checkIfPlayerNeedsToBeKicked = function() end
                        CBB.removeWalls()
                        local oldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                        var.humCheck = game:GetService('RunService').RenderStepped:connect(function()
                            pcall(function()
                                oldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                            end);
                        end);
                        for i, v in next,workspace.Region_Main:children()do
                            if v:IsA('SpawnLocation') then
                                var.black = v.Touched:Connect(function(spawnPoint)
                                    if spawnPoint.Parent==game.Players.LocalPlayer.Character then 
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame=oldPos
                                    end
                                end)
                            end;
                        end;
                    else
                        pcall(function() var.humCheck:Disconnect() end)
                        pcall(function() var.black:Disconnect() end)
                        CBB.makeWalls = wall
                        CBB.checkIfPlayerNeedsToBeKicked = kick
                    end
                end,
                {
                    Flag = 'AntiBlackListFlag',
                    Description = 'Allows you to walk on peoples property that has blacklisted you.',
                    Default = false
                }
            )
            library:UpdateToggle('AntiBlackListFlag', GuiSettings['AntiBlackList'])
            --#endregion
            
            --#region Players Join
            var.PlayersJoin = nil

            sec.zoom:Create('Toggle', 'Player Joins',
                function(state)
                    GuiSettings['PlayersJoining'] = state
                    SaveSettings()
                    if state then
                        var.PlayersJoin = game.Players.PlayerAdded:Connect(function(player)
                            game.StarterGui:SetCore('SendNotification',{
                                Title = 'Fusion', 
                                Text = player.Name.. ' has just joined the game.', 
                                Duration = 5, 
                                Icon = 'rbxthumb://type=AvatarHeadShot&id='..player.UserId..'&w=150&h=150'
                            })
                        end)
                    else
                        pcall(function() var.PlayersJoin:Disconnect() end)
                    end
                end,
                {
                    Flag = 'PlayerJoinFlag',
                    Description = 'Sends a notification when a player joins the game.',
                    Default = false
                }
            )
            library:UpdateToggle('PlayerJoinFlag', GuiSettings['PlayersJoining'])
            --#endregion

            --#region Players Leave
            var.PlayersLeave = nil

            sec.zoom:Create('Toggle', 'Player Leaves',
                function(state)
                    GuiSettings['PlayersLeaving'] = state
                    SaveSettings()
                    if state then
                        var.PlayersLeave = game.Players.PlayerRemoving:Connect(function(player)
                            game.StarterGui:SetCore('SendNotification',{
                                Title = 'Fusion', 
                                Text = player.Name.. ' has just left the game.', 
                                Duration = 5, 
                                Icon = 'rbxthumb://type=AvatarHeadShot&id='..player.UserId..'&w=150&h=150'
                            })
                        end)
                    else
                        pcall(function() var.PlayersLeave:Disconnect() end)
                    end
                end,
                {
                    Flag = 'PlayersLeaveFlag',
                    Description = 'Gives a notification when a player leaves the game.',
                    Default = false
                }
            )
            library:UpdateToggle('PlayersLeaveFlag', GuiSettings['PlayersLeaving'])
            --#endregion

            --#region No Clip Red Light
            sec.control:Create('Toggle', 'No Clip',
                function(state)
                    GuiSettings['NoClipControl'] = state
                    SaveSettings()
                    if state then
                        noClipRed = mainRed:AddStatus('No Clip')
                    else
                        pcall(function() mainRed:RemoveStatus(noClipRed) end)
                    end
                end,
                {
                    Flag = 'NoClipControlFlag',
                    Description = 'This will show/hide the control panel for No Clip.',
                    Default = false
                }
            )
            library:UpdateToggle('NoClipControlFlag', GuiSettings['NoClipControl'])
            --#endregion

            --#region Hercules Red Light
            sec.control:Create('Toggle', 'Hercules',
                function(state)
                    GuiSettings['HerculesControl'] = state
                    SaveSettings()
                    if state then
                        hercRed = mainRed:AddStatus('Hercules')
                    else
                        pcall(function() mainRed:RemoveStatus(hercRed) end)
                    end
                end,
                {
                    Flag = 'HerculesControlFlag',
                    Description = 'This will show/hide the control panel for Hercules mode.',
                    Default = false
                }
            )
            library:UpdateToggle('HerculesControlFlag', GuiSettings['HerculesControl'])
            --#endregion

            --#region Block Save Red Light
            sec.control:Create('Toggle', 'Disable Saves',
                function(state)
                    GuiSettings['DisableSavesControl'] = state
                    SaveSettings()
                    if state then
                        noSaveRed = mainRed:AddStatus('Disable Saves')
                    else
                        pcall(function() mainRed:RemoveStatus(noSaveRed) end)
                    end
                end,
                {
                    Flag = 'DisableSavesControlFlag',
                    Description = 'This will show/hide the control panel for Disable Saves.',
                    Default = false
                }
            )
            library:UpdateToggle('DisableSavesControlFlag', GuiSettings['DisableSavesControl'])
            --#endregion

            --#region WalkSpeed RenderStepped
            UserInputService = game:GetService("UserInputService")

            function IsShiftKeyDown(input, gameProcessedEvent)
                return UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)
            end

            var.walkrender = game:GetService('RunService').RenderStepped:Connect(function()
                if game.Players.LocalPlayer.Character:FindFirstChild('Humanoid') then
                    if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').WalkSpeed ~= 0 then
                        if IsShiftKeyDown() then
                            game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = var.WalkSpeed * 2
                        else
                            game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = var.WalkSpeed
                        end
                    end
                end
            end)
            --#endregion

            --#region --------------------------------------------------------#Close Script Stuff    
            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    clearItems()
                    dDrag(false)
                    RestoreHooks()
                    pcall(function() ren:Disconnect()  end) 
                    pcall(function() game.CoreGui.StatusWindow:Destroy() end) 
                    pcall(function() var.hacks:Disconnect() end) 
                    pcall(function() var.antiblack:Disconnect() end)
                    pcall(function() var.TeleportKey:Disconnect() end)
                    pcall(function() var.spawnBldrs:Disconnect() end)
                    pcall(function() var.walkrender:Disconnect() end)
                    pcall(function() var.noclipDis:Disconnect() end)
                    pcall(function() var.antiIdle:Disconnect() end)
                    pcall(function() var.herc:Disconnect() end)
                    pcall(function() var.selector:Disconnect() end)
                    pcall(function() inputPressed:Disconnect() end)
                    pcall(function() var.silentHead:Disconnect() end)
                    pcall(function() var.mouseSelector:Disconnect() end)
                    pcall(function() inputReleased:Disconnect() end)
                    pcall(function() var.FlyKeyDown:Disconnect() end)
                    pcall(function() var.FlyKeyUp:Disconnect() end)
                    pcall(function() var.silentHead:Disconnect() end)
                    pcall(function() var.spawnBldrs:Disconnect() end)
                    pcall(function() var.SpookValue:Disconnect() end)
                    pcall(function() var.humCheck:Disconnect() end)
                    pcall(function() var.black:Disconnect() end)
                    pcall(function() var.hb:Disconnect() end)
                    pcall(function() var.touch:Disconnect() end)
                    pcall(function() var.getlastItems:Disconnect() end)
                    pcall(function() dragSelect:Disconnect() end)
                    pcall(function() var.sparkles:Destroy() end)
                    pcall(function() getItems:Disconnect() end)
                    pcall(function() var.smokez:Destroy() end)
                    pcall(function() var.con:Disconnect() end)
                    pcall(function() itemCounter:Disconnect() end)
                    pcall(function() var.tree2log:Disconnect() end)
                    pcall(function() var.PlayersLeave:Disconnect() end)
                    pcall(function() var.PlayersJoin:Disconnect() end)
                    pcall(function() game.CoreGui.ItemSelector:Destroy() end)
                    pcall(function() var.mouseOneUnit:Disconnect() end)
                    pcall(function() var.auto:Disconnect() end)
                    var.enableSelect = false
                    game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
                    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadSaveGUI.Progress.Visible = false
                    timeFog(nil, true, false)
                    fixWater(false, 0)
                    local checkCenter = getCenter()
                    if checkCenter and checkCenter:FindFirstChild('SelectionBox') then
                        checkCenter.SelectionBox:Destroy()
                    end
                    library:UpdateToggle('LowerBridgeFlag', false)
                    library:UpdateToggle('EnableDisableChoppersFlag', false)
                    rembTools()
                    for _, v in next, Connections do
                        pcall(function() v:Disconnect() end)
                    end
                    if var.flying then
                        var.flying = false
                        nofly()
                        bg:Destroy()
                        bv:Destroy()
                        var.plr.Character.Humanoid.PlatformStand = false
                    end
                    var.Closing = true
                    cat = {}
                    sec = {}
                    var = {}
                    libClosed:Disconnect()
                end
            end)
        --#endregion
    
        end,

        --#endregion
        --#endregion

        --#region ------------------------------------------------------------Tower of Hell Script
        ["Tower Of Hell"] = function()
            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end
            local mouse = game.Players.LocalPlayer:GetMouse()

            local TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if mouse.Target and mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(mouse.Hit.Position.X, mouse.Hit.Position.Y + 2.0, mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl)
            end

            local Player = game:GetService("Players").LocalPlayer
            repeat wait() until Player.Character:FindFirstChildOfClass("Humanoid")
            local OriginalWalkSpeed = Player.Character.Humanoid.WalkSpeed
            local OriginalJumpPower = Player.Character.Humanoid.JumpPower
            local oldindex, oldnamecall
            if not getgenv().CynicalLoaded then
                getgenv().CynicalLoaded = "lol"
                oldindex = hookmetamethod(game, "__index", newcclosure(function(...)
                    local args = {...}
                    if args[2] == "WalkSpeed" and not checkcaller() then
                        return OriginalWalkSpeed
                    end
                    if args[2] == "JumpPower" and not checkcaller() then
                        return OriginalJumpPower
                    end
                    return oldindex(...)
                end))
                
                oldnamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
                    local args = {...}
                    if args[1] == Player and getnamecallmethod() == "Kick" and not checkcaller() then
                        wait(math.huge-1)
                        return
                    end
                    if args[2] == "kills" and getnamecallmethod() == "FindFirstChild" then
                        return false
                    end
                    return oldnamecall(...)
                end))
            end

            local senv = getsenv(game.Players.LocalPlayer.PlayerScripts.LocalScript)
            senv.kick = function() end

            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })

            local creditTab = Main:CreateCategory("Credits")
            local settingsSec = creditTab:CreateSection("Developers")
            local optionsSec = creditTab:CreateSection('Enabled Options')

            local characterTab = Main:CreateCategory('Character')
            local movementSec = characterTab:CreateSection('Movement Options')

            settingsSec:Create("Label", "Developer - Cynical Modder")
            settingsSec:Create('Label', 'Secondary Dev - 0x37')

            optionsSec:Create('Label', 'Teleport with holding Left Control and clicking.')
            optionsSec:Create('Label', 'Glowing Parts will not kill you.')
            
            settingsSec:Create('Keybind', 'Show/Hide Gui',
            function()
                library.ui.Enabled = not library.ui.Enabled
            end,
                {
                    Flag = 'ShowHideGuiFlag',
                    Description = 'Temporarily show or hide the gui window from view.',
                    Default = Enum.KeyCode.RightControl
                }
            )
            
            movementSec:Create('Slider', 'Walk Speed',
                function(value)
                    game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = value
                end,
                {
                    Flag = 'WalkSpeedFlag',
                    Description = 'This will increase how fast you can walk.',
                    Min = 16,
                    Max = 50,
                    Default = 16
                }
            )

            movementSec:Create('Slider', 'Jump Power',
            function(value)
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = value
            end,
                {
                    Flag = 'JumpPowerFlag',
                    Description = 'This will increase how high you can jump.',
                    Min = 50,
                    Max = 200,
                    Default = 50
                }
            )

            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    nc = nil
                    pcall(function() TeleportKey:Disconnect() end)
                    pcall(function() libClosed:Disconnect() end)
                end
            end)
        end,

        --#endregion

        --#region ------------------------------------------------------------Vehicle Simulator

        ["Vehicle Simulator"] = function()
            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end
            local mouse = game.Players.LocalPlayer:GetMouse()

            local TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if mouse.Target and mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(mouse.Hit.Position.X, mouse.Hit.Position.Y + 2.0, mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl)
            end

            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })

            local creditTab = Main:CreateCategory("Credits")
            local settingsSec = creditTab:CreateSection("Developers")
            local optionsSec = creditTab:CreateSection('Enabled Options')

            settingsSec:Create("Label", "Developer - Cynical Modder")

            optionsSec:Create('Label', 'Teleport with holding Left Control and clicking.')

            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    nc = nil
                    TeleportKey:Disconnect()
                end
            end)
        end,
        --#endregion

        --#region ------------------------------------------------------------Pet Sim
        ['Pet Sim'] = function()

        --#region Variables
            hookfunction(getrenv().error, function() end)
            hookfunction(getrenv().warn, function() end)




            getrenv().warn = function() end

            local TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if mouse.Target and mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(mouse.Hit.Position.X, mouse.Hit.Position.Y + 2.0, mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl)
            end
            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end

            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })

            local a = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"));
            local fixerrors; fixerrors = hookmetamethod(game, "__namecall", function(...)
                local args = {...}
                if getnamecallmethod() == "IsDescendantOf" and args[2] == a.Player.Chat then
                    return false
                end
                return fixerrors(...)
            end)

            local creditTab = Main:CreateCategory("Credits")
            local creditSec = creditTab:CreateSection("Developers")
            local otherSec = creditTab:CreateSection('Discord Invite')
            local windowTab = Main:CreateCategory('Game')
            local windowSec = windowTab:CreateSection('GUIs')
            local petTab = Main:CreateCategory('Pets')
            local petEnchant = petTab:CreateSection('Enchant Pets')
            local petSec = petTab:CreateSection('Pet Options')
            local charTab = Main:CreateCategory('Character')
            local charSec = charTab:CreateSection('Options')
            local farmingTab = Main:CreateCategory('Farming')
            local farmingSec = farmingTab:CreateSection('Auto Farm')
            local farmingOpts = farmingTab:CreateSection('Farming Options')
            local eggTab = Main:CreateCategory('Eggs')
            local eggSecTer = eggTab:CreateSection('Egg Options')
            local eggSetts = eggTab:CreateSection('Egg Settings')
            local settingTab = Main:CreateCategory('Settings')
            local settingSec = settingTab:CreateSection('Misc Settings')
            local settingStat = settingTab:CreateSection('Stat Tracker')
            local Run_Service = game:GetService("RunService")
            local rs = Run_Service.RenderStepped
            local CurrencyOrder = {"Coins", "Fantasy Coins", "Tech Coins"}
            local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
            local MyEggData = {}

            local alrFarming = false
            local CoinMeshes = {}
            local CoinNames = {}
            local CoinAssets = game:GetService("ReplicatedStorage"):WaitForChild("Assets").CoinAssets
            local Framework = game:GetService("ReplicatedStorage").Framework
            local Library = require(Framework:WaitForChild("Library"))
            local Network = require(Framework:WaitForChild("Modules"):WaitForChild("2 | Network"))

            local OrbFolder = game:GetService("Workspace")["__THINGS"]:WaitForChild("Orbs")
            local Teleports = game:GetService("Workspace")["__MAP"]:WaitForChild("Teleports")
            local ServerPets = Library.Directory.Pets       

            local farmType = 'Normal'
            local targetType = 'All'
            local locataionType = 'All'

            local locationInfo = {
                --Misc
                ['VIP'] = {'VIP'};
                --Spawn
                ['Town'] = {'Town', 'Town FRONT'};
                ['Forest'] = {'Forest', 'Forest FRONT'};
                ['Beach'] = {'Beach', 'Beach FRONT'};
                ['Mine'] = {'Mine', 'Mine FRONT'};
                ['Winter'] = {'Winter', 'Winter FRONT'};
                ['Glacier'] = {'Glacier', 'Glacier Lake'};
                ['Desert'] = {'Desert', 'Desert FRONT'};
                ['Volcano'] = {'Volcano', 'Volcano FRONT'};
                -- Fantasy init
                ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'};
                ['Ancient'] = {'Ancient'};
                ['Samurai'] = {'Samurai', 'Samurai FRONT'};
                ['Candy'] = {'Candy'};
                ['Haunted'] = {'Haunted', 'Haunted FRONT'};
                ['Hell'] = {'Hell'};
                ['Heaven'] = {'Heaven'};
                -- Tech
                ['Ice Tech'] = {'Ice Tech'};
                ['Tech City'] = {'Tech City'; 'Tech City FRONT'};
                ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'};
                ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'};
                ['Alien Lab'] = {'Alien Lab'; 'Alien Lab FRONT'};
                ['Alien Forest'] = {'Alien Forest'; 'Alien Forest FRONT'};
            }

            local Chests = {
                'All';
                -- Spawn
                "Magma Chest",
                -- Fantasy
                "Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",
                -- Tech
                "Giant Tech Chest"; "Giant Steampunk Chest"; "Giant Alien Chest";
            }

            local antiIdle
            
            if syn or sWare then
                --updateStatus(antiIdleRed, true)
                for _, v in next, getconnections(game.Players.LocalPlayer.Idled) do
                    local Success, Result = pcall(function()
                        v:Disable()
                    end)
                    if not Success then
                        print(tostring('Anti-Idle Error: '..Result))
                    end
                end
            else
                --updateStatus(antiIdleRed, true)
                antiIdle = game.Players.LocalPlayer.Idled:Connect(function()
                    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    wait(1)
                    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                end)
            end

            for i,v in pairs(GameLibrary.Directory.Eggs) do
                local temptable = {}
                temptable['Name'] = i
                temptable['Currency'] = v.currency
                temptable['Price'] = v.cost
                table.insert(MyEggData, temptable)
            end

            table.sort(MyEggData, function(a, b)
                return a.Price < b.Price
            end)

            local EggData = {}
            local openEggs = false 
            for i, v in pairs(CurrencyOrder) do
                table.insert(EggData, '------------'..v..'------------')
                for a, b in pairs(MyEggData) do
                    if b.Currency == v then
                        table.insert(EggData, b.Name)
                    end
                end
            end
        --#endregion

        --#region Functions

            local FireRemote = function(RemoteName, ...)
                Network.Fire(RemoteName, ...)
                return true
            end
            
            local InvokeRemote = function(RemoteName, ...)
                return Network.Invoke(RemoteName, ...)
            end
            
            local GetPets = function(equipped, full)
                local PetsTbl = (equipped and Library.PetCmds.GetEquipped() or Library.Save.Get().Pets)
                local PetIds = {}
                for _, v in next, PetsTbl do
                    table.insert(PetIds, v.uid) 
                end
                return (full and PetsTbl or PetIds)
            end
            
            local GetSavePets = function()
                return Library.Save.Get().Pets    
            end
            
            local GetPetFromNk = function(nick)
                for _, v in next, GetSavePets() do
                    if tostring(v.nk):lower() == nick:lower() then
                        return v
                    end
                end    
            end

            local enchantLabel = nil

            local EnchantPet;
            EnchantPet = function(Nickname, EnchantToGet)
                if AutoEnchant == false then return end 
                if not Nickname or not EnchantToGet then return end
                local ToEnchant = GetPetFromNk(Nickname)
                local CurrentEnchants = {}
                if ToEnchant.powers and ToEnchant.powers[1] then
                    for _, v in next, ToEnchant.powers do
                        if type(v) == "table" then
                            table.insert(CurrentEnchants, table.concat(v, " "))
                        end
                    end
                end
                if #CurrentEnchants > 2 then
                    return SendNotification("Mythics/Exclusives cannot be enchanted.\n")    
                end
                if table.find(CurrentEnchants, EnchantToGet) then
                    return SendNotification("Already enchanted with " .. EnchantToGet .. "\n")    
                end
                local a = InvokeRemote("Enchant Pet", tostring(ToEnchant.uid))
                if a == true then
                    local PetNow = GetPetFromNk(Nickname)
                    CurrentEnchants = {}
                    if PetNow.powers and PetNow.powers[1] then
                        for _, v in next, PetNow.powers do
                            if type(v) == "table" then
                                table.insert(CurrentEnchants, table.concat(v, " "))
                            end
                        end
                        if table.find(CurrentEnchants, EnchantToGet) then
                            SendNotification("Got Enchants: " .. table.concat(CurrentEnchants, " ") .. "\n")
                            enchantLabel.Text = "    ".. 'Enchants: Completed'
                            getgenv().AutoEnchant = false
                        else
                            --SendNotification("Failed to get enchant, got enchants: " .. table.concat(CurrentEnchants, " ") .. "\n")
                            enchantLabel.Text = "    ".. 'Enchants: '.. table.concat(CurrentEnchants, " ")
                            EnchantPet(Nickname, EnchantToGet)
                        end
                    end
                end
            end

            local MakeGold = function(AmountPerPet)
                local toMakeGold = {}
                local goldTbl = {}
                for _, v in next, GetPets(false, true) do
                    if not v.dm and not v.g and not v.r then
                        if not toMakeGold[v.id] then
                            toMakeGold[v.id] = {} 
                        end
                        local PetTbl = toMakeGold[v.id]
                        table.insert(PetTbl, v.uid)
                    end
                end
                for i, v in next, toMakeGold do
                    local pets = {}
                    local addedPets = 0
                    for i2, v2 in next, v do
                        if addedPets == AmountPerPet then
                            table.insert(goldTbl, pets)
                            pets = {}
                            addedPets = 0
                        end
                        table.insert(pets, v2)
                        addedPets = addedPets + 1
                    end
                end
                for _, v in next, goldTbl do
                    InvokeRemote("Use Golden Machine", v)
                    wait()
                end
            end

            local MakeRainbow = function(AmountPerPet)
                local toMakeRainbow = {}
                local rainbowTbl = {}
                for _, v in next, GetPets(false, true) do
                    if v.g then
                        if not toMakeRainbow[v.id] then
                            toMakeRainbow[v.id] = {} 
                        end
                        local PetTbl = toMakeRainbow[v.id]
                        table.insert(PetTbl, v.uid)
                    end
                end
                for i, v in next, toMakeRainbow do
                    local pets = {}
                    local addedPets = 0
                    for i2, v2 in next, v do
                        if addedPets == AmountPerPet then
                            table.insert(rainbowTbl, pets)
                            pets = {}
                            addedPets = 0
                        end
                        table.insert(pets, v2)
                        addedPets = addedPets + 1
                    end
                end
                for _, v in next, rainbowTbl do
                    InvokeRemote("Use Rainbow Machine", v)
                    wait()
                end
            end

            function GetMyPets()
                local returntable = {}
                for i,v in pairs(GameLibrary.Save.Get().Pets) do
                    if v.e then 
                        table.insert(returntable, v.uid)
                    end
                end
                return returntable
            end

            function GetCoins(area)
                local returntable = {}
                local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
                for i,v in pairs(ListCoins) do
                    if locataionType == 'All' or table.find(locationInfo[locataionType], v.a) then
                        local shit = v
                        shit["index"] = i
                        table.insert(returntable, shit)
                     end
                end
                return returntable
            end

            function GetCoinTable(area)
                local CoinTable = GetCoins(area)
                function getKeysSortedByValue(tbl, sortFunction)
                    local keys = {}
                    for key in pairs(tbl) do
                        table.insert(keys, key)
                    end
                    table.sort(
                        keys,
                        function(a, b)
                            return sortFunction(tbl[a].h, tbl[b].h)
                        end
                    )
                    return keys
                end
                local sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
                local newCoinTable = {}
            
                for i,v in pairs(sortedKeys) do
                    table.insert(newCoinTable, CoinTable[v])
                end
                
                return newCoinTable
            end

            workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
            workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
            workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
            workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
            workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")

            local AreaWorldTable = {}
            for _, v in pairs(game:GetService("ReplicatedStorage").Game.Coins:GetChildren()) do
                for _, b in pairs(v:GetChildren()) do
                    table.insert(AreaWorldTable, b.Name)
                end
                table.insert(AreaWorldTable, v.Name)
            end
            
            function FarmCoin(CoinID, PetID)
                game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
                game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
            end

            function AllChests()
                local returntable = {}
                local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
                for i,v in pairs(ListCoins) do
                    local shit = v
                    shit["index"] = i
                    for aa,bb in pairs(AreaWorldTable) do
                        if string.find(v.n, bb) then
                            local thing = string.gsub(v.n, bb.." ", "")
                            if table.find(Chests, thing) then
                                shit.n = thing
                                table.insert(returntable, shit)
                            end
                        end
                    end
                end
                return returntable
            end
        --#endregion

        --#region Credits Tab
            creditSec:Create('Label', 'Developer - CynMod')
            creditSec:Create('Label', 'Secondary Dev - 0x37')
            --creditSec:Create('Label', 'Stats Tracker - Gerard')
            
            otherSec:Create('Button', 'Join Elite Discord Server',
                function()
                    joinDiscord("kA4VfGQkty")
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will allow you to join the Fusion elite discord server.'
                }
            )
            
        --#endregion

        --#region Windows Tab

            windowSec:Create('Button', 'Create Golden Pets Window', function() game.Players.LocalPlayer.PlayerGui.Golden.Enabled = true; end, {BtnText = 'Go!', Description = 'This opens the window to make golden pets.'})

            windowSec:Create('Button', 'Game Upgrades Window', function() game.Players.LocalPlayer.PlayerGui.Upgrades.Enabled = true; end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to add upgrades.'
                }
            )

            windowSec:Create('Button', 'Achievements Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.Achievements.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to view achievements.'
                }
            )

            windowSec:Create('Button', 'Fuse Pets Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.FusePets.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to fuse your pets.'
                }
            )

            windowSec:Create('Button', 'Make Rainbow Pets Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.Rainbow.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to make rainbow pets.'
                }
            )
            
            windowSec:Create('Button', 'Exclusive Shop Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.ExclusiveShop.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to view the exclusive shop.'
                }
            )

            windowSec:Create('Button', 'Enchant Pets Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.EnchantPets.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to enchant your pets.'
                }
            )

            windowSec:Create('Button', 'Travelling Merchant Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.Merchant.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to the travelling merchant.'
                }
            )

            windowSec:Create('Button', 'Dark Matter Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.DarkMatter.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to create dark matter pets.'
                }
            )

            windowSec:Create('Button', 'Pet Collection Window',
                function()
                    game.Players.LocalPlayer.PlayerGui.Collection.Enabled = true
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This opens the window to view the pet collection.'
                }
            )

        --#endregion

        --#region Pets Tab

        local petEnchNick = nil
        local EnchantList = {'None','Royalty 1', 'Charm 1', 'Glittering 1', 'Magnet 1', 'Teamwork 1', 'Teamwork 2', 'Coins 1', 'Coins 2', 'Coins 3', 'Coins 4', 'Coins 5', 'Fantasy Coins 1', 'Fantasy Coins 2', 'Fantasy Coins 3', 'Fantasy Coins 4', 'Fantasy Coins 5', 'Tech Coins 1', 'Tech Coins 2', 'Tech Coins 3', 'Tech Coins 4', 'Tech Coins 5', 'Diamonds 1', 'Diamonds 2', 'Diamonds 3', 'Diamonds 4', 'Diamonds 5', 'Strength 1', 'Strength 2', 'Strength 3', 'Strength 4', 'Strength 5', 'Presents 1', 'Presents 2', 'Presents 3', 'Agility 1', 'Agility 2', 'Agility 3'}
        local pickedEnchant = 'Coins 1'

        petEnchant:Create('Textbox', 'Pet Nickname',
            function(value)
                petEnchNick = value
            end,
            {
                Flag = 'PSXPetNickFlag',
                Description = 'Hover over your pet and it will show you the nick name.',
                Default = ''
            }
        )


        petEnchant:Create('Dropdown', 'Enchant Name',
            function(selected)
                pickedEnchant = selected
            end,
            {   
                Flag = 'PSXChosenEnchantFlag',
                Description = 'This is the enchant you want on the pet listed above.',
                Options = EnchantList
            }
        )

        local GetDiamonds = function()
            return Library.Save.Get().Diamonds
        end

        local runEnchant = true

        petEnchant:Create('Button', 'Enchant Pet',
            function()
                if petEnchNick then
                    getgenv().AutoEnchant = true
                    EnchantPet(petEnchNick, pickedEnchant)
                else
                    SendNotification('You did not give a pet name to enchant.')
                end
            end,
            {
                BtnText = 'Go!',
                Description = 'Obviously start the auto enchant process.'
            }
        )

        petEnchant:Create('Button', 'Cancel Enchanting',
            function()
                getgenv().AutoEnchant = false
            end,
            {
                BtnText = 'Go!',
                Description = 'This will obviously stop the enchanting process.'
            }
        )

        enchantLabel = petEnchant:Create('Label', 'Enchant:')

        --[[        
            print(tostring(v.nk))
            print(tostring(v.uid))
            print(tostring(v.powers[1][1].. " ".. v.powers[1][2]))
            if v.powers[2] then
                print('No Second power')
            end
            break
        ]]

        local makeGoldPets = false
        local makeRainPets = false
        petSec:Create('Toggle', 'Auto Gold',
            function(state)
                makeGoldPets = state
                if makeGoldPets then
                    repeat
                        MakeGold(6)
                        wait(1)
                    until not makeGoldPets
                end
            end,
            {
                Flag = 'PSXMakeGoldFlag',
                Description = 'Enabling this will auto convert every pet you have 6+ into the gold version.',
                Default = false
            }
        )

        petSec:Create('Toggle', 'Auto Rainbow',
            function(state)
                makeRainPets = state
                if makeRainPets then
                    repeat
                        MakeRainbow(6)
                        wait(1)
                    until not makeRainPets
                end
            end,
            {
                Flag = 'PSXMakeRainbowFlag',
                Description = 'Enabling this will auto convert every pet you have 6+ into the rainbow version.',
                Default = false
            }
        )

        

        petSec:Create('Button', 'Unequip All Pets',
            function()
                for i, v in pairs(game:GetService("Workspace")["__THINGS"].Pets:GetChildren()) do
                    InvokeRemote('unequip pet', tostring(v))
                end
            end,
            {
                BtnText = 'Go!',
                Description = 'Duh!! Click this to unequip all your active pets.'
            }
        )

        petSec:Create('Button', 'Re-equip All Pets',
            function()
                local equippedPets = {}
                for i, v in pairs(game:GetService("Workspace")["__THINGS"].Pets:GetChildren()) do
                    table.insert(equippedPets, tostring(v))
                end
                wait(1)
                if #equippedPets > 0 then
                    for i, v in pairs(equippedPets) do
                        InvokeRemote('unequip pet', v)
                    end
                    for i, v in pairs(equippedPets) do
                        InvokeRemote('equip pet', v)
                    end
                end
            end,
            {
                BtnText = 'Go!',
                Description = 'This will unequip your current pets, and re-equip the same ones.'
            }
        )
        --#endregion

        --#region Character Tab
            charSec:Create('Slider', 'Walk Speed',
                function(value)
                    game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = value
                end,
                {
                    Flag = 'PSXWalkSpeedFlag',
                    Description = 'Increases your characters walk speed. Duh!',
                    Min = 16,
                    Max = 250,
                    Default = 26
                }
            )

            charSec:Create('Slider', 'Camera Zoom',
                function(value)
                    game.Players.LocalPlayer.CameraMaxZoomDistance = value
                end,
                {
                    Flag = 'PvxCameraZoomFlag', 
                    Description = 'This will allow you to zoom out farther when you increase the value.',
                    Min = 100,
                    Max = 700, 
                    Default = 100
                }
            )

        --#region Hover Speed
            local hoverSpeed = 70
            local hConnects = {}
            
            game.Players.LocalPlayer.PlayerScripts.Scripts.Game.Hoverboard.Disabled = true
            local v1 = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"));
            while not v1.Loaded do
                game:GetService("RunService").Heartbeat:Wait();
            end;
            local u1 = nil;
            function Create(p1)
                local v2 = p1 == v1.LocalPlayer;
                local u2 = v1.Player.Get("Character", p1);
                local u3 = v1.Player.Get("HumanoidRootPart", p1);
                local u4 = v1.Player.Get("Humanoid", p1);
                local function v3()
                    local v4 = not v1.Variables.LoadingWorld and (u2 and (u3 and 0 < u4.Health));
                    return v4;
                end;
                if not v3() then
                    return;
                end;
                if u2:FindFirstChild("__HOVERBOARD") then
                    Remove(p1);
                end;
                local v5 = u4.HipHeight + u3.Size.Y / 2;
                local v6 = v1.Assets.Models:FindFirstChild("Hoverboard"):Clone();
                v6.CFrame = u3.CFrame * CFrame.Angles(0, math.rad(-90), 0) - Vector3.new(0, v5, 0);
                v6.CanCollide = false;
                v6.Name = "__HOVERBOARD";
                v6.Parent = u2;
                local l__Sparkles__7 = v6.Back:FindFirstChild("Sparkles");
                local l__Running__8 = v1.Player.Get("RootPart", p1):FindFirstChild("Running");
                local v9 = nil;
                if l__Running__8 then
                    v9 = l__Running__8.Volume;
                    l__Running__8.Volume = 0;
                end;
                local v10 = nil;
                local v11 = nil;
                if v2 then
                    v10 = Instance.new("BodyPosition");
                    v10.MaxForce = Vector3.new(0, math.huge, 0);
                    v10.Position = v6.Position;
                    v10.D = 1400;
                    v10.Parent = v6;
                    v11 = Instance.new("BodyGyro");
                    v11.MaxTorque = Vector3.new(math.huge, math.huge, math.huge);
                    v11.CFrame = CFrame.Angles(0, math.rad(-90), 0);
                    v11.Parent = v6;
                end;
                local v12 = v1.Functions.Weld(u3, v6);
                local v13 = v1.Assets.Particles:FindFirstChild("Hoverboard Spawn"):Clone();
                v13.Parent = v6.Center;
                v13:Emit(10);
                v1.Audio.Play(3510107225, v6.CFrame.p, 1, 0.5);
                if v2 then
                    u1 = v1.Functions.Animation(3510226236, u4);
                end;
                local u5 = os.clock();
                local function u6()
                    local v14 = v6.Size.X / 2;
                    local v15 = v6.Size.Z / 2;
                    local v16 = nil;
                    local v17 = 1 - 1;
                    while true do
                        if v17 == 1 then
                            local v18 = Vector3.new(-v14, 0, v15);
                        elseif v17 == 2 then
                            v18 = Vector3.new(v14, 0, -v15);
                        elseif v17 == 3 then
                            v18 = Vector3.new(v14, 0, v15);
                        elseif v17 == 4 then
                            v18 = Vector3.new(-v14, 0, -v15);
                        else
                            v18 = Vector3.new(0, 0, 0);
                        end;
                        local v19, v20 = game.Workspace:FindPartOnRayWithWhitelist(Ray.new(u3.CFrame.p + v18, Vector3.new(0, -(3 + v5), 0)), { game.Workspace.__MAP });
                        if v19 then
                            if v20 then
                                if v16 then
                                    if v16.Y < v20.Y then
                                        v16 = v20;
                                    end;
                                else
                                    v16 = v20;
                                end;
                            end;
                        end;
                        if 0 <= 1 then
                            if v17 < 5 then
            
                            else
                                break;
                            end;
                        elseif 5 < v17 then
            
                        else
                            break;
                        end;
                        v17 = v17 + 1;		
                    end;
                    return v16;
                end;
                local u7 = 0;
                local u8 = 0;
                local u9 = v1.Audio.Play(3510107486, v6, 1, 0.1, nil, nil, true);
                v1.RunService:BindToRenderStep("Hoverboard " .. p1.Name, Enum.RenderPriority.Character.Value, function()
                    if v6 then
                        if v6.Parent then
                            if not v3() then
                                if l__Running__8 then
                                    l__Running__8.Volume = v9;
                                end;
                                pcall(function()
                                    v1.RunService:UnbindFromRenderStep("Hoverboard " .. p1.Name);
                                end);
                                return;
                            end;
                        else
                            if l__Running__8 then
                                l__Running__8.Volume = v9;
                            end;
                            pcall(function()
                                v1.RunService:UnbindFromRenderStep("Hoverboard " .. p1.Name);
                            end);
                            return;
                        end;
                    else
                        if l__Running__8 then
                            l__Running__8.Volume = v9;
                        end;
                        pcall(function()
                            v1.RunService:UnbindFromRenderStep("Hoverboard " .. p1.Name);
                        end);
                        return;
                    end;
                    if v2 then
                        u4.PlatformStand = true;
                        local v21 = u6();
                        local v22 = v21 ~= nil;
                        if v22 then
                            local v23 = 0;
                        else
                            v23 = math.clamp(u7 * 1.065, 2, 10);
                        end;
                        u7 = v23;
                        if u7 == nil then
                            u7 = 0
                        end
                        v10.Position = Vector3.new(0, (v22 and v21.Y + 3 or v6.Position.Y - u7) + (math.sin((os.clock() - u5) * 3) / 2 - 0.5), 0);
                        local v24 = u3.Position + u4.MoveDirection;
                        if v24 ~= u3.Position then
                            v11.CFrame = CFrame.new(u3.Position, v24) * CFrame.Angles(0, math.rad(-90), 0);
                        end;
                        if u4.Jump then
                            if v22 then
                                if 1 <= os.clock() - u8 then
                                    u8 = os.clock();
                                    v1.Audio.Play(3510107658, v6, 1.25, 0.4);
                                end;
                            end;
                        end;
                        local v25 = 0;
                        if os.clock() - u8 <= 0.3 then
                            v25 = (1 - math.clamp((os.clock() - u8) / 0.3, 0, 0.5) ^ 2);
                        end;
                        local v26 = u4.MoveDirection * hoverSpeed;
                        u3.Velocity = u3.Velocity:Lerp(Vector3.new(v26.X, -v25, v26.Z), 0.035);
                    end;
                    local l__Magnitude__27 = u3.Velocity.Magnitude;
                    u9.Pitch = math.clamp(1 + l__Magnitude__27 / 70, 1, 2);
                    l__Sparkles__7.Enabled = 8 < l__Magnitude__27;
                end);
            end;
            function Remove(p2)
                local l____HOVERBOARD__28 = v1.Player.Get("Character", p2):FindFirstChild("__HOVERBOARD");
                if l____HOVERBOARD__28 then
                    l____HOVERBOARD__28:Destroy();
                end;
                if p2 == v1.LocalPlayer then
                    if u1 then
                        u1:Stop();
                    end;
                    v1.Player.Get("HumanoidRootPart").Velocity = Vector3.new();
                    v1.Player.Get("Humanoid").PlatformStand = false;
                end;
            end;
            local l__Hoverboard__10 = v1.GUI.Main.Tools.Hoverboard;
            function UpdateButton()
                l__Hoverboard__10.Lock.Visible = not CanUseHoverboard();
                l__Hoverboard__10.Keybind.Visible = not v1.Variables.Mobile;
                l__Hoverboard__10.Keybind.Desktop.Visible = v1.Variables.Desktop;
                l__Hoverboard__10.Keybind.Xbox.Visible = v1.Variables.Console;
                l__Hoverboard__10.BackgroundColor3 = v1.Variables.UsingHoverboard and Color3.fromRGB(252, 209, 59) or Color3.fromRGB(59, 177, 252);
            end;
            function Toggle()
                v1.Variables.UsingHoverboard = not v1.Variables.UsingHoverboard;
                if not v1.Variables.UsingHoverboard then
                    Remove(v1.LocalPlayer);
                else
                    Create(v1.LocalPlayer);
                end;
                UpdateButton();
                v1.Network.Fire("Update Hoverboard State", v1.Variables.UsingHoverboard);
            end;
            local l__ID__11 = v1.Directory.Gamepasses.Hoverboard.ID;
            function CanUseHoverboard()
                return v1.Gamepasses.Owns(l__ID__11);
            end;
            function ProcessInput(p3)
                if not CanUseHoverboard() then
                    if not p3 then
                        v1.Functions.PromptPurchase(l__ID__11);
                    end;
                    return;
                end;
                if v1.WorldCmds.CanDoAction() then
                    Toggle();
                end;
            end;
            v1.GUIFX.Tooltip(l__Hoverboard__10, "Hoverboard");
            v1.GUIFX.ButtonFX(l__Hoverboard__10);
            local u12 = false;
            hConnects.hoverActive = l__Hoverboard__10.Activated:Connect(function()
                if not u12 then
                    u12 = true;
                    ProcessInput();
                    u12 = false;
                end;
            end);
            UpdateButton();
            hConnects.hoverStatChanged = v1.Signal.Fired("Stat Changed"):Connect(function(p4)
                if p4 == "Gamepasses" then
                    UpdateButton();
                end;
            end);
            hConnects.hoverChangePF = v1.Signal.Fired("Changed Platform"):Connect(function()
                UpdateButton();
            end);
            local l__Enum_KeyCode_Q__13 = Enum.KeyCode.Q;
            hConnects.hoverInput = v1.UserInputService.InputBegan:Connect(function(p5, p6)
                if not p6 and ((p5.KeyCode == l__Enum_KeyCode_Q__13 or p5.KeyCode == Enum.KeyCode.DPadUp) and not u12) then
                    u12 = true;
                    ProcessInput(true);
                    u12 = false;
                end;
            end);
            hConnects.hoverEnterCannon = v1.Signal.Fired("Entered Cannon"):Connect(function()
                if v1.Variables.UsingHoverboard then
                    Toggle();
                end;
            end);
            hConnects.hoverWorldChange = v1.Signal.Fired("World Changed"):Connect(function()
                if v1.Variables.UsingHoverboard then
                    Toggle();
                end;
            end);
            function UpdatePlayer(p7, p8)
                local v29 = v1.Player.Get("Character", p7);
                if p8 then
                    if not v29:FindFirstChild("__HOVERBOARD") then
                        Create(p7);
                        return;
                    end;
                end;
                if not p8 then
                    if v29:FindFirstChild("__HOVERBOARD") then
                        Remove(p7);
                    end;
                end;
            end;
            function TrackPlayer(p9)
                local v30 = v1.Entity.Get(p9);
                if v30 then
                    if v30.UsingHoverboard then
                        while true do
                            if v1.Variables.LoadingWorld then
            
                            else
                                break;
                            end;
                            v1.Heartbeat();			
                        end;
                        UpdatePlayer(p9, true);
                    end;
                    hConnects.hoverPlayerChanged = v30.Changed:Connect(function(p10, p11)
                        if p10 == "UsingHoverboard" then
                            UpdatePlayer(p9, p11);
                        end;
                    end);
                end;
            end;
            hConnects.playerAdded = game.Players.PlayerAdded:Connect(function(p12)
                TrackPlayer(p12);
            end);
            for v31, v32 in ipairs(game.Players:GetPlayers()) do
                TrackPlayer(v32);
            end;
        --#endregion

            charSec:Create('Slider', 'Hoverboard Speed',
                function(value)
                    hoverSpeed = value
                end,
                {
                    Flag = 'HoverBoardSpeedFlag', 
                    Description = 'This increases the hover speed if you own the hover.',
                    Min = 70,
                    Max = 700,
                    Default = 70
                }
            )
        --#endregion

        --#region Farming Tab
            local orbbb = false

            local CollectOrbs = function()
                local Orbs = {}
                for _, v in next, OrbFolder:GetChildren() do
                    table.insert(Orbs, v.Name)
                end
                FireRemote("Claim Orbs", Orbs)
                return true
            end

            spawn(function()
                while true do
                    if orbbb then CollectOrbs() end -- replace this with just CollectOrbs() if you dont have a toggle for it
                    wait(0.05)
                end
            end)

            farmingSec:Create('Dropdown', 'Farming Type',
                function(selected)
                    farmType = selected
                end,
                {
                    Flag = 'FarminTypeFlag',
                    Description = 'Select the type of farming you want to be done.',
                    Options = {'Normal', 'Chest', 'Multi-Target', 'Highest Value', 'Nearest'}
                }
            )

            farmingSec:Create('Dropdown', 'Target',
                function(selected)
                    targetType = selected
                end,
                {
                    Flag = 'FarminTypeFlag',
                    Description = 'Select the type of farming you want to be done.',
                    Options = Chests
                }
            )

            farmingSec:Create('Dropdown', 'Location',
                function(selected)
                    locataionType = selected
                end,
                {
                    Flag = 'FarminTypeFlag',
                    Description = 'Select the type of farming you want to be done.',
                    Options = {'All', 'VIP', 'Alien Forest', 'Alien Lab', 'Ancient', 'Beach', 'Candy', 'Dark Tech', 'Desert', 'Enchanted Forest', 'Forest', 'Glacier', 'Haunted', 'Heaven', 'Hell', 'Ice Tech', 'Mine', 'Samurai', 'Steampunk', 'Tech City', 'Town', 'Volcano', 'Winter'}
                }
            )

            local farmState = nil

            local farmStuff = function()
                local CurFarmingPets = {}
                while rs:wait() and farmState do
                    local pethingy = GetMyPets()
                    if farmType == 'Normal' then
                        local cointhiny = GetCoins(locataionType)
                        for i = 1, #cointhiny do
                            if farmState and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                                for _, bb in pairs(pethingy) do
                                    if farmState and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                                        spawn(function()
                                            FarmCoin(cointhiny[i].index, bb)
                                        end)
                                    end
                                end
                                repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index)
                            end
                        end
                    elseif farmType == 'Chest' then
                        for i,v in pairs(AllChests()) do
                            if (v.n == targetType) or (targetType == 'All') then
                                local starttick = tick()
                                for a, b in pairs(pethingy) do
                                    pcall(function() FarmCoin(v.index, b) end)
                                end
                                repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0
                            end
                        end
                    elseif farmType == 'Highest Value' then
                        local cointhiny = GetCoinTable(locataionType)
                        for a,b in pairs(pethingy) do
                            spawn(function() FarmCoin(cointhiny[1].index, b) end)
                        end
                        repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0
                    elseif farmType == 'Multi-Target' then
                        local cointhiny = GetCoins(locataionType)
                        for i = 1, #cointhiny do
                            if i%#pethingy == #pethingy-1 then wait() end
                            if not CurFarmingPets[pethingy[i%#pethingy+1]] or CurFarmingPets[pethingy[i%#pethingy+1]] == nil then
                                spawn(function()
                                    CurFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                                    FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                                    repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0
                                    CurFarmingPets[pethingy[i%#pethingy+1]] = nil
                                end)
                            end
                        end
                    elseif farmType == 'Nearest' then
                        local NearestOne = nil
                        local NearestDistance = math.huge
                        for i,v in pairs(game:GetService("Workspace")["__THINGS"].Coins:GetChildren()) do
                            if (v.POS.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < NearestDistance then
                                NearestOne = v
                                NearestDistance = (v.POS.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            end
                        end
                        for a,b in pairs(pethingy) do
                            spawn(function() FarmCoin(NearestOne.Name, b) end)
                        end
                    end
                end
            end

            farmingSec:Create('Toggle', 'Enable Farming',
                function(state)
                    farmState = state
                    if state then
                        farmStuff()
                    end
                end,
                {
                    Flag = 'PSXEnableFarmingFlag',
                    Description = 'Enabling this will turn on or off auto farming.',
                    Default = false
                }
            )

            local collectLootBags = false

            farmingSec:Create('Toggle', 'Enable Loot Bag Collect',
                function(state)
                    collectLootBags = state
                    if state then
                        repeat
                            for i, v in next, game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren() do
                                v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                            end
                            wait(1)
                        until collectLootBags == false
                    end
                end,
                {
                    Flag = 'PSXLootBag',
                    Description = 'This will auto collect the loot bags that drop when collecting coins.',
                    Default = false
                }
            )

            farmingOpts:Create('Toggle', 'Collect Orbs',
                function(state)
                    orbbb = state
                    --_G.MyConnection = game.Workspace.__THINGS.Orbs.ChildAdded:Connect(function(Orb)
                        --game.Workspace.__THINGS.__REMOTES["claim orbs"]:FireServer({{Orb.Name}})
                    --end)
                end,
                {
                    Flag = 'PSXCollectOrbs',
                    Description = 'Enabling this will automatically collect the orbs that drop in the game.',
                    Default = false
                }
            )
            library:UpdateToggle('PSXCollectOrbs', true)

            local disRender = true

            farmingOpts:Create('KeyBind', 'Disable All Rendering',
                function()
                    disRender = not disRender
                    game:GetService("RunService"):Set3dRenderingEnabled(disRender)
                    if not disRender then
                        
                        local DonateBase = Instance.new("ScreenGui")
                        local TextLabel = Instance.new("TextLabel")

                        DonateBase.Name = "DonateBase"
                        DonateBase.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

                        TextLabel.Parent = DonateBase
                        TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        TextLabel.Position = UDim2.new(-0.416081339, 0, -0.88863039, 0)
                        TextLabel.Size = UDim2.new(1, 1010, 1, 1000)
                        TextLabel.Font = Enum.Font.Gotham
                        TextLabel.Text = ""
                        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        TextLabel.TextSize = 20.000
                    else
                        pcall(function() game.Players.LocalPlayer.PlayerGui.DonateBase:Destroy() end)
                    end
                end,
                {
                    Flag = 'PSXDisableRenderFlag',
                    Description = 'This will disable all game rendering to make it more smooth.',
                    Default = Enum.KeyCode.K
                }
            )

            farmingOpts:Create('Button', 'Hide From Other Players',
                function()
                    game.Players.LocalPlayer.Character:BreakJoints()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will send you in a far away area so you can farm in peace.'
                }
            )
        --#endregion

        --#region Egg Tab
            local selEgg = 'Cracked Egg'
            local tripleEggs = false

            local dippy = function()
                while wait() and openEggs do
                    local args = {
                        [1] = {
                            [1] = selEgg,
                            [2] = tripleEggs
                        }
                    }
                    workspace.__THINGS.__REMOTES:FindFirstChild("buy egg"):InvokeServer(unpack(args))
                end
            end

            eggSecTer:Create('Dropdown', 'Egg Type',
                function(selected)
                    selEgg = selected
                end,
                {
                    Flag = 'PSXEggTypeFlag',
                    Description = 'This is the type of egg you want the script to auto open for you.',
                    Options = EggData
                }
            )
            

            eggSecTer:Create('Toggle', 'Auto Buy Eggs',
                function(state)
                    openEggs = state
                    if state then
                        dippy()
                    end
                end,
                {
                    Flag = 'AutoEggPurchFlag',
                    Description = 'Automatically opens and buys eggs.',
                    Default = false
                }
            )

            eggSetts:Create('Button', 'Disable Egg Animation',
                function()
                    for i,v in pairs(getgc(true)) do
                        if (typeof(v) == 'table' and rawget(v, 'OpenEgg')) then
                            v.OpenEgg = function()
                                return
                            end
                        end
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will allow you to open eggs without seeing the egg animation show on screen.'
                }
            )    

            eggSetts:Create('Toggle', 'Triple Eggs',
                function(state)
                    tripleEggs = state
                end,
                {
                    Flag = 'PSXTripleEggsFlag',
                    Description = 'Enable this to open 3 eggs at once IF you have the gamepass triple eggs.',
                    Default = false
                }
            )
      
        --#endregion

        --#region Settings Tab
            settingSec:Create('Keybind', 'Show/Hide Gui',
            function()
                library.ui.Enabled = not library.ui.Enabled
            end,
                {
                    Flag = 'ShowHideGuiFlag',
                    Description = 'Temporarily show or hide the gui window from view.',
                    Default = Enum.KeyCode.RightControl
                }
            )
            local PSnoClip = false

            local noclipDis = nil

            settingSec:Create('Toggle', 'No Clip',
                function(state)
                    PSnoClip = state
                    if state then
                        noclipDis = game:GetService("RunService").RenderStepped:Connect(function()
                            if game:GetService("Players").LocalPlayer.Character:FindFirstChild('UpperTorso') then
                                game:GetService("Players").LocalPlayer.Character.UpperTorso.CanCollide = not PSnoClip
                                game:GetService("Players").LocalPlayer.Character.LowerTorso.CanCollide = not PSnoClip
                                game:GetService("Players").LocalPlayer.Character.Head.CanCollide = not PSnoClip
                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CanCollide = not PSnoClip
                            end
                        end)
                    else
                        noclipDis:Disconnect()
                    end
                end,
                {
                    Flag = 'PetSimNoClipFlag',
                    Description = 'Enabling this will let you walk through objects.',
                    Default = false
                }
            )

            settingSec:Create('Button', 'Unlock Gamepasses',
                function()
                    local main = debug.getupvalues(require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library")).Save.Get)[2][game.Players.LocalPlayer].save.Gamepasses
                    table.insert(main,18674296)
                    table.insert(main,18674298)
                    table.insert(main,18674321)
                    table.insert(main,18674288)
                    table.insert(main,21583760)
                    table.insert(main,18829757)
                    table.insert(main,18674317)
                    table.insert(main,21641016)
                    table.insert(main,22596039)
                    table.insert(main,18674307)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will unlock some of the gamepasses.'
                }
            )

            settingSec:Create('Button', 'Lag Reducer',
                function()
                    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = true
                    if game:GetService("Workspace"):FindFirstChild("__DEBRIS") then
                      game:GetService("Workspace")["__DEBRIS"]:Destroy()
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This just removes debris in the game that could cause lag.'
                }
            )

            local diamondLabel
            local techLabel
            local fantasyLabel
            local coinLabel

            local statsRunning

            local stats = function(state)
                statsRunning = state
                local gamelibrary = require(game:GetService("ReplicatedStorage").Framework.Library)
                local Save = gamelibrary.Save.Get
                local Commas = gamelibrary.Functions.Commas
                local types = {}
                local sidemenus = game:GetService("Players").LocalPlayer.PlayerGui.Main.Right
                for i, v in pairs(sidemenus:GetChildren()) do
                    if v.ClassName == 'Frame' and v.Name ~= 'Rank' and not string.find(v.Name, "2") then
                        table.insert(types, v.Name)
                    end
                end

                function get(thistype)
                    return Save()[thistype]
                end

                for i,v in pairs(types) do
                    
                    spawn(function()
                        local megatable = {}
                        local imaginaryi = 1
                        local ptime = 0
                        local last = tick()
                        local now = last
                        local TICK_TIME = 1
                        while statsRunning do
                            if ptime >= TICK_TIME then
                                while ptime >= TICK_TIME do ptime = ptime - TICK_TIME end
                                local currentbal = get(v)
                                megatable[imaginaryi] = currentbal
                                local diffy = currentbal - (megatable[imaginaryi-120] or megatable[1])
                                imaginaryi = imaginaryi + 1
                                if tostring(v) == 'Diamonds' then
                                    diamondLabel.Text = '    Diamonds: '.. tostring(Commas(diffy).." in 60s")
                                elseif tostring(v) == 'Tech Coins' then
                                    techLabel.Text = '    Tech Coins: '.. tostring(Commas(diffy).." in 60s")
                                elseif tostring(v) == 'Fantasy Coins' then
                                    fantasyLabel.Text = '    Fantasy Coins: '.. tostring(Commas(diffy).." in 60s")
                                elseif tostring(v) == 'Coins' then
                                    coinLabel.Text = '    Coins:'.. tostring(Commas(diffy).." in 60s")
                                end
                            end
                            task.wait(0.001)
                            now = tick()
                            ptime = ptime + (now - last)
                            last = now
                        end
                    end)
                end
            end

            local redeemRank = false

            settingSec:Create('Toggle', 'Auto Collect Rank Rewards',
                function(state)
                    redeemRank = state
                    repeat
                        InvokeRemote("redeem rank rewards")
                        InvokeRemote('redeem vip rewards')
                        wait(180)
                    until redeemRank == false
                end,
                {
                    Flag = 'PSXRedeemRankFlag',
                    Description = 'Enable this to automatically collect rank rewards every 5 hours.',
                    Default = false
                }

            )
            library:UpdateToggle('PSXRedeemRankFlag', true)



            diamondLabel = settingStat:Create('Label', 'Diamonds:')
            techLabel = settingStat:Create('Label', 'Tech Coins:')
            fantasyLabel = settingStat:Create('Label', 'Fantasy Coins:')
            coinLabel = settingStat:Create('Label', 'Coins:')

            settingStat:Create('Toggle', 'Calculate Stats',
                function(state)
                    stats(state)
                end,
                {
                    Flag = 'PSXStatsToggleFlag',
                    Description = 'This will show you how many coins you get per minute.',
                    Default = false
                }
            )
        --#endregion

            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    pcall(function() TeleportKey:Disconnect() end)
                    pcall(function() libClosed:Disconnect() end)
                    pcall(function() noclipDis:Disconnect() end)
                    pcall(function() orbCol:Disconnect() end)
                    for i, v in pairs(hConnects) do
                        pcall(function() v:Disconnect() end)
                    end
                    redeemRank = false
                    orbCol = true
                    library:UpdateToggle('PSXCollectOrbs', false)
                    library:UpdateToggle('PSXEnableFarmingFlag', false)
                    library:UpdateToggle('PSXRedeemRankFlag', false)
                end
            end)
        end,

    --#endregion

        --#region ------------------------------------------------------------Bee Sim
        ['Bee Sim'] = function()
            hookfunction(getrenv().error, function() end)
            hookfunction(getrenv().warn, function() end)


            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end

            getrenv().warn = function() end

            local TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if mouse.Target and mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(mouse.Hit.Position.X, mouse.Hit.Position.Y + 2.0, mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl)
            end

            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })

            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    pcall(function() TeleportKey:Disconnect() end)
                end
            end)

        end,

        --#endregion

        --#region ------------------------------------------------------------Miners Haven
        ['Miner Haven'] = function()

            if gethui then
                if gethui():FindFirstChild('CynicalV3') then
                    gethui().CynicalV3:Destroy()
                end
            elseif get_hidden_gui then
                if get_hidden_gui():FindFirstChild('CynicalV3') then
                    get_hidden_gui().CynicalV3:Destroy()
                end
            else
                if game.CoreGui:FindFirstChild('CynicalV3') then
                    game.CoreGui.CynicalV3:Destroy()
                end
            end

            local mhvar = {}

            local TeleportKey = game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if mouse.Target and mouse.Target.Parent then
                        if isControlKeyDown() then
                            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(mouse.Hit.Position.X, mouse.Hit.Position.Y + 2.0, mouse.Hit.Position.Z))
                        end
                    end
                end
            end)

            local SendNotification = function(Text) -- Sends Notification in the bottom right of the screen
                game.StarterGui:SetCore("SendNotification", {
                    Title = 'Fusion',
                    Text = Text,
                    Icon = "rbxassetid://6243863672",
                    Duration = 5
                })
            end

            function isControlKeyDown(input, gameProcessedEvent)
                return game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl)
            end

            function GetBase()
                for i, v in next, game:GetService("Workspace").Tycoons:GetChildren() do
                    if v.Owner.Value == tostring(game.Players.LocalPlayer) then
                        return v 
                    end
                end
            end

            function oreScanners()
                for i, v in next, game:GetService("Workspace").Tycoons:GetChildren() do
                    if v.Owner.Value == tostring(game.Players.LocalPlayer) then
                        for n, m in next, v:GetChildren() do
                            if m.Name == 'Flaming Ore Scanner' or m.Name == 'Advanced Ore Scanner' then
                                m.Model.Scan.Size = Vector3.new(10, 4, 1)
                            end
                            if m.Name == 'Ore Scanner' then
                                m.Model.Scan.Size = Vector3.new(10, 4, 1)
                            end
                            if m.Name == 'Clockwork' then
                                m.Model.Upgrade.Size = Vector3.new(10, 5, 1)
                            end
                            if m.Name == 'Plasma Scanner' then
                                m.Model.Upgrader.Size = Vector3.new(10, 5, 1)
                            end
                        end
                    end
                end
            end

            function freon()
                for i, v in next, game:GetService("Workspace").Tycoons:GetChildren() do
                    if v.Owner.Value == tostring(game.Players.LocalPlayer) then
                        for n, m in next, v:GetChildren() do
                            if m.Name == 'Freon-Blast Upgrader' then
                                m.Model.Upgrade.Size = Vector3.new(8, 5, 1)
                                m.Model.Upgrade2.Size = Vector3.new(8, 5, 1)
                            end
                        end
                    end
                end
            end


            local Main = library:CreateUI({
                ProjectName = "CynicalV3",
                UiText = fusVersion
            })

            mhvar.mouse = game.Players.LocalPlayer:GetMouse()

            local creditTab = Main:CreateCategory("Credits")
            local creditSec = creditTab:CreateSection("Developers")
            local creditOpts = creditTab:CreateSection('Options')
            local teleTab = Main:CreateCategory('Teleports')
            local teleSec = teleTab:CreateSection('Locations')
            local baseTab = Main:CreateCategory('Base')
            local baseSec = baseTab:CreateSection('Base Options')
            local baseBuild = baseTab:CreateSection('Save/Load Bases')
            local charTab = Main:CreateCategory('Character')
            local MoveCharSec = charTab:CreateSection('Movement')
            local charAutoSec = charTab:CreateSection('Settings')
            local resTab = Main:CreateCategory('Resources')
            local resSec = resTab:CreateSection('Resources Collection')
            local giftTab = Main:CreateCategory('Gifts')
            local giftSec = giftTab:CreateSection('Auto Gifts')
            local optTab = Main:CreateCategory('Options')
            local optSec = optTab:CreateSection('Settings')

            local antiIdle
            
            if syn or sWare then
                --updateStatus(antiIdleRed, true)
                for _, v in next, getconnections(game.Players.LocalPlayer.Idled) do
                    local Success, Result = pcall(function()
                        v:Disable()
                    end)
                    if not Success then
                        print(tostring('Anti-Idle Error: '..Result))
                    end
                end
            else
                --updateStatus(antiIdleRed, true)
                antiIdle = game.Players.LocalPlayer.Idled:Connect(function()
                    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    wait(1)
                    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                end)
            end

            --#region Credits Tab
            creditSec:Create('Label', 'Main Dev - Cynical Modder')
            creditOpts:Create('Button', 'Close Script', 
                function()
                    if syn and syn.protect_gui then
                        syn.unprotect_gui(library.ui)
                    end
                    library.ui:Destroy()
                end,    
                {
                    BtnText = 'Go!',
                    Description = 'If you clicked this you are just a retard.'
                }
            )

            creditOpts:Create('Keybind', 'Show/Hide Gui',
            function()
                library.ui.Enabled = not library.ui.Enabled
            end,
                {
                    Flag = 'MHShowHideGuiFlag',
                    Description = 'Temporarily show or hide the gui window from view.',
                    Default = Enum.KeyCode.RightControl
                }
            )
            --#endregion

            --#region Teleports Tab

            teleSec:Create('Dropdown', 'Teleports',
                function(selected)
                    if selected == 'Base' then
                        local base = GetBase()
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = base.Base.CFrame + Vector3.new(0, 15, 0)
                    elseif selected == 'Tower Interior' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.TowerInterior.CFrame
                    elseif selected == 'Temple' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.Temple.CFrame
                    elseif selected == 'Oz Cave' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.OzCave.CFrame
                    elseif selected == 'Dusekkar Cavern' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.DusekkarCavern.CFrame
                    elseif selected == 'DUSC Interior' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.DUCInterior.CFrame
                    elseif selected == 'McDook Shop' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.McDookShop.CFrame
                    elseif selected == 'Void Island' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.TeleporterModel.VoidIsland.CFrame
                    elseif selected == 'Fargield' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-323.29333496094, 103.8157119751, 528.89831542969)
                    elseif selected == 'John Doe' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-727.18029785156, 40.795207977295, -28.515674591064)
                    elseif selected == "Jak'uhfdor" then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-36.825698852539, 159.10111999512, 538.35339355469)
                    elseif selected == 'Santa' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-63.761390686035, 159.31076049805, 556.77966308594)
                    elseif selected == 'Snowge' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-67.457160949707, 176.59692382812, 415.40170288086)
                    elseif selected == 'Masked Man' then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game:GetService("Workspace"):FindFirstChild('Market').Internal.Position)
                    end
                end,
                {
                    Flag = 'MHTeleLocationsFlag',
                    Description = 'Just pick where you want to teleport to and you shall go.',
                    Options = {'Base', 'Tower Interior', 'Temple', 'Oz Cave', 'Dusekkar Cavern', 'DUSC Interior', 'McDook Shop', 'Void Island', 'Fargield', 'John Doe', "Jak'uhfdor", 'Santa', 'Snowge', 'Masked Man'}
                }
            )

            --#endregion

            --#region Base Tab
            baseSec:Create('Dropdown', 'Quick Load Base',
                function(selected)
                    game:GetService("ReplicatedStorage").DestroyAll:InvokeServer()
                    wait(1)
                    game:GetService("ReplicatedStorage").Layouts:InvokeServer('Load', selected)
                    wait(5)
                    oreScanners()
                    freon()
                end,
                {
                    Flag = 'MHBaseSelectFlag',
                    Description = 'Choosing an option in this dropdown will let you quick load your bases.',
                    Options = {'Layout1', 'Layout2', 'Layout3'}
                }
            )
            --#endregion

            --#region Load Save Base

            local GetPlot = function()
                for _, v in next, workspace.Tycoons:GetChildren() do
                    if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer.Name then
                        return v
                    end
                end
            end
            local IgnoreNames = {"Owner", "Base", "AdjustSpeed", "SpecialMusic", "Producing"}
            local DumpItems = function()
                local CurrentPlot = GetPlot()
                local BaseDump = {}
                for _, v in next, CurrentPlot:GetChildren() do
                    if not table.find(IgnoreNames, v.Name) then
                        local Pos = v.Hitbox.Position - CurrentPlot.Base.Position
                        local CFrame = {v.Hitbox.CFrame:components()}
                        CFrame[1] = Pos.X
                        CFrame[2] = Pos.Y
                        CFrame[3] = Pos.Z
                        table.insert(BaseDump, {v.Name, CFrame})
                    end
                end
                return BaseDump
            end
            local SaveBaseDump = function(name)
                local Items = DumpItems()
                writefile(name .. ".json", game:GetService("HttpService"):JSONEncode(Items))
            end
            local LoadBaseDump = function(name)
                local CurrentPlot = GetPlot()
                if isfile(name .. ".json") then
                    local DumpFileTbl = game:GetService("HttpService"):JSONDecode(readfile(name .. ".json"))
                    for _, v in next, DumpFileTbl do
                        task.spawn(function()
                            local name, pos = v[1], v[2]
                            pos = CurrentPlot.Base.CFrame * CFrame.new(unpack(pos))
                            game.ReplicatedStorage.PlaceItem:InvokeServer(name, pos, {CurrentPlot.Base})
                        end)
                    end
                else
                    warn("invalid file name")
                end
            end

            mhvar.saveTextBox = nil
            mhvar.loadTextBox = nil
            mhvar.saveButton = nil
            mhvar.loadButton = nil
            local saveFileName = nil
            local loadFileName = nil

            local hideLoadSave = function()
                mhvar.saveTextBox.Visible = false
                mhvar.loadTextBox.Visible = false
                mhvar.saveButton.Visible = false
                mhvar.loadButton.Visible = false
            end

            baseBuild:Create('Dropdown', 'Load/Save Your Base',
                function(selected)
                    hideLoadSave()
                    if selected == 'Save Base' then
                        mhvar.saveTextBox.Visible = true
                        mhvar.saveButton.Visible = true
                    elseif selected == 'Load Base' then
                        mhvar.loadTextBox.Visible = true
                        mhvar.loadButton.Visible = true
                    end
                end,
                {
                    Flag = 'MHLoadSaveFlag',
                    Description = 'Save or load the base you saved or someone else saved and sent to you using this.',
                    Options = {'Save Base', 'Load Base'}
                }
            )

            mhvar.saveTextBox = baseBuild:Create('Textbox', 'Save Filname',
                function(text)
                    saveFileName = text
                end,
                {
                    Flag = 'MHSaveFilenameFlag',
                    Description = 'This is the filename you want your base to be named.',
                    Default = ''
                }
            )

            mhvar.saveButton = baseBuild:Create('Button', 'Save File', 
                function()
                    if saveFileName then
                        SaveBaseDump(saveFileName)
                    else
                        SendNotification('You must put in the filename you want to save your base as.')
                    end
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Save the file with the filename typed in above.'
                }
            )

            mhvar.loadTextBox = baseBuild:Create('Textbox', 'Load Filname',
            function(text)
                loadFileName = text
            end,
            {
                Flag = 'MHLoadFilenameFlag',
                Description = 'This is the filename of the base you want to load.',
                Default = ''
            }
        )

        mhvar.loadButton = baseBuild:Create('Button', 'Load File', 
            function()
                if loadFileName then
                    game:GetService("ReplicatedStorage").DestroyAll:InvokeServer()
                    LoadBaseDump(loadFileName)
                else
                    SendNotification('You must put in a filename you want to load.')
                end
            end,
            {
                BtnText = 'Go!',
                Description = 'Save the file with the filename typed in above.'
            }
        )
        hideLoadSave()
            --#endregion

            --#region Character Tab
            local autoBase = 'Layout1'

            MoveCharSec:Create('Slider', 'Walk Speed', 
                function(value)
                    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
                end,
                {
                    Flag = 'MHWalkSpeedFlag',
                    Description = 'Obviously changing this will make your character walk faster.',
                    Min = 16,
                    Max = 100,
                    Default = 40
                }
            )
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 40

            MoveCharSec:Create('Slider', 'Jump Power',
                function(value)
                    game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
                end,
                {
                    Flag = 'MHJumpPowerFlag',
                    Description = 'Obviously changing this will let your character walk faster.',
                    Min = 50,
                    Max = 400,
                    Default = 50
                }
            )

            local rebirthAuto; rebirthAuto = function()
                local life = game:GetService("Players").LocalPlayer.Rebirths.Value
                game:GetService("ReplicatedStorage").Rebirth:InvokeServer("26")
                task.wait(2)
                if library.flags.MHLoadBaseRebirthFlag then
                    if life ~= game:GetService("Players").LocalPlayer.Rebirths.Value then
                        game:GetService("ReplicatedStorage").Layouts:InvokeServer('Load', autoBase)
                    end
                end
                if library.flags.MHCharAutoRebirthFlag then
                    rebirthAuto()
                end
                
                if library.flags.MHAutoFireQuaserFlag then
                    game:GetService("ReplicatedStorage").Pulse:FireServer()
                end
            end

            charAutoSec:Create('Toggle', 'Auto Rebirth',
                function(state)
                    if state then rebirthAuto() end
                end,
                {
                    Flag = 'MHCharAutoRebirthFlag',
                    Description = 'This will auto rebirth your character when you get enough money.'
                }
            )

            charAutoSec:Create('Dropdown', 'Select Layout',
                function(selected)
                    autoBase = selected
                end,
                {
                    Flag = 'MHLoadBaseAutoFlag',
                    Description = 'This is the base that you will choose to automatically load after you rebirth.',
                    Options = {'Layout1', 'Layout2', 'Layout3'}
                }
            )

            charAutoSec:Create('Toggle', 'Rebirth Load Base',
                function(state)

                end,
                {
                    Flag = 'MHLoadBaseRebirthFlag', 
                    Description = 'Enabling this will load your base automatically after you rebirth. Defaults to Layout1'
                }
            )

            charAutoSec:Create('Toggle', 'Auto Fire Quasar',
                function(state)

                end,
                {
                    Flag = 'MHAutoFireQuaserFlag',
                    Description = 'This will auto fire the quasar if you have one every time you auto rebirth to get rid of pesky ore.'
                }
            )
            --#endregion

            --#region Resources tab
            mhvar.manualCollect = nil
            mhvar.autoCollect = nil
            mhvar.collectFunction = nil
            mhvar.RemoteSpam = nil
            mhvar.CrateOpener = nil
            mhvar.CrateLabel = nil
            mhvar.RemoteSpeed = nil
            mhvar.crateType = nil
            local charPos = nil

            local hideCollectors = function()
                mhvar.autoCollect.Visible = false
                mhvar.manualCollect.Visible = false
                mhvar.RemoteSpam.Visible = false
                library:UpdateToggle('MHAutoCollectFlag', false)
                mhvar.CrateOpener.Visible = false
                library:UpdateToggle('MHAutoCrateFlag', false)
                mhvar.CrateLabel.Visible = false
                mhvar.RemoteSpeed.Visible = false
                mhvar.crateType:ToggleVisible(false)
            end

            resSec:Create('Dropdown', 'Auto ',
                function(selected)
                    hideCollectors()
                    if selected == 'Manual' then
                        mhvar.manualCollect.Visible = true
                    elseif selected == 'Automatic' then
                        mhvar.autoCollect.Visible = true
                        mhvar.RemoteSpam.Visible = true
                        mhvar.CrateOpener.Visible = true
                        mhvar.CrateLabel.Visible = true
                        mhvar.RemoteSpeed.Visible = true
                        mhvar.crateType:ToggleVisible(true)
                    end
                end,
                {
                    Flag = 'MHCollectFlag',
                    Description = 'Choose which type of box collection you would like to have.',
                    Options = {'Manual', 'Automatic'}
                }
            )

            mhvar.manualCollect = resSec:Create('Button', 'Collect Boxes',
                function()
                    charPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                    CollectBoxes(charPos)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will bring all boxes on the map to your location to collect.'
                }
            )

            local BoxNames = {"Research", "Golden", "Crystal", "Lucky", "Diamond", "Present"}
            local CollectBoxes; CollectBoxes = function(pos)
                local BasePos = GetBase()
                local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                for _, v in next, workspace:GetChildren() do
                    if table.find(BoxNames, v.Name) then
                        for i=1,10 do 
                            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(v.Position) + Vector3.new(0, 3, 0))
                            task.wait() 
                        end
                        wait(0.5)        
                    end
                end
                for _, v in next, workspace.Shadows:GetChildren() do
                    for i=1,10 do 
                        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(v.Position) + Vector3.new(0, 3, 0)) 
                        task.wait() 
                    end
                    wait(0.5)        
                end
                if game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame ~= OldPos then
                    game.Players.LocalPlayer.Character:MoveTo(pos) 
                end
                if library.flags.MHAutoCollectFlag then
                    wait(3)
                    CollectBoxes(charPos) 
                end
            end

            mhvar.autoCollect = resSec:Create('Toggle', 'Auto Collect Boxes',
                function(state)
                    charPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                    if state then CollectBoxes(charPos) end
                end,
                {
                    Flag = 'MHAutoCollectFlag',
                    Description = 'This will bring boxes to you for your character to collect while you are AFK',
                    Default = false
                }
            )

            mhvar.stopRemoteConnect = false

            local mineSpeed = 0.25
            mhvar.RemoteSpeed = resSec:Create('Slider', 'Remote Mine Speed',
                function(value)
                    mineSpeed = value
                end,
                {
                    Flag = 'MHRemoteMineSpeedFlag',
                    Description = 'This will control how fast you auto press remote mines.',
                    Min = 0.25,
                    Max = 3,
                    Default = 0.25,
                    Precise = true
                }
            )

            mhvar.RemoteSpam = resSec:Create('Toggle', 'Auto Spam Remote Mines',
                function(state)
                    mhvar.stopRemoteConnect = not state
                    if state then
                        repeat
                           game:GetService("ReplicatedStorage").RemoteDrop:FireServer()
                           wait(mineSpeed)
                        until mhvar.stopRemoteConnect
                    end
                end,
                {
                    Flag = 'MHSpamRemoteFlag',
                    Description = 'This will spam the remote mines to release their products.',
                    Default = false
                }
            )

            local crateTypes = {'All'}
            for i, v in next, game:GetService("Players").LocalPlayer.Crates:GetChildren() do
                table.insert(crateTypes, tostring(v))
            end

            mhvar.crateType = resSec:Create('Dropdown', 'Open Crate Type',
                function(selected)
                    chosenCrate = selected
                end,
                {
                    Flag = 'MHOpenCrateTypeFlag',
                    Description = 'Choose the type of crate you want automatically opened.',
                    Options = crateTypes
                }
            )

            local opCrates = false
            mhvar.CrateOpener = resSec:Create('Toggle', 'Auto open crates',
                function(state)
                    opCrates = state
                    if state then
                        local cratesOwned = {}
                        for i, v in next, game:GetService("Players").LocalPlayer.Crates:GetChildren() do
                            if v.Value > 0 then
                                if tostring(v) == chosenCrate or chosenCrate == 'All' then
                                    for o = 1, v.Value do
                                        table.insert(cratesOwned, v.Name)
                                    end
                                end
                            end
                        end
                        for i, v in next, cratesOwned do
                            game:GetService("ReplicatedStorage").MysteryBox:InvokeServer(v)
                            for n = 6, 1, -1 do
                                mhvar.CrateLabel.Text = "     Opening ".. tostring(v).. " box. Please wait...(".. tostring(n)..')' 
                                wait(1)
                            end
                            mhvar.CrateLabel.Text = "     Completed opening ".. tostring(v).. ' box.'
                            wait(1)
                            if opCrates == false then
                                mhvar.CrateLabel.Text = '     Enable auto open creates to continue.'
                                break
                            end
                        end
                        
                        mhvar.CrateLabel.Text = '     Enable auto open creates to continue.'
                    end

                end,
                {
                    Flag = 'MHAutoCrateFlag', 
                    Description = 'This will auto open the boxed crates that you collect in game.',
                    Default = false
                }
            )

            mhvar.CrateLabel = resSec:Create('Label', 'Enable auto open creates to continue.')

            hideCollectors()
            --#endregion

            --#region Gifts
            local excLoc = nil
            local giftLoc = nil
            local farmEn = false

            giftSec:Create('Toggle', 'Enable Gift Farm',
                function(state)
                    farmEn = state
                    local ownerBase = GetBase()
                    if farmEn then  
                        if ownerBase:FindFirstChild("Silicon Excavator") then
                            local foundPresent = false
                            repeat
                                repeat
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = ownerBase["Silicon Excavator"].Model.Cover.CFrame + Vector3.new(0, 2, 0)
                                    fireproximityprompt(ownerBase["Silicon Excavator"].Model.Internal.ProximityPrompt)
                                    wait(2)
                                    if game:GetService("Workspace"):FindFirstChild('CreatedPresent') then
                                        foundPresent = true
                                    end
                                until foundPresent
                                foundPresent = false
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62.7443085, 159.298447, 557.87561)
                                wait(3)
                                game:GetService("Workspace").CreatedPresent.PresentValue.Value = 65
                                game:GetService("Workspace").CreatedPresent.PresentValue.Value = 65
                                wait(2)
                                game:GetService("Workspace").CreatedPresent.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 1, 0)
                                wait(1)
                                fireproximityprompt(game:GetService("Workspace").CreatedPresent.ProximityPrompt)
                                wait(1)
                                fireproximityprompt(game:GetService("Workspace").Map.SantaModel.Santa.Internal.ProximityPrompt)
                                wait(6)
                                game:GetService("ReplicatedStorage").CashInGift:InvokeServer()
                                wait(1)

                            until farmEn == false
                        else
                            warn('You do not have a Silicon Excavator.')
                        end
                    end
                end,
                {
                    Flag = 'MHGiftFarmFlag',
                    Description = 'Enable or disable the automatic gift farm',
                    Default = false
                }
            )
            --#endregion

            --#region Options
            mhvar.alwaysDayOff = true
            optSec:Create('Toggle', 'Always Day',
                function(state)
                    mhvar.alwaysDayOff = not state
                    if state then
                        repeat
                            game.Lighting.TimeOfDay = '12:00:00'
                            wait(0.5)
                        until mhvar.alwaysDayOff
                    end                 
                end,
                {
                    Flag = 'MHAlwaysDayFlag',
                    Description = 'If you clicked on this you are a retard',
                    Default = false
                }
            )

            optSec:Create('Button', 'Upgrade Ore Scanners',
                function()
                    oreScanners()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will make the lasers in the scanners larger so it does not miss any ore.'
                }
            )

            optSec:Create('Button', 'Upgrade Freon Blast Upgraders',
                function()
                    freon()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will increase the blast laser size so it will hit every piece of ore.'
                }
            )

            optSec:Create('Button', 'Delete Snow Box',
                function()
                    pcall(function() game:GetService("Workspace").Camera.baseSnowblock:Destroy() end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will delete the snow box that gets in the way of you teleporting and deletes the snow.'
                }
            )

            optSec:Create('Button', 'Merge Freon-Blast Upgraders',
                function()
                    pcall(function() mhvar.mouseOneUnit:Disconnect() end)
                    mhvar.mouseOneUnit = mhvar.mouse.Button1Up:Connect(function()
                        local item = mhvar.mouse.Target
                        if tostring(item.Parent) == 'Freon-Blast Upgrader' then
                            SendNotification('Click on the Freon-Blast Upgrader you want to use.')
                            pcall(function() mhvar.mouseOneUnit:Disconnect() end)
                            local base = GetBase()
                            for i, v in next, base:GetChildren() do
                                if v.Name == 'Freon-Blast Upgrader' then
                                    v.Model.Upgrade.CFrame = item.Parent.Model.Upgrade.CFrame
                                    v.Model.Upgrade2.CFrame = item.Parent.Model.Upgrade.CFrame
                                    freon()
                                end
                            end
                        end
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'Push this button, then click on the Freon-Blast Upgraders you want to merge all other places upgraders with.'
                }
            )

            optSec:Create('Button', 'Merge Portable Ore Advancers',
                function()
                    pcall(function() mhvar.mousePOA:Disconnect() end)
                    SendNotification('Click on the Portable Ore Advancer you want to use.')
                    mhvar.mousePOA = mhvar.mouse.Button1Up:Connect(function()
                        local item = mhvar.mouse.Target
                        if tostring(item.Parent) == 'Portable Ore Advancer' then
                            pcall(function() mhvar.mousePOA:Disconnect() end)
                            local base = GetBase()
                            for i, v in next, base:GetChildren() do
                                if v.Name == 'Portable Ore Advancer' then
                                    --game:GetService("Workspace").Tycoons.Factory1["Portable Ore Advancer"].Model.Upgrade
                                    v.Model.Upgrade.CFrame = item.Parent.Model.Upgrade.CFrame
                                end
                            end
                        end
                    end)
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This will merge all the upgraders of the portable ore advances onto one so you can remove them from the path.'
                }
            )

            optSec:Create('Button', 'Collect Free Daily Box',
                function()
                    game:GetService("ReplicatedStorage").RedeemFreeBox:FireServer()
                end,
                {
                    BtnText = 'Go!',
                    Description = 'This collects the daily free box from the NPC SpookMcDook.'
                }
            )
            --#endregion

            local libClosed = nil 
            libClosed = library.UiParent.ChildRemoved:Connect(function(child)
                if child.Name == library.ProjectName then
                    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
                    pcall(function() mhvar.collectFunction:Disconnect() end)
                    pcall(function() mhvar.mouseOneUnit:Disconnect() end)
                    pcall(function() mhvar.mousePOA:Disconnect() end)
                    library:UpdateToggle('MHAlwaysDayFlag', false)
                    library:UpdateToggle('MHSpamRemoteFlag', false)
                end
            end)

        end

        --#endregion
    }

    --#endregion

    if gameList[game.PlaceId] then
        local game = gameList[game.PlaceId]
        games[game]()
    end

end

--#region --------------------------------------------------------#Whitelist System

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

function dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
    end))
end

local syn_crypt_b64_decode = syn_crypt_b64_decode or dec
------------------------
local convert = function(chars, dist, inv)
    return string.char((string.byte(chars) - 32 + (inv and -dist or dist)) % 95 + 32)
end
local function crypt(str, k, inv) -- i would recommend using this to hide constants or returned strings just for extra security
    local enc = ""
    for i = 1, #str do
        if (#str - k[5] >= i or not inv) then
            for inc = 0, 3 do
                if (i % 4 == inc) then
                    enc = enc .. convert(string.sub(str, i, i), k[5], inv)
                    break
                end
            end
        end
    end
    return enc
end
local datetime = os.date("*t")
local enc1 = {datetime.month, datetime.day, datetime.wday, datetime.hour, -43536758678742}

-- anti L closure (pretty op from hyper i would suggest upgrading this a lot)
if syn_islclosure then
    local LFunctionList = {
        [0] = (http_request or request or syn.request)
    }

    local FunctionIncrement = 0;
    local allChecksPassed = false;
    while true do
        if not LFunctionList[FunctionIncrement] and (FunctionIncrement == #LFunctionList + 1) then
            allChecksPassed = true
            break;
        end
        local Function = LFunctionList[FunctionIncrement]

        local GCS1, GCS2 = debug.getconstants, getconstants
        local GC1, GC2 = debug.getconstant, getconstant
        local GI1, GI2 =  debug.getinfo, getinfo
        local ICL1, ICL2 = islclosure, syn_islclosure
        local GUVS1, GUVS2 = debug.getupvalues, getupvalues
        local GUV1, GUV2 = debug.getupvalue, getupvalue
        local ConstantsCheck1, ConstantsCheck2 = pcall(function()
            GCS1(Function)
        end), pcall(function()
            GCS2(Function)
        end)
        if ConstantsCheck1 or ConstantsCheck2 then
            while true do end
        end

        local ConstantCheck1,ConstantCheck2 = pcall(function()
            GC1(Function, 1)
        end),pcall(function()
            GC2(Function, 1)
        end)
        if ConstantCheck1 or ConstantCheck2 then
            while true do end
        end

        local FSRC1,FSRC2 = GI1(function()end).source, GI2(function()end).source
        local NCFSRC1,NCFSRC2 = GI1(newcclosure(function()end)).source, GI2(newcclosure(function()end)).source
        local FS1,FS2 = GI1(Function).source, GI2(Function).source
        if FSRC1 ~= FSRC2 or not(FSRC1 == FSRC2) or NCFSRC1 ~= NCFSRC2 or not(NCFSRC1 == NCFSRC2) then
            while true do end
        end
        if (FS1 == FSRC1 or not(FS1 ~= FSRC1) or FS2 == FSRC1 or not(FS2 ~= FSRC1)) then
            while true do end
        end
        if (FS1 == FSRC2 or not(FS1 ~= FSRC2) or FS2 == FSRC2 or not(FS2 ~= FSRC2)) then
            while true do end
        end
        if (FS1 ~= NCFSRC2 or not(FS1 == NCFSRC2) or FS2 ~= NCFSRC2 or not(FS2 == NCFSRC2)) then
            while true do end
        end
        if (FS1 ~= NCFSRC1 or not(FS1 == NCFSRC1) or FS2 ~= NCFSRC1 or not(FS2 == NCFSRC1)) then
            while true do end
        end

        local ILC1,ICL2 = ICL1(Function), ICL2(Function)
        if ILC1 or ILC2 then
            while true do end
        end

        local ValuesCheck1, ValuesCheck2 = GUVS1(Function),GUVS2(Function)
        if #ValuesCheck1 ~= 0 or #ValuesCheck2 ~= 0 then
            while true do end
        else
            for i,v in pairs(ValuesCheck1) do
                if type(v) ~= "userdata" then
                    while true do end
                end
            end
            for i,v in pairs(ValuesCheck2) do
                if type(v) ~= "userdata" then
                    while true do end
                end
            end
        end

        local ValueCheck1, ValueCheck2 = GUV1(Function, 1),GUV2(Function, 1)
        if type(ValueCheck1) ~= "userdata" or type(ValueCheck2) ~= "userdata" then
            while true do end
        end
        FunctionIncrement = FunctionIncrement + 1
    end
end

local EQCheck = function(b,c)if type(b)~=type(c)then return false end if type(b)~=type(c)then return false end local d={c,b,c,b}if d[1]~=d[1]then return not true or false end if d[1]~=d[2]then return not true or false end if d[2]~=d[1]then return not true or false end if d[2]~=d[2]then return not true or false end local e,f,g,h,i,j=1 and 2,2 and nil,true==not not true,false==0,not 2==false,-1==0 local k,l,m,n=74,{99,115,90,111,110,121,102,105,74},88,95 if e then if g then if i then if e and not f then if not h==g then if f==true then warn"A"else if i==4 then if f==(function()return not f end)()then for o=1,#b do if b:sub(o,k)=="true"then return false end end end else if not j and i then if(function()return 1==2 end)()and g==g and i~=g then if f and e then local k,l,m="string","byte",nil return not k==l and m else if e=="string"and g=="find"then return not"gsub"end end else if k==l[#l]and l[1]==(function()return m and l[1]end)()then if e==n-1 or not l then return(function()return b==k and n-1==k end)()or k==f else if b and k==({74})[1]and(function(k,l)return k and l end)(1,2)then return not b==false and not(function()return not b:find(c)and c:find(b)end)()and true end end end end end end end end else if not k==true then if 4==k and{3}==l then if i==f then if"string"and"reverse"then local p,q="detsiletihW",true if p and q==not not false then while true==not false do for o=1,12 do local r=l[o]if r then l[r]=l[o]and r else l[o]=l[r]end end end end end end end end end else for o=1,#c+#b do if o==4 then o=o+1 else o=o+1 local s=false local k,l,m="https://","string","byte"for o,t in pairs({99,89,101,121,95,80,92,103,105})do if l[o]==t and(function(k)end)(t)then s=true else s=false for o=1,10 do for o=5,24 do if o~=3 then return(function()if not k==b then return false end end)()else return not true end end end end end return s end end end else if k==l[3]then if b:sub(3,3):sub(#c)==not 4 then if b:gsub("%q","eq")then return(function(k,l,m)return k,l,m end)(b,c,"\n")else local s,u=false,{87,104,105,116,101,108,105,115,116,32,115,117,99,99,101,115,115}if(function()return not 1==b end)()then for o=1,#u do local t=string.char(u[o])if u[o]==t:byte()then local s=false or true end end return s==nil and c==n else s=false for o=1,10 do if o%2==0 then return false end end end end end end end else if k==l and b~=b then return not true or false end end end

local LoginUI = Instance.new("ScreenGui") -- thank 0x37 for this ui, feel free to change it
local Main = Instance.new("Frame")
local MC = Instance.new("UICorner")
local LoginBtn = Instance.new("TextButton")
local LBC = Instance.new("UICorner")
local LoginBox = Instance.new("TextBox")
local LB2C = Instance.new("UICorner")
local Title = Instance.new("TextLabel")


local parentUI = function(ui)
    if syn and syn.protect_gui then
        syn.protect_gui(ui) 
    end
    if gethui then
        ui.Parent = gethui()
        return
    end
    if get_hidden_ui then
        ui.Parent = get_hidden_ui()
        return
    end
    ui.Parent = game:GetService('CoreGui')
end

parentUI(LoginUI)
local Min, Max = 33, 122
local StrTab = {}
local NumbTab = {}
for i = Min, Max do
	local Int, Chr = i-Min+1, string.char(i)
	StrTab[Chr] = Int
	NumbTab[Int] = Chr
end
local function Subtrack(Chr)
	local A = #NumbTab*(math.floor(Chr/#NumbTab))
	if Chr-A == 0 then
		return A-#NumbTab
	end
	return A
end
local function ConvertN(N)
	if N < 0 then
		return N *-1
	end
	return N
end
local function Encrypt(Str, Offset) -- old encrypt function lol pls dont share
	local Start = Offset
	local Amount = 0
	local S = ""
	for i = 1, string.len(Str) do
		local Chr = StrTab[string.sub(Str, i, i)]+Start
		Chr = Chr-Subtrack(Chr)
		S = S..NumbTab[Chr]
		Amount = Amount + 1
		if Amount >= ConvertN(Offset) then
			Amount = 0
			Start = Start + Offset
		end
	end
	return S
end
local keyy = pcall(function()
    readfile('CynicalAuth.dat')
end) and Encrypt(readfile('CynicalAuth.dat'), -9) or ''

LoginUI.Name = game:GetService('HttpService'):GenerateGUID(true)
LoginUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Main.Name = "Main"
Main.Parent = LoginUI
Main.BackgroundColor3 = Color3.fromRGB(32, 32, 32)
Main.Position = UDim2.new(0.5, 0, 0.5, 0)
Main.AnchorPoint = Vector2.new(0.5, 0.5)
Main.Size = UDim2.new(0, 237, 0, 104)

MC.CornerRadius = UDim.new(0, 4)
MC.Name = "MC"
MC.Parent = Main

LoginBtn.Name = "LoginBtn"
LoginBtn.Parent = Main
LoginBtn.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
LoginBtn.BorderSizePixel = 0
LoginBtn.Position = UDim2.new(0.0250000004, 0, 0.59799999, 0)
LoginBtn.Size = UDim2.new(0, 225, 0, 36)
LoginBtn.AutoButtonColor = false
LoginBtn.Font = Enum.Font.GothamSemibold
LoginBtn.Text = "Login"
LoginBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
LoginBtn.TextSize = 14.000

LBC.CornerRadius = UDim.new(0, 4)
LBC.Name = "LBC"
LBC.Parent = LoginBtn

LoginBox.Name = "LoginBox"
LoginBox.Parent = Main
LoginBox.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
LoginBox.BorderSizePixel = 0
LoginBox.Position = UDim2.new(0.0250000004, 0, 0.264999986, 0)
LoginBox.Size = UDim2.new(0, 225, 0, 30)
LoginBox.Font = Enum.Font.Gotham
LoginBox.PlaceholderColor3 = Color3.fromRGB(226, 226, 226)
LoginBox.PlaceholderText = "Key Here"
LoginBox.Text = keyy
LoginBox.TextColor3 = Color3.fromRGB(255, 255, 255)
LoginBox.TextSize = 14.000

LB2C.CornerRadius = UDim.new(0, 4)
LB2C.Name = "LB2C"
LB2C.Parent = LoginBox

Title.Name = "Title"
Title.Parent = Main
Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1.000
Title.Position = UDim2.new(0.0250000004, 0, 0.0450000018, 0)
Title.Size = UDim2.new(0, 194, 0, 17)
Title.Font = Enum.Font.GothamBold
Title.Text = "Cynical Fusion"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14.000
Title.TextXAlignment = Enum.TextXAlignment.Left
local table_flip = function(Thing)
    local tf = {}
    for i, v in pairs(Thing) do
        tf[v] = i
    end
    return tf
end
local function N(n)
    if n< 0 then
    	return n*-1
    end
    return n
end
b91enc={
	'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
	'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '#', '$',
	'%', '&', '(', ')', '*', '+', ',', '.', '/', ':', ';', '<', '=',
	'>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '"'
}
b91enc[0]='A'
b91dec = table_flip(b91enc)
local decode = function(d)
	local l,v,o,b,n = #d,-1,"",0,0
	for i in d:gmatch(".") do
		local c=b91dec[i]
		if not(c) then -- ignore this this could be so much better lol
		else
			if v < 0 then
				v = c
			else
				v = v+c*91
				b = bit32.bor(b, bit32.lshift(v,n))
				if bit32.band(v,8191) then
					n = n + 13
				else
					n = n + 14
				end
				while true do
					o=o..string.char(bit32.band(b,255))
					b=bit32.rshift(b,8)
					n=n-8
					if not (n>7) then
						break
					end
				end
				v=-1
			end
		end
	end
	if v + 1>0 then
		o=o..string.char(bit32.band(bit32.bor(b,bit32.lshift(v,n)),255))
	end
	return o
end
local encode = function(d)
    local b,n,o,l=0,0,"",#d
	for i in d:gmatch(".") do
		b=bit32.bor(b,bit32.lshift(string.byte(i),n))
		n=n+8
		if n>13 then
			v=bit32.band(b,8191)
			if v>88 then
				b=bit32.rshift(b,13)
				n=n-13
			else
				v=bit32.band(b,16383)
				b=bit32.rshift(b,14)
				n=n-14
			end
			o=o..b91enc[v % 91] .. b91enc[math.floor(v / 91)]
		end
	end
	if n>0 then
		o=o..b91enc[b % 91]
		if n>7 or b>90 then
			o=o .. b91enc[math.floor(b / 91)]
		end
	end
	return o
end
local Min, Max = 5, 10
    local function GetHash()
		local Time = math.floor((tick()*10000)/math.random(3, 7000))
		return Time
	end
	local function RoundNumber(Number, To)
		local Number = tostring(Number * To)
		for i =-1, string.len(Number) do
			if string.sub(Number, i, i) == "." then
				local TempNumber = string.sub(Number, 1, i-1)
				if tonumber(string.sub(Number, i+1, i+1)) >= 5 then
					TempNumber = tostring(tonumber(TempNumber) + 1)
				end
				Number = TempNumber
				break
			end
		end
		return tonumber(Number)/To
	end
	local function HashString(Str) -- dont share pls
		local Time = tostring(GetHash())
		local RealTime = ""
		for i = 1, string.len(Time) do
			if string.sub(Time, i, i) ~= "0" then
				RealTime = RealTime..string.sub(Time, i, i)
			end
		end
		local Spot = 0
		local MaxSpot = string.len(RealTime)
		local S = RealTime..":"
		for i = 1, string.len(Str) do
			Spot = Spot + 1
			local NewNumber = string.byte(string.sub(Str, i, i))/tonumber(string.sub(RealTime, Spot, Spot))
			NewNumber = RoundNumber(NewNumber, 10000)
			S = S..tostring(string.len(NewNumber))..tostring(NewNumber)
			if Spot == MaxSpot then
				Spot = 0
			end
		end
		return S
	end
    
	local function Dehash(Str) -- dont share pls
        local Hash = ""
        for i = 1, string.len(Str) do
            if string.sub(Str, i, i) == ":" then
                Hash = string.sub(Str, 1, i-1)
                Str = string.sub(Str, i+1)
                break
            end
        end
        local Spot = 0
        local Amount = 0
        local Open = true
        local Next = 0
        local S = ""
        for i = 1, string.len(Str) do
            if Open == true and Next < i then
                Open = false
                Spot = Spot + 1
                Amount = tonumber(string.sub(Str, i, i))
                local Number = tonumber(string.sub(Str, i+1, i+Amount))
                S = S..string.char(RoundNumber(Number*tonumber(string.sub(Hash, Spot, Spot)), 10))
                if Spot == string.len(Hash) then
                    Spot = 0
                end
                Next = i+Amount
                Open = true
            end
        end
        return S
	end

	local Min, Max = 33, 122
	local StrTab = {}
	local NumbTab = {}

	for i = Min, Max do
		local Int, Chr = i-Min+1, string.char(i)
		StrTab[Chr] = Int
		NumbTab[Int] = Chr
	end

	function Subtrack(Chr)
		local A = #NumbTab*(math.floor(Chr/#NumbTab))
		if Chr-A == 0 then
			return A-#NumbTab
		end
		return A
	end

	function ConvertN(N)
		if N < 0 then
			return N *-1
		end
		return N
	end

	function Encrypt(Str, Offset) -- old encrypt function lol pls dont share
		local Start = Offset
		local Amount = 0
		local S = ""
		for i = 1, string.len(Str) do
			local Chr = StrTab[string.sub(Str, i, i)]+Start
			Chr = Chr-Subtrack(Chr)
			S = S..NumbTab[Chr]
			Amount = Amount + 1
			if Amount >= ConvertN(Offset) then
				Amount = 0
				Start = Start + Offset
			end
		end
		return S
	end
local hash

do
    local MOD = 2 ^ 32
    local MODM = MOD - 1
    local bxor = bit32.bxor
    local band = bit32.band
    local bnot = bit32.bnot
    local rshift1 = bit32.rshift
    local rshift = bit32.rshift
    local lshift = bit32.lshift
    local rrotate = bit32.rrotate
    local str_gsub = string.gsub
    local str_fmt = string.format
    local str_byte = string.byte
    local str_char = string.char
    local str_rep = string.rep
    local k = {
        0x428a2f98,0x71374491,0xb5c0fbcf, 0xe9b5dba5,0x3956c25b,0x59f111f1,
        0x923f82a4, 0xab1c5ed5,0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,
        0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,0xe49b69c1,0xefbe4786,
        0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
        0x983e5152,
        0xa831c66d,
        0xb00327c8,
        0xbf597fc7,
        0xc6e00bf3,
        0xd5a79147,
        0x06ca6351,
        0x14292967,
        0x27b70a85,
        0x2e1b2138,
        0x4d2c6dfc,
        0x53380d13,
        0x650a7354,
        0x766a0abb,
        0x81c2c92e,
        0x92722c85,
        0xa2bfe8a1,
        0xa81a664b,
        0xc24b8b70,
        0xc76c51a3,
        0xd192e819,
        0xd6990624,
        0xf40e3585,
        0x106aa070,
        0x19a4c116,
        0x1e376c08,
        0x2748774c,
        0x34b0bcb5,
        0x391c0cb3,
        0x4ed8aa4a,
        0x5b9cca4f,
        0x682e6ff3,
        0x748f82ee,
        0x78a5636f,
        0x84c87814,
        0x8cc70208,
        0x90befffa,
        0xa4506ceb,
        0xbef9a3f7,
        0xc67178f2
    }
    function str2hexa(s)
        return (str_gsub(
            s,
            ".",
            function(c)
                return str_fmt("%02x", str_byte(c))
            end
        ))
    end
    function num2s(l, n)
        local s = ""
        for i = 1, n do
            local rem = l % 256
            s = str_char(rem) .. s
            l = (l - rem) / 256
        end
        return s
    end
    function s232num(s, i)
        local n = 0
        for i = i, i + 3 do
            n = n * 256 + str_byte(s, i)
        end
        return n
    end
    function preproc(msg, len)
        local extra = 64 - ((len + 9) % 64)
        len = num2s(8 * len, 8)
        msg = msg .. "\128" .. str_rep("\0", extra) .. len
        assert(#msg % 64 == 0)
        return msg
    end
    function initH256(H)
        H[1] = 0x6a09e667
        H[2] = 0xbb67ae85
        H[3] = 0x3c6ef372
        H[4] = 0xa54ff53a
        H[5] = 0x510e527f
        H[6] = 0x9b05688c
        H[7] = 0x1f83d9ab
        H[8] = 0x5be0cd19
        return H
    end
    function digestblock(msg, i, H)
        local w = {}
        for j = 1, 16 do
            w[j] = s232num(msg, i + (j - 1) * 4)
        end
        for j = 17, 64 do
            local v = w[j - 15]
            local s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))
            v = w[j - 2]
            w[j] = w[j - 16] + s0 + w[j - 7] + bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))
        end
        local a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
        for i = 1, 64 do
            local s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))
            local maj = bxor(band(a, b), band(a, c), band(b, c))
            local t2 = s0 + maj
            local s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))
            local ch = bxor(band(e, f), band(bnot(e), g))
            local t1 = h + s1 + ch + k[i] + w[i]
            h, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2
        end
        H[1] = band(H[1] + a)
        H[2] = band(H[2] + b)
        H[3] = band(H[3] + c)
        H[4] = band(H[4] + d)
        H[5] = band(H[5] + e)
        H[6] = band(H[6] + f)
        H[7] = band(H[7] + g)
        H[8] = band(H[8] + h)
    end
    hash = function(msg, t)
        msg = preproc(msg, #msg)
        local H = initH256({})
        for i = 1, #msg, 64 do
            digestblock(msg, i, H)
        end
        return str2hexa(num2s(H[1], 4)..num2s(H[2], 4)..num2s(H[3], 4)..num2s(H[4], 4) .. num2s(H[5], 4) .. num2s(H[6], 4) .. num2s(H[7], 4) .. num2s(H[8], 4))
    end
end
for i = 1, Utils["hash limiter"] do
    hash(hash(hash(hash("Lol Fucked Idiot! "..i)))) -- anti hyper moment
end

local a = false
local KenuChecks = function()
    if a then return end
    a = true
    LoginBtn.Text = 'Checking...'
	local WhitelistData = {
		["Key"] = LoginBox.Text
	}

	local time = os.time()
    local Time = tick()
    wait(.5)
    spawn(function()
        while wait() do
            if Time == tick() then
                Log({["Type"] = "EQ/JMP", ["Key"] = WhitelistData.Key}, MS_ENCRYPT("lol idiot found!"))
                while true do end
            end
        end
    end)
	local RequestMethod = http_request or request or (syn and syn.request);
    repeat until RequestMethod
	local Request = function(url, headers)
		return RequestMethod({
			Url = url,
			Method = "GET",
			Headers = headers or nil
		}).Body
	end
    local HttpService = game:GetService("HttpService")
    local RunService = game:GetService("RunService")
	local FullEncode = function(Text,Method,Mode)
	    
        if Mode == "1" then
            if Method == MS_ENCRYPT("Text") then
                return HashString(encode(Text));
            elseif Method == MS_ENCRYPT("Hash") then
                 return "Hashed"
                --return HashString(hash("sha256", Text));
            end
        elseif Mode == MS_ENCRYPT("0") then
            if Method == "Time" then
                local strNew = decode(Dehash(Text))
                local Identifier = {}
                local les = string.len
                local ins = table.insert
                local CLength = 16
                for i = 1, 10 do
                    Identifier[string.sub(strNew, (i - 1) * CLength + 1, (i - 1) * CLength + CLength)] = i - 1
                end
                IdentifierS = string.sub(strNew, CLength * 10 + 1)
                local str = ""
                for i = 1, string.len(IdentifierS) / CLength do
                    str = str..Identifier[string.sub(IdentifierS, (i - 1) * CLength + 1, (i - 1) * CLength + CLength)]
                end
                return str
            elseif Method == "Text" then
                local string1 = syn_crypt_b64_decode(Text)
                local string2 = Dehash(string1)
                local string3 = decode(string2)

                return string3 -- ignore this i was debuging and i can't put it into 1 line anymore??? 
            elseif Method == "Hash" then
                return Dehash(Text);
            end
        end
	end
    local SendMessage = function(DataTab)
        LoginBtn.Text = DataTab.Text
        if DataTab.Del then
            wait(DataTab.Wait)
            LoginBtn.Text = 'Invalid HWID...'
            LoginUI:Destroy()
        end
    end
	--[[Check functions end]]
      
	local chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
	local length = 500
    local randomString = ''
    charTable = {}
    for c in chars:gmatch"." do
    	table.insert(charTable, c)
    end
    for i = 1, length do
        randomString = randomString .. charTable[math.random(1, #charTable)]
	end
	local Random = hash(randomString)
    local Service = game:GetService("HttpService")
    --print(tostring(Service:JSONDecode(FullEncode(Request(MS_ENCRYPT("%s%s&Data=%s"):format(Utils.Url,WhitelistData.Key,tostring(Random))),"Text","0"))))
    local Site = Service:JSONDecode(FullEncode(Request(MS_ENCRYPT("%s%s&Data=%s"):format(Utils.Url,WhitelistData.Key,tostring(Random))),"Text","0"))
    local Site2 = Service:JSONDecode(Request(MS_ENCRYPT("https://www.httpbin.org/get")))
    --print(Request(MS_ENCRYPT("https://www.httpbin.org/get")))
    local localHwid;

    if syn then
        localHwid = Site2.headers["Syn-Fingerprint"]
    elseif typeof(getexecutorname) == "function" then
        localHwid = Site2.headers["Fingerprint"]
    elseif (KRNL_LOADED and "Krnl") then
        localHwid = Site2.headers["Krnl-Hwid"]
    end

    local Data = {
        ["Message"] = Site.Message,
		["AuthKey"] = Site.Key, -- too lazy, you should probably encode this hash in php
        ["Hwid"] = FullEncode(Site.Hwid,"Text","0"),
        ["Blacklist"] = FullEncode(Site.Blacklist,"Text","0"),
        ["Consts"] = {
            [MS_ENCRYPT('A')] = FullEncode(Site.C1,"Text","0"), 
            [MS_ENCRYPT('B')] = FullEncode(Site.C2,"Text","0"), 
            [MS_ENCRYPT('C')] = FullEncode(Site.C3,"Text","0"), 
            [MS_ENCRYPT('D')] = FullEncode(Site.C4,"Text","0"), 
            [MS_ENCRYPT('E')] = FullEncode(Site.C5,"Text","0"), 
            [MS_ENCRYPT('F')] = FullEncode(Site.C6,"Text","0"), 
            [MS_ENCRYPT('G')] = FullEncode(Site.C7,"Text","0"), 
            [MS_ENCRYPT('H')] = FullEncode(Site.C8,"Text","0"),
            [MS_ENCRYPT('I')] = FullEncode(Site.C9,"Text","0")
        },
        ["Aleph"] = FullEncode(Site.Aleph,"Time","0")
	}
    
	if EQCheck(Data.AuthKey,hash(WhitelistData.Key)) then -- Message
		if not EQCheck(Data.AuthKey,hash(WhitelistData.Key)) then
			Log({["Type"] = "EQ/JMP", ["Key"] = WhitelistData.Key}, MS_ENCRYPT("Message check"))
            while true do end
		end
        if EQCheck(Data.Hwid,localHwid) or EQCheck(Data.Hwid,"Unknown") then
            if not EQCheck(Data.Hwid,"Unknown") then
                if not EQCheck(Data.Hwid,localHwid) then
                    Log({["Type"] = "EQ/JMP", ["Key"] = WhitelistData.Key}, MS_ENCRYPT("HWID-check"))
                    while true do end
                end
            end
            if N(tonumber(Data.Aleph) - tick()) <= 86400 and 1 > 0 and (9/3) > 2 then -- dynamic part lool will break cracks after 24 hours you could probably lower it 12 by dividing source
                SendMessage({["Text"] = "Success!",["Wait"] = 2,["Del"] = true})
                Script(Data.Consts)
                if keyy == '' then
                    writefile('CynicalAuth.dat', Encrypt(WhitelistData.Key, 9))
                end
            else
                Log({["Type"] = "EQ/JMP", ["Key"] = WhitelistData.Key}, MS_ENCRYPT("Dynamic-failed"))
                while true do end
            end
        else
            Log({["Type"] = "EQ/JMP", ["Key"] = WhitelistData.Key}, MS_ENCRYPT("HWID-Mis-match??"))
            --while true do end
        end
	else
        SendMessage({["Text"] = "Incorrect Key!",["Wait"] = 2,["Del"] = true})
	end
end
LoginBtn.MouseButton1Click:Connect(KenuChecks)

if keyy ~= '' then
    KenuChecks()
end
--#endregion
